/**
 * Copyright (c) 2010-2022 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package ai.coqui.libstt;

/**
 *
 * @author Dan Cunningham
 *
 */
public class implJNI {
    public final static native long new_modelstatep();

    public final static native long copy_modelstatep(long jarg1);

    public final static native void delete_modelstatep(long jarg1);

    public final static native void modelstatep_assign(long jarg1, long jarg2);

    public final static native long modelstatep_value(long jarg1);

    public final static native long new_streamingstatep();

    public final static native long copy_streamingstatep(long jarg1);

    public final static native void delete_streamingstatep(long jarg1);

    public final static native void streamingstatep_assign(long jarg1, long jarg2);

    public final static native long streamingstatep_value(long jarg1);

    public final static native String TokenMetadata_Text_get(long jarg1, TokenMetadata jarg1_);

    public final static native long TokenMetadata_Timestep_get(long jarg1, TokenMetadata jarg1_);

    public final static native float TokenMetadata_StartTime_get(long jarg1, TokenMetadata jarg1_);

    public final static native long CandidateTranscript_NumTokens_get(long jarg1, CandidateTranscript jarg1_);

    public final static native double CandidateTranscript_Confidence_get(long jarg1, CandidateTranscript jarg1_);

    public final static native long CandidateTranscript_getToken(long jarg1, CandidateTranscript jarg1_, int jarg2);

    public final static native long Metadata_NumTranscripts_get(long jarg1, Metadata jarg1_);

    public final static native long Metadata_getTranscript(long jarg1, Metadata jarg1_, int jarg2);

    public final static native void delete_Metadata(long jarg1);

    public final static native int CreateModel(String jarg1, long jarg2);

    public final static native int CreateModelFromBuffer(String jarg1, long jarg2, long jarg3);

    public final static native long GetModelBeamWidth(long jarg1);

    public final static native int SetModelBeamWidth(long jarg1, long jarg2);

    public final static native int GetModelSampleRate(long jarg1);

    public final static native void FreeModel(long jarg1);

    public final static native int EnableExternalScorer(long jarg1, String jarg2);

    public final static native int EnableExternalScorerFromBuffer(long jarg1, String jarg2, long jarg3);

    public final static native int AddHotWord(long jarg1, String jarg2, float jarg3);

    public final static native int EraseHotWord(long jarg1, String jarg2);

    public final static native int ClearHotWords(long jarg1);

    public final static native int DisableExternalScorer(long jarg1);

    public final static native int SetScorerAlphaBeta(long jarg1, float jarg2, float jarg3);

    public final static native String SpeechToText(long jarg1, short[] jarg2, long jarg3);

    public final static native long SpeechToTextWithMetadata(long jarg1, short[] jarg2, long jarg3, long jarg4);

    public final static native int CreateStream(long jarg1, long jarg2);

    public final static native void FeedAudioContent(long jarg1, short[] jarg2, long jarg3);

    public final static native String IntermediateDecode(long jarg1);

    public final static native long IntermediateDecodeWithMetadata(long jarg1, long jarg2);

    public final static native String IntermediateDecodeFlushBuffers(long jarg1);

    public final static native long IntermediateDecodeWithMetadataFlushBuffers(long jarg1, long jarg2);

    public final static native String FinishStream(long jarg1);

    public final static native long FinishStreamWithMetadata(long jarg1, long jarg2);

    public final static native void FreeStream(long jarg1);

    public final static native void FreeMetadata(long jarg1, Metadata jarg1_);

    public final static native void FreeString(String jarg1);

    public final static native String Version();

    public final static native String ErrorCodeToErrorMessage(int jarg1);
}
