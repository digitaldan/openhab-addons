/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import org.openhab.binding.matter.internal.client.model.cluster.ClusterCommand;
import org.openhab.binding.matter.internal.client.model.cluster.gen.UnitTestingClusterTypes.*;

/**
 * UnitTesting
 *
 * @author Dan Cunningham - Initial contribution
 */
public class UnitTestingClusterCommands {

    public static ClusterCommand test() {
        return new ClusterCommand("test", new TestCommandOptions());
    }

    public static ClusterCommand testSpecificResponse(Integer returnValue) {
        return new ClusterCommand("testSpecificResponse", new TestSpecificResponseCommandOptions(returnValue));
    }

    public static ClusterCommand testNotHandled() {
        return new ClusterCommand("testNotHandled", new TestNotHandledCommandOptions());
    }

    public static ClusterCommand testAddArgumentsResponse(Integer returnValue) {
        return new ClusterCommand("testAddArgumentsResponse", new TestAddArgumentsResponseCommandOptions(returnValue));
    }

    public static ClusterCommand testSpecific() {
        return new ClusterCommand("testSpecific", new TestSpecificCommandOptions());
    }

    public static ClusterCommand testSimpleArgumentResponse(Boolean returnValue) {
        return new ClusterCommand("testSimpleArgumentResponse",
                new TestSimpleArgumentResponseCommandOptions(returnValue));
    }

    public static ClusterCommand testUnknownCommand() {
        return new ClusterCommand("testUnknownCommand", new TestUnknownCommandCommandOptions());
    }

    public static ClusterCommand testStructArrayArgumentResponse(NestedStructList arg1, SimpleStruct[] arg2,
            SimpleEnum arg3, Boolean arg4, SimpleEnum arg5, Boolean arg6) {
        return new ClusterCommand("testStructArrayArgumentResponse",
                new TestStructArrayArgumentResponseCommandOptions(arg1, arg2, arg3, arg4, arg5, arg6));
    }

    public static ClusterCommand testAddArguments(Integer arg1, Integer arg2) {
        return new ClusterCommand("testAddArguments", new TestAddArgumentsCommandOptions(arg1, arg2));
    }

    public static ClusterCommand testListInt8UReverseResponse(Integer arg1) {
        return new ClusterCommand("testListInt8UReverseResponse", new TestListInt8UReverseResponseCommandOptions(arg1));
    }

    public static ClusterCommand testSimpleArgumentRequest(Boolean arg1) {
        return new ClusterCommand("testSimpleArgumentRequest", new TestSimpleArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testEnumsResponse(Integer arg1, SimpleEnum arg2) {
        return new ClusterCommand("testEnumsResponse", new TestEnumsResponseCommandOptions(arg1, arg2));
    }

    public static ClusterCommand testStructArrayArgumentRequest(NestedStructList arg1, SimpleStruct[] arg2,
            SimpleEnum arg3, Boolean arg4, SimpleEnum arg5, Boolean arg6) {
        return new ClusterCommand("testStructArrayArgumentRequest",
                new TestStructArrayArgumentRequestCommandOptions(arg1, arg2, arg3, arg4, arg5, arg6));
    }

    public static ClusterCommand testNullableOptionalResponse(Boolean wasPresent, Boolean wasNull, Integer value,
            Integer originalValue) {
        return new ClusterCommand("testNullableOptionalResponse",
                new TestNullableOptionalResponseCommandOptions(wasPresent, wasNull, value, originalValue));
    }

    public static ClusterCommand testStructArgumentRequest(SimpleStruct[] arg1) {
        return new ClusterCommand("testStructArgumentRequest", new TestStructArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testComplexNullableOptionalResponse(Boolean nullableIntWasNull,
            Integer nullableIntValue, Boolean optionalIntWasPresent, Integer optionalIntValue,
            Boolean nullableOptionalIntWasPresent, Boolean nullableOptionalIntWasNull, Integer nullableOptionalIntValue,
            Boolean nullableStringWasNull, String nullableStringValue, Boolean optionalStringWasPresent,
            String optionalStringValue, Boolean nullableOptionalStringWasPresent, Boolean nullableOptionalStringWasNull,
            String nullableOptionalStringValue, Boolean nullableStructWasNull, SimpleStruct[] nullableStructValue,
            Boolean optionalStructWasPresent, SimpleStruct[] optionalStructValue,
            Boolean nullableOptionalStructWasPresent, Boolean nullableOptionalStructWasNull,
            SimpleStruct[] nullableOptionalStructValue, Boolean nullableListWasNull, SimpleEnum nullableListValue,
            Boolean optionalListWasPresent, SimpleEnum optionalListValue, Boolean nullableOptionalListWasPresent,
            Boolean nullableOptionalListWasNull, SimpleEnum nullableOptionalListValue) {
        return new ClusterCommand("testComplexNullableOptionalResponse",
                new TestComplexNullableOptionalResponseCommandOptions(nullableIntWasNull, nullableIntValue,
                        optionalIntWasPresent, optionalIntValue, nullableOptionalIntWasPresent,
                        nullableOptionalIntWasNull, nullableOptionalIntValue, nullableStringWasNull,
                        nullableStringValue, optionalStringWasPresent, optionalStringValue,
                        nullableOptionalStringWasPresent, nullableOptionalStringWasNull, nullableOptionalStringValue,
                        nullableStructWasNull, nullableStructValue, optionalStructWasPresent, optionalStructValue,
                        nullableOptionalStructWasPresent, nullableOptionalStructWasNull, nullableOptionalStructValue,
                        nullableListWasNull, nullableListValue, optionalListWasPresent, optionalListValue,
                        nullableOptionalListWasPresent, nullableOptionalListWasNull, nullableOptionalListValue));
    }

    public static ClusterCommand testNestedStructArgumentRequest(NestedStruct[] arg1) {
        return new ClusterCommand("testNestedStructArgumentRequest",
                new TestNestedStructArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand booleanResponse(Boolean value) {
        return new ClusterCommand("booleanResponse", new BooleanResponseCommandOptions(value));
    }

    public static ClusterCommand testListStructArgumentRequest(SimpleStruct[] arg1) {
        return new ClusterCommand("testListStructArgumentRequest",
                new TestListStructArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand simpleStructResponse(SimpleStruct[] arg1) {
        return new ClusterCommand("simpleStructResponse", new SimpleStructResponseCommandOptions(arg1));
    }

    public static ClusterCommand testListInt8UArgumentRequest(Integer arg1) {
        return new ClusterCommand("testListInt8UArgumentRequest", new TestListInt8UArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testEmitTestEventResponse(Long value) {
        return new ClusterCommand("testEmitTestEventResponse", new TestEmitTestEventResponseCommandOptions(value));
    }

    public static ClusterCommand testNestedStructListArgumentRequest(NestedStructList arg1) {
        return new ClusterCommand("testNestedStructListArgumentRequest",
                new TestNestedStructListArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testEmitTestFabricScopedEventResponse(Long value) {
        return new ClusterCommand("testEmitTestFabricScopedEventResponse",
                new TestEmitTestFabricScopedEventResponseCommandOptions(value));
    }

    public static ClusterCommand testListNestedStructListArgumentRequest(NestedStructList arg1) {
        return new ClusterCommand("testListNestedStructListArgumentRequest",
                new TestListNestedStructListArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testListInt8UReverseRequest(Integer arg1) {
        return new ClusterCommand("testListInt8UReverseRequest", new TestListInt8UReverseRequestCommandOptions(arg1));
    }

    public static ClusterCommand testEnumsRequest(Integer arg1, SimpleEnum arg2) {
        return new ClusterCommand("testEnumsRequest", new TestEnumsRequestCommandOptions(arg1, arg2));
    }

    public static ClusterCommand testNullableOptionalRequest(Integer arg1) {
        return new ClusterCommand("testNullableOptionalRequest", new TestNullableOptionalRequestCommandOptions(arg1));
    }

    public static ClusterCommand testComplexNullableOptionalRequest(Integer nullableInt, Integer optionalInt,
            Integer nullableOptionalInt, String nullableString, String optionalString, String nullableOptionalString,
            SimpleStruct[] nullableStruct, SimpleStruct[] optionalStruct, SimpleStruct[] nullableOptionalStruct,
            SimpleEnum nullableList, SimpleEnum optionalList, SimpleEnum nullableOptionalList) {
        return new ClusterCommand("testComplexNullableOptionalRequest",
                new TestComplexNullableOptionalRequestCommandOptions(nullableInt, optionalInt, nullableOptionalInt,
                        nullableString, optionalString, nullableOptionalString, nullableStruct, optionalStruct,
                        nullableOptionalStruct, nullableList, optionalList, nullableOptionalList));
    }

    public static ClusterCommand simpleStructEchoRequest(SimpleStruct[] arg1) {
        return new ClusterCommand("simpleStructEchoRequest", new SimpleStructEchoRequestCommandOptions(arg1));
    }

    public static ClusterCommand timedInvokeRequest() {
        return new ClusterCommand("timedInvokeRequest", new TimedInvokeRequestCommandOptions());
    }

    public static ClusterCommand testSimpleOptionalArgumentRequest(Boolean arg1) {
        return new ClusterCommand("testSimpleOptionalArgumentRequest",
                new TestSimpleOptionalArgumentRequestCommandOptions(arg1));
    }

    public static ClusterCommand testEmitTestEventRequest(Integer arg1, SimpleEnum arg2, Boolean arg3) {
        return new ClusterCommand("testEmitTestEventRequest",
                new TestEmitTestEventRequestCommandOptions(arg1, arg2, arg3));
    }

    public static ClusterCommand testEmitTestFabricScopedEventRequest(Integer arg1) {
        return new ClusterCommand("testEmitTestFabricScopedEventRequest",
                new TestEmitTestFabricScopedEventRequestCommandOptions(arg1));
    }
}
