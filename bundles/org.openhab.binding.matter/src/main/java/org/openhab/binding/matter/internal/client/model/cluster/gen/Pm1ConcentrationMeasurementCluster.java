/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.model.cluster.BaseCluster;
import org.openhab.binding.matter.internal.client.model.cluster.gen.Pm1ConcentrationMeasurementClusterTypes.*;

/**
 * Pm1ConcentrationMeasurement
 *
 * @author Dan Cunningham - Initial contribution
 */
public class Pm1ConcentrationMeasurementCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "Pm1ConcentrationMeasurement";
    public static final int CLUSTER_ID = 0x042C;

    public Float measuredValue; // 0 single reportable
    public Float minMeasuredValue; // 1 single reportable
    public Float maxMeasuredValue; // 2 single reportable
    public Float peakMeasuredValue; // 3 single reportable
    public Integer peakMeasuredValueWindow; // 4 elapsed_s reportable
    public Float averageMeasuredValue; // 5 single reportable
    public Integer averageMeasuredValueWindow; // 6 elapsed_s reportable
    public Float uncertainty; // 7 single reportable
    public MeasurementUnitEnum measurementUnit; // 8 MeasurementUnitEnum reportable
    public MeasurementMediumEnum measurementMedium; // 9 MeasurementMediumEnum reportable
    public LevelValueEnum levelValue; // 10 LevelValueEnum reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public Pm1ConcentrationMeasurementCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 105, "Pm1ConcentrationMeasurement");
    }

    public String toString() {
        String str = "";
        str += "measuredValue : " + measuredValue + "\n";
        str += "minMeasuredValue : " + minMeasuredValue + "\n";
        str += "maxMeasuredValue : " + maxMeasuredValue + "\n";
        str += "peakMeasuredValue : " + peakMeasuredValue + "\n";
        str += "peakMeasuredValueWindow : " + peakMeasuredValueWindow + "\n";
        str += "averageMeasuredValue : " + averageMeasuredValue + "\n";
        str += "averageMeasuredValueWindow : " + averageMeasuredValueWindow + "\n";
        str += "uncertainty : " + uncertainty + "\n";
        str += "measurementUnit : " + measurementUnit + "\n";
        str += "measurementMedium : " + measurementMedium + "\n";
        str += "levelValue : " + levelValue + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
