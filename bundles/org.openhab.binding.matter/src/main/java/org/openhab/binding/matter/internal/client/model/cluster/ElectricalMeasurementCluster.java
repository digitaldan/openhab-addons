/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * ElectricalMeasurement
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ElectricalMeasurementCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "ELECTRICAL_MEASUREMENT_CLUSTER";
    public static final int CLUSTER_ID = 0x0B04;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(41, "measurementType"), entry(126, "dcVoltage"),
                entry(196, "dcVoltageMin"), entry(267, "dcVoltageMax"), entry(320, "dcCurrent"),
                entry(362, "dcCurrentMin"), entry(398, "dcCurrentMax"), entry(430, "dcPower"), entry(458, "dcPowerMin"),
                entry(483, "dcPowerMax"), entry(505, "dcVoltageMultiplier"), entry(527, "dcVoltageDivisor"),
                entry(547, "dcCurrentMultiplier"), entry(567, "dcCurrentDivisor"), entry(581, "dcPowerMultiplier"),
                entry(594, "dcPowerDivisor"), entry(606, "acFrequency"), entry(617, "acFrequencyMin"),
                entry(629, "acFrequencyMax"), entry(641, "neutralCurrent"), entry(653, "totalActivePower"),
                entry(665, "totalReactivePower"), entry(677, "totalApparentPower"),
                entry(688, "measured1stHarmonicCurrent"), entry(696, "measured3rdHarmonicCurrent"),
                entry(704, "measured5thHarmonicCurrent"), entry(712, "measured7thHarmonicCurrent"),
                entry(720, "measured9thHarmonicCurrent"), entry(728, "measured11thHarmonicCurrent"),
                entry(736, "measuredPhase1stHarmonicCurrent"), entry(744, "measuredPhase3rdHarmonicCurrent"),
                entry(752, "measuredPhase5thHarmonicCurrent"), entry(760, "measuredPhase7thHarmonicCurrent"),
                entry(767, "measuredPhase9thHarmonicCurrent"), entry(774, "measuredPhase11thHarmonicCurrent"),
                entry(781, "acFrequencyMultiplier"), entry(788, "acFrequencyDivisor"), entry(793, "powerMultiplier"),
                entry(798, "powerDivisor"), entry(803, "harmonicCurrentMultiplier"),
                entry(809, "phaseHarmonicCurrentMultiplier"), entry(814, "instantaneousVoltage"),
                entry(819, "instantaneousLineCurrent"), entry(824, "instantaneousActiveCurrent"),
                entry(829, "instantaneousReactiveCurrent"), entry(834, "instantaneousPower"), entry(839, "rmsVoltage"),
                entry(844, "rmsVoltageMin"), entry(849, "rmsVoltageMax"), entry(854, "rmsCurrent"),
                entry(858, "rmsCurrentMin"), entry(862, "rmsCurrentMax"), entry(866, "activePower"),
                entry(870, "activePowerMin"), entry(874, "activePowerMax"), entry(878, "reactivePower"),
                entry(882, "apparentPower"), entry(885, "powerFactor"),
                entry(889, "averageRmsVoltageMeasurementPeriod"), entry(892, "averageRmsUnderVoltageCounter"),
                entry(896, "rmsExtremeOverVoltagePeriod"), entry(902, "rmsExtremeUnderVoltagePeriod"),
                entry(906, "rmsVoltageSagPeriod"), entry(910, "rmsVoltageSwellPeriod"),
                entry(913, "acVoltageMultiplier"), entry(916, "acVoltageDivisor"), entry(919, "acCurrentMultiplier"),
                entry(922, "acCurrentDivisor"), entry(925, "acPowerMultiplier"), entry(928, "acPowerDivisor"),
                entry(931, "overloadAlarmsMask"), entry(935, "voltageOverload"), entry(938, "currentOverload"),
                entry(941, "acOverloadAlarmsMask"), entry(944, "acVoltageOverload"), entry(947, "acCurrentOverload"),
                entry(950, "acActivePowerOverload"), entry(953, "acReactivePowerOverload"),
                entry(956, "averageRmsOverVoltage"), entry(959, "averageRmsUnderVoltage"),
                entry(962, "rmsExtremeOverVoltage"), entry(964, "rmsExtremeUnderVoltage"), entry(966, "rmsVoltageSag"),
                entry(968, "rmsVoltageSwell"), entry(970, "lineCurrentPhaseB"), entry(972, "activeCurrentPhaseB"),
                entry(976, "reactiveCurrentPhaseB"), entry(978, "rmsVoltagePhaseB"), entry(980, "rmsVoltageMinPhaseB"),
                entry(982, "rmsVoltageMaxPhaseB"), entry(983, "rmsCurrentPhaseB"), entry(985, "rmsCurrentMinPhaseB"),
                entry(987, "rmsCurrentMaxPhaseB"), entry(989, "activePowerPhaseB"), entry(991, "activePowerMinPhaseB"),
                entry(993, "activePowerMaxPhaseB"), entry(995, "reactivePowerPhaseB"),
                entry(997, "apparentPowerPhaseB"), entry(999, "powerFactorPhaseB"),
                entry(1001, "averageRmsVoltageMeasurementPeriodPhaseB"),
                entry(1003, "averageRmsOverVoltageCounterPhaseB"), entry(1005, "averageRmsUnderVoltageCounterPhaseB"),
                entry(1007, "rmsExtremeOverVoltagePeriodPhaseB"), entry(1008, "rmsExtremeUnderVoltagePeriodPhaseB"),
                entry(1010, "rmsVoltageSagPeriodPhaseB"), entry(1012, "rmsVoltageSwellPeriodPhaseB"),
                entry(1013, "lineCurrentPhaseC"), entry(1015, "activeCurrentPhaseC"),
                entry(1018, "reactiveCurrentPhaseC"), entry(1021, "rmsVoltagePhaseC"),
                entry(1023, "rmsVoltageMinPhaseC"), entry(1025, "rmsVoltageMaxPhaseC"), entry(1027, "rmsCurrentPhaseC"),
                entry(1029, "rmsCurrentMinPhaseC"), entry(1031, "rmsCurrentMaxPhaseC"),
                entry(1033, "activePowerPhaseC"), entry(1036, "activePowerMinPhaseC"),
                entry(1037, "activePowerMaxPhaseC"), entry(1038, "reactivePowerPhaseC"),
                entry(1039, "apparentPowerPhaseC"), entry(1040, "powerFactorPhaseC"),
                entry(1041, "averageRmsVoltageMeasurementPeriodPhaseC"),
                entry(1042, "averageRmsOverVoltageCounterPhaseC"), entry(1043, "averageRmsUnderVoltageCounterPhaseC"),
                entry(1044, "rmsExtremeOverVoltagePeriodPhaseC"), entry(1045, "rmsExtremeUnderVoltagePeriodPhaseC"),
                entry(1046, "rmsVoltageSagPeriodPhaseC"), entry(1047, "rmsVoltageSwellPeriodPhaseC"),
                entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"), entry(9, "eventList"),
                entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(24, "getProfileInfoResponseCommand"), entry(126, "getProfileInfoCommand"),
                entry(82, "getMeasurementProfileResponseCommand"), entry(161, "getMeasurementProfileCommand"));
    }

    public Map<String, Boolean> measurementType; // 41 bitmap32
    public Integer dcVoltage; // 126 int16s
    public Integer dcVoltageMin; // 196 int16s
    public Integer dcVoltageMax; // 267 int16s
    public Integer dcCurrent; // 320 int16s
    public Integer dcCurrentMin; // 362 int16s
    public Integer dcCurrentMax; // 398 int16s
    public Integer dcPower; // 430 int16s
    public Integer dcPowerMin; // 458 int16s
    public Integer dcPowerMax; // 483 int16s
    public Integer dcVoltageMultiplier; // 505 int16u
    public Integer dcVoltageDivisor; // 527 int16u
    public Integer dcCurrentMultiplier; // 547 int16u
    public Integer dcCurrentDivisor; // 567 int16u
    public Integer dcPowerMultiplier; // 581 int16u
    public Integer dcPowerDivisor; // 594 int16u
    public Integer acFrequency; // 606 int16u
    public Integer acFrequencyMin; // 617 int16u
    public Integer acFrequencyMax; // 629 int16u
    public Integer neutralCurrent; // 641 int16u
    public Integer totalActivePower; // 653 int32s
    public Integer totalReactivePower; // 665 int32s
    public Integer totalApparentPower; // 677 int32u
    public Integer measured1stHarmonicCurrent; // 688 int16s
    public Integer measured3rdHarmonicCurrent; // 696 int16s
    public Integer measured5thHarmonicCurrent; // 704 int16s
    public Integer measured7thHarmonicCurrent; // 712 int16s
    public Integer measured9thHarmonicCurrent; // 720 int16s
    public Integer measured11thHarmonicCurrent; // 728 int16s
    public Integer measuredPhase1stHarmonicCurrent; // 736 int16s
    public Integer measuredPhase3rdHarmonicCurrent; // 744 int16s
    public Integer measuredPhase5thHarmonicCurrent; // 752 int16s
    public Integer measuredPhase7thHarmonicCurrent; // 760 int16s
    public Integer measuredPhase9thHarmonicCurrent; // 767 int16s
    public Integer measuredPhase11thHarmonicCurrent; // 774 int16s
    public Integer acFrequencyMultiplier; // 781 int16u
    public Integer acFrequencyDivisor; // 788 int16u
    public Integer powerMultiplier; // 793 int32u
    public Integer powerDivisor; // 798 int32u
    public Integer harmonicCurrentMultiplier; // 803 int8s
    public Integer phaseHarmonicCurrentMultiplier; // 809 int8s
    public Integer instantaneousVoltage; // 814 int16s
    public Integer instantaneousLineCurrent; // 819 int16u
    public Integer instantaneousActiveCurrent; // 824 int16s
    public Integer instantaneousReactiveCurrent; // 829 int16s
    public Integer instantaneousPower; // 834 int16s
    public Integer rmsVoltage; // 839 int16u
    public Integer rmsVoltageMin; // 844 int16u
    public Integer rmsVoltageMax; // 849 int16u
    public Integer rmsCurrent; // 854 int16u
    public Integer rmsCurrentMin; // 858 int16u
    public Integer rmsCurrentMax; // 862 int16u
    public Integer activePower; // 866 int16s
    public Integer activePowerMin; // 870 int16s
    public Integer activePowerMax; // 874 int16s
    public Integer reactivePower; // 878 int16s
    public Integer apparentPower; // 882 int16u
    public Integer powerFactor; // 885 int8s
    public Integer averageRmsVoltageMeasurementPeriod; // 889 int16u
    public Integer averageRmsUnderVoltageCounter; // 892 int16u
    public Integer rmsExtremeOverVoltagePeriod; // 896 int16u
    public Integer rmsExtremeUnderVoltagePeriod; // 902 int16u
    public Integer rmsVoltageSagPeriod; // 906 int16u
    public Integer rmsVoltageSwellPeriod; // 910 int16u
    public Integer acVoltageMultiplier; // 913 int16u
    public Integer acVoltageDivisor; // 916 int16u
    public Integer acCurrentMultiplier; // 919 int16u
    public Integer acCurrentDivisor; // 922 int16u
    public Integer acPowerMultiplier; // 925 int16u
    public Integer acPowerDivisor; // 928 int16u
    public Map<String, Boolean> overloadAlarmsMask; // 931 bitmap8
    public Integer voltageOverload; // 935 int16s
    public Integer currentOverload; // 938 int16s
    public Map<String, Boolean> acOverloadAlarmsMask; // 941 bitmap16
    public Integer acVoltageOverload; // 944 int16s
    public Integer acCurrentOverload; // 947 int16s
    public Integer acActivePowerOverload; // 950 int16s
    public Integer acReactivePowerOverload; // 953 int16s
    public Integer averageRmsOverVoltage; // 956 int16s
    public Integer averageRmsUnderVoltage; // 959 int16s
    public Integer rmsExtremeOverVoltage; // 962 int16s
    public Integer rmsExtremeUnderVoltage; // 964 int16s
    public Integer rmsVoltageSag; // 966 int16s
    public Integer rmsVoltageSwell; // 968 int16s
    public Integer lineCurrentPhaseB; // 970 int16u
    public Integer activeCurrentPhaseB; // 972 int16s
    public Integer reactiveCurrentPhaseB; // 976 int16s
    public Integer rmsVoltagePhaseB; // 978 int16u
    public Integer rmsVoltageMinPhaseB; // 980 int16u
    public Integer rmsVoltageMaxPhaseB; // 982 int16u
    public Integer rmsCurrentPhaseB; // 983 int16u
    public Integer rmsCurrentMinPhaseB; // 985 int16u
    public Integer rmsCurrentMaxPhaseB; // 987 int16u
    public Integer activePowerPhaseB; // 989 int16s
    public Integer activePowerMinPhaseB; // 991 int16s
    public Integer activePowerMaxPhaseB; // 993 int16s
    public Integer reactivePowerPhaseB; // 995 int16s
    public Integer apparentPowerPhaseB; // 997 int16u
    public Integer powerFactorPhaseB; // 999 int8s
    public Integer averageRmsVoltageMeasurementPeriodPhaseB; // 1001 int16u
    public Integer averageRmsOverVoltageCounterPhaseB; // 1003 int16u
    public Integer averageRmsUnderVoltageCounterPhaseB; // 1005 int16u
    public Integer rmsExtremeOverVoltagePeriodPhaseB; // 1007 int16u
    public Integer rmsExtremeUnderVoltagePeriodPhaseB; // 1008 int16u
    public Integer rmsVoltageSagPeriodPhaseB; // 1010 int16u
    public Integer rmsVoltageSwellPeriodPhaseB; // 1012 int16u
    public Integer lineCurrentPhaseC; // 1013 int16u
    public Integer activeCurrentPhaseC; // 1015 int16s
    public Integer reactiveCurrentPhaseC; // 1018 int16s
    public Integer rmsVoltagePhaseC; // 1021 int16u
    public Integer rmsVoltageMinPhaseC; // 1023 int16u
    public Integer rmsVoltageMaxPhaseC; // 1025 int16u
    public Integer rmsCurrentPhaseC; // 1027 int16u
    public Integer rmsCurrentMinPhaseC; // 1029 int16u
    public Integer rmsCurrentMaxPhaseC; // 1031 int16u
    public Integer activePowerPhaseC; // 1033 int16s
    public Integer activePowerMinPhaseC; // 1036 int16s
    public Integer activePowerMaxPhaseC; // 1037 int16s
    public Integer reactivePowerPhaseC; // 1038 int16s
    public Integer apparentPowerPhaseC; // 1039 int16u
    public Integer powerFactorPhaseC; // 1040 int8s
    public Integer averageRmsVoltageMeasurementPeriodPhaseC; // 1041 int16u
    public Integer averageRmsOverVoltageCounterPhaseC; // 1042 int16u
    public Integer averageRmsUnderVoltageCounterPhaseC; // 1043 int16u
    public Integer rmsExtremeOverVoltagePeriodPhaseC; // 1044 int16u
    public Integer rmsExtremeUnderVoltagePeriodPhaseC; // 1045 int16u
    public Integer rmsVoltageSagPeriodPhaseC; // 1046 int16u
    public Integer rmsVoltageSwellPeriodPhaseC; // 1047 int16u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public ElectricalMeasurementCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 31, "ElectricalMeasurement");
    }

    public void getProfileInfoResponseCommand(MatterClient client, Integer profileCount, Integer profileIntervalPeriod,
            Integer maxNumberOfIntervals, Integer listOfAttributes) throws Exception {
        final Integer _profileCount = profileCount;
        final Integer _profileIntervalPeriod = profileIntervalPeriod;
        final Integer _maxNumberOfIntervals = maxNumberOfIntervals;
        final Integer _listOfAttributes = listOfAttributes;
        Object o = new Object() {
            public Integer profileCount = _profileCount;
            public Integer profileIntervalPeriod = _profileIntervalPeriod;
            public Integer maxNumberOfIntervals = _maxNumberOfIntervals;
            public Integer listOfAttributes = _listOfAttributes;
        };
        sendCommand(client, "getProfileInfoResponseCommand", o);
    }

    public void getProfileInfoCommand(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "getProfileInfoCommand", o);
    }

    public void getMeasurementProfileResponseCommand(MatterClient client, Integer startTime, Integer status,
            Integer profileIntervalPeriod, Integer numberOfIntervalsDelivered, Integer attributeId, Integer intervals)
            throws Exception {
        final Integer _startTime = startTime;
        final Integer _status = status;
        final Integer _profileIntervalPeriod = profileIntervalPeriod;
        final Integer _numberOfIntervalsDelivered = numberOfIntervalsDelivered;
        final Integer _attributeId = attributeId;
        final Integer _intervals = intervals;
        Object o = new Object() {
            public Integer startTime = _startTime;
            public Integer status = _status;
            public Integer profileIntervalPeriod = _profileIntervalPeriod;
            public Integer numberOfIntervalsDelivered = _numberOfIntervalsDelivered;
            public Integer attributeId = _attributeId;
            public Integer intervals = _intervals;
        };
        sendCommand(client, "getMeasurementProfileResponseCommand", o);
    }

    public void getMeasurementProfileCommand(MatterClient client, Integer attributeId, Integer startTime,
            Integer numberOfIntervals) throws Exception {
        final Integer _attributeId = attributeId;
        final Integer _startTime = startTime;
        final Integer _numberOfIntervals = numberOfIntervals;
        Object o = new Object() {
            public Integer attributeId = _attributeId;
            public Integer startTime = _startTime;
            public Integer numberOfIntervals = _numberOfIntervals;
        };
        sendCommand(client, "getMeasurementProfileCommand", o);
    }

    public String toString() {
        String str = "";
        str += "measurementType : " + measurementType + "\n";
        str += "dcVoltage : " + dcVoltage + "\n";
        str += "dcVoltageMin : " + dcVoltageMin + "\n";
        str += "dcVoltageMax : " + dcVoltageMax + "\n";
        str += "dcCurrent : " + dcCurrent + "\n";
        str += "dcCurrentMin : " + dcCurrentMin + "\n";
        str += "dcCurrentMax : " + dcCurrentMax + "\n";
        str += "dcPower : " + dcPower + "\n";
        str += "dcPowerMin : " + dcPowerMin + "\n";
        str += "dcPowerMax : " + dcPowerMax + "\n";
        str += "dcVoltageMultiplier : " + dcVoltageMultiplier + "\n";
        str += "dcVoltageDivisor : " + dcVoltageDivisor + "\n";
        str += "dcCurrentMultiplier : " + dcCurrentMultiplier + "\n";
        str += "dcCurrentDivisor : " + dcCurrentDivisor + "\n";
        str += "dcPowerMultiplier : " + dcPowerMultiplier + "\n";
        str += "dcPowerDivisor : " + dcPowerDivisor + "\n";
        str += "acFrequency : " + acFrequency + "\n";
        str += "acFrequencyMin : " + acFrequencyMin + "\n";
        str += "acFrequencyMax : " + acFrequencyMax + "\n";
        str += "neutralCurrent : " + neutralCurrent + "\n";
        str += "totalActivePower : " + totalActivePower + "\n";
        str += "totalReactivePower : " + totalReactivePower + "\n";
        str += "totalApparentPower : " + totalApparentPower + "\n";
        str += "measured1stHarmonicCurrent : " + measured1stHarmonicCurrent + "\n";
        str += "measured3rdHarmonicCurrent : " + measured3rdHarmonicCurrent + "\n";
        str += "measured5thHarmonicCurrent : " + measured5thHarmonicCurrent + "\n";
        str += "measured7thHarmonicCurrent : " + measured7thHarmonicCurrent + "\n";
        str += "measured9thHarmonicCurrent : " + measured9thHarmonicCurrent + "\n";
        str += "measured11thHarmonicCurrent : " + measured11thHarmonicCurrent + "\n";
        str += "measuredPhase1stHarmonicCurrent : " + measuredPhase1stHarmonicCurrent + "\n";
        str += "measuredPhase3rdHarmonicCurrent : " + measuredPhase3rdHarmonicCurrent + "\n";
        str += "measuredPhase5thHarmonicCurrent : " + measuredPhase5thHarmonicCurrent + "\n";
        str += "measuredPhase7thHarmonicCurrent : " + measuredPhase7thHarmonicCurrent + "\n";
        str += "measuredPhase9thHarmonicCurrent : " + measuredPhase9thHarmonicCurrent + "\n";
        str += "measuredPhase11thHarmonicCurrent : " + measuredPhase11thHarmonicCurrent + "\n";
        str += "acFrequencyMultiplier : " + acFrequencyMultiplier + "\n";
        str += "acFrequencyDivisor : " + acFrequencyDivisor + "\n";
        str += "powerMultiplier : " + powerMultiplier + "\n";
        str += "powerDivisor : " + powerDivisor + "\n";
        str += "harmonicCurrentMultiplier : " + harmonicCurrentMultiplier + "\n";
        str += "phaseHarmonicCurrentMultiplier : " + phaseHarmonicCurrentMultiplier + "\n";
        str += "instantaneousVoltage : " + instantaneousVoltage + "\n";
        str += "instantaneousLineCurrent : " + instantaneousLineCurrent + "\n";
        str += "instantaneousActiveCurrent : " + instantaneousActiveCurrent + "\n";
        str += "instantaneousReactiveCurrent : " + instantaneousReactiveCurrent + "\n";
        str += "instantaneousPower : " + instantaneousPower + "\n";
        str += "rmsVoltage : " + rmsVoltage + "\n";
        str += "rmsVoltageMin : " + rmsVoltageMin + "\n";
        str += "rmsVoltageMax : " + rmsVoltageMax + "\n";
        str += "rmsCurrent : " + rmsCurrent + "\n";
        str += "rmsCurrentMin : " + rmsCurrentMin + "\n";
        str += "rmsCurrentMax : " + rmsCurrentMax + "\n";
        str += "activePower : " + activePower + "\n";
        str += "activePowerMin : " + activePowerMin + "\n";
        str += "activePowerMax : " + activePowerMax + "\n";
        str += "reactivePower : " + reactivePower + "\n";
        str += "apparentPower : " + apparentPower + "\n";
        str += "powerFactor : " + powerFactor + "\n";
        str += "averageRmsVoltageMeasurementPeriod : " + averageRmsVoltageMeasurementPeriod + "\n";
        str += "averageRmsUnderVoltageCounter : " + averageRmsUnderVoltageCounter + "\n";
        str += "rmsExtremeOverVoltagePeriod : " + rmsExtremeOverVoltagePeriod + "\n";
        str += "rmsExtremeUnderVoltagePeriod : " + rmsExtremeUnderVoltagePeriod + "\n";
        str += "rmsVoltageSagPeriod : " + rmsVoltageSagPeriod + "\n";
        str += "rmsVoltageSwellPeriod : " + rmsVoltageSwellPeriod + "\n";
        str += "acVoltageMultiplier : " + acVoltageMultiplier + "\n";
        str += "acVoltageDivisor : " + acVoltageDivisor + "\n";
        str += "acCurrentMultiplier : " + acCurrentMultiplier + "\n";
        str += "acCurrentDivisor : " + acCurrentDivisor + "\n";
        str += "acPowerMultiplier : " + acPowerMultiplier + "\n";
        str += "acPowerDivisor : " + acPowerDivisor + "\n";
        str += "overloadAlarmsMask : " + overloadAlarmsMask + "\n";
        str += "voltageOverload : " + voltageOverload + "\n";
        str += "currentOverload : " + currentOverload + "\n";
        str += "acOverloadAlarmsMask : " + acOverloadAlarmsMask + "\n";
        str += "acVoltageOverload : " + acVoltageOverload + "\n";
        str += "acCurrentOverload : " + acCurrentOverload + "\n";
        str += "acActivePowerOverload : " + acActivePowerOverload + "\n";
        str += "acReactivePowerOverload : " + acReactivePowerOverload + "\n";
        str += "averageRmsOverVoltage : " + averageRmsOverVoltage + "\n";
        str += "averageRmsUnderVoltage : " + averageRmsUnderVoltage + "\n";
        str += "rmsExtremeOverVoltage : " + rmsExtremeOverVoltage + "\n";
        str += "rmsExtremeUnderVoltage : " + rmsExtremeUnderVoltage + "\n";
        str += "rmsVoltageSag : " + rmsVoltageSag + "\n";
        str += "rmsVoltageSwell : " + rmsVoltageSwell + "\n";
        str += "lineCurrentPhaseB : " + lineCurrentPhaseB + "\n";
        str += "activeCurrentPhaseB : " + activeCurrentPhaseB + "\n";
        str += "reactiveCurrentPhaseB : " + reactiveCurrentPhaseB + "\n";
        str += "rmsVoltagePhaseB : " + rmsVoltagePhaseB + "\n";
        str += "rmsVoltageMinPhaseB : " + rmsVoltageMinPhaseB + "\n";
        str += "rmsVoltageMaxPhaseB : " + rmsVoltageMaxPhaseB + "\n";
        str += "rmsCurrentPhaseB : " + rmsCurrentPhaseB + "\n";
        str += "rmsCurrentMinPhaseB : " + rmsCurrentMinPhaseB + "\n";
        str += "rmsCurrentMaxPhaseB : " + rmsCurrentMaxPhaseB + "\n";
        str += "activePowerPhaseB : " + activePowerPhaseB + "\n";
        str += "activePowerMinPhaseB : " + activePowerMinPhaseB + "\n";
        str += "activePowerMaxPhaseB : " + activePowerMaxPhaseB + "\n";
        str += "reactivePowerPhaseB : " + reactivePowerPhaseB + "\n";
        str += "apparentPowerPhaseB : " + apparentPowerPhaseB + "\n";
        str += "powerFactorPhaseB : " + powerFactorPhaseB + "\n";
        str += "averageRmsVoltageMeasurementPeriodPhaseB : " + averageRmsVoltageMeasurementPeriodPhaseB + "\n";
        str += "averageRmsOverVoltageCounterPhaseB : " + averageRmsOverVoltageCounterPhaseB + "\n";
        str += "averageRmsUnderVoltageCounterPhaseB : " + averageRmsUnderVoltageCounterPhaseB + "\n";
        str += "rmsExtremeOverVoltagePeriodPhaseB : " + rmsExtremeOverVoltagePeriodPhaseB + "\n";
        str += "rmsExtremeUnderVoltagePeriodPhaseB : " + rmsExtremeUnderVoltagePeriodPhaseB + "\n";
        str += "rmsVoltageSagPeriodPhaseB : " + rmsVoltageSagPeriodPhaseB + "\n";
        str += "rmsVoltageSwellPeriodPhaseB : " + rmsVoltageSwellPeriodPhaseB + "\n";
        str += "lineCurrentPhaseC : " + lineCurrentPhaseC + "\n";
        str += "activeCurrentPhaseC : " + activeCurrentPhaseC + "\n";
        str += "reactiveCurrentPhaseC : " + reactiveCurrentPhaseC + "\n";
        str += "rmsVoltagePhaseC : " + rmsVoltagePhaseC + "\n";
        str += "rmsVoltageMinPhaseC : " + rmsVoltageMinPhaseC + "\n";
        str += "rmsVoltageMaxPhaseC : " + rmsVoltageMaxPhaseC + "\n";
        str += "rmsCurrentPhaseC : " + rmsCurrentPhaseC + "\n";
        str += "rmsCurrentMinPhaseC : " + rmsCurrentMinPhaseC + "\n";
        str += "rmsCurrentMaxPhaseC : " + rmsCurrentMaxPhaseC + "\n";
        str += "activePowerPhaseC : " + activePowerPhaseC + "\n";
        str += "activePowerMinPhaseC : " + activePowerMinPhaseC + "\n";
        str += "activePowerMaxPhaseC : " + activePowerMaxPhaseC + "\n";
        str += "reactivePowerPhaseC : " + reactivePowerPhaseC + "\n";
        str += "apparentPowerPhaseC : " + apparentPowerPhaseC + "\n";
        str += "powerFactorPhaseC : " + powerFactorPhaseC + "\n";
        str += "averageRmsVoltageMeasurementPeriodPhaseC : " + averageRmsVoltageMeasurementPeriodPhaseC + "\n";
        str += "averageRmsOverVoltageCounterPhaseC : " + averageRmsOverVoltageCounterPhaseC + "\n";
        str += "averageRmsUnderVoltageCounterPhaseC : " + averageRmsUnderVoltageCounterPhaseC + "\n";
        str += "rmsExtremeOverVoltagePeriodPhaseC : " + rmsExtremeOverVoltagePeriodPhaseC + "\n";
        str += "rmsExtremeUnderVoltagePeriodPhaseC : " + rmsExtremeUnderVoltagePeriodPhaseC + "\n";
        str += "rmsVoltageSagPeriodPhaseC : " + rmsVoltageSagPeriodPhaseC + "\n";
        str += "rmsVoltageSwellPeriodPhaseC : " + rmsVoltageSwellPeriodPhaseC + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
