/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.Map;
import java.util.List;

import org.openhab.binding.matter.internal.client.model.cluster.ClusterCommand;
import org.openhab.binding.matter.internal.client.model.cluster.gen.NetworkCommissioningClusterTypes.*;
/**
 * NetworkCommissioning
 *
 * @author Dan Cunningham - Initial contribution
 */
public class NetworkCommissioningClusterCommands {

    public static ClusterCommand scanNetworks(String ssid, Long breadcrumb) {
        return new ClusterCommand("scanNetworks", new ScanNetworksCommandOptions(ssid, breadcrumb));
    }

    public static ClusterCommand scanNetworksResponse(NetworkCommissioningStatusEnum networkingStatus, String debugText, WiFiInterfaceScanResultStruct[] wiFiScanResults, ThreadInterfaceScanResultStruct[] threadScanResults) {
        return new ClusterCommand("scanNetworksResponse", new ScanNetworksResponseCommandOptions(networkingStatus, debugText, wiFiScanResults, threadScanResults));
    }

    public static ClusterCommand addOrUpdateWiFiNetwork(String ssid, String credentials, Long breadcrumb, String networkIdentity, String clientIdentifier, String possessionNonce) {
        return new ClusterCommand("addOrUpdateWiFiNetwork", new AddOrUpdateWiFiNetworkCommandOptions(ssid, credentials, breadcrumb, networkIdentity, clientIdentifier, possessionNonce));
    }

    public static ClusterCommand addOrUpdateThreadNetwork(String operationalDataset, Long breadcrumb) {
        return new ClusterCommand("addOrUpdateThreadNetwork", new AddOrUpdateThreadNetworkCommandOptions(operationalDataset, breadcrumb));
    }

    public static ClusterCommand removeNetwork(String networkID, Long breadcrumb) {
        return new ClusterCommand("removeNetwork", new RemoveNetworkCommandOptions(networkID, breadcrumb));
    }

    public static ClusterCommand networkConfigResponse(NetworkCommissioningStatusEnum networkingStatus, String debugText, Integer networkIndex, String clientIdentity, String possessionSignature) {
        return new ClusterCommand("networkConfigResponse", new NetworkConfigResponseCommandOptions(networkingStatus, debugText, networkIndex, clientIdentity, possessionSignature));
    }

    public static ClusterCommand connectNetwork(String networkID, Long breadcrumb) {
        return new ClusterCommand("connectNetwork", new ConnectNetworkCommandOptions(networkID, breadcrumb));
    }

    public static ClusterCommand connectNetworkResponse(NetworkCommissioningStatusEnum networkingStatus, String debugText, Integer errorValue) {
        return new ClusterCommand("connectNetworkResponse", new ConnectNetworkResponseCommandOptions(networkingStatus, debugText, errorValue));
    }

    public static ClusterCommand reorderNetwork(String networkID, Integer networkIndex, Long breadcrumb) {
        return new ClusterCommand("reorderNetwork", new ReorderNetworkCommandOptions(networkID, networkIndex, breadcrumb));
    }

    public static ClusterCommand queryIdentity(String keyIdentifier, String possessionNonce) {
        return new ClusterCommand("queryIdentity", new QueryIdentityCommandOptions(keyIdentifier, possessionNonce));
    }

    public static ClusterCommand queryIdentityResponse(String identity, String possessionSignature) {
        return new ClusterCommand("queryIdentityResponse", new QueryIdentityResponseCommandOptions(identity, possessionSignature));
    }
}
