/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.Map;
import java.util.List;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;
import static java.util.Map.entry;  

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * FanControl
 *
 * @author Dan Cunningham - Initial contribution
 */
public class FanControlClusterTypes {

    public static final String CLUSTER_NAME = "FAN_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0202;

    //ZCL Enums
    public enum AirflowDirectionEnum {
        FORWARD(0, "Forward"),
        REVERSE(1, "Reverse"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private AirflowDirectionEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum FanModeEnum {
        OFF(0, "Off"),
        LOW(1, "Low"),
        MEDIUM(2, "Medium"),
        HIGH(3, "High"),
        ON(4, "On"),
        AUTO(5, "Auto"),
        SMART(6, "Smart"),
        UNKNOWN_VALUE(7,"UnknownValue");

        public final int value;
        public final String label;
        private FanModeEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum FanModeSequenceEnum {
        OFF_LOW_MED_HIGH(0, "Off/Low/Med/High"),
        OFF_LOW_HIGH(1, "Off/Low/High"),
        OFF_LOW_MED_HIGH_AUTO(2, "Off/Low/Med/High/Auto"),
        OFF_LOW_HIGH_AUTO(3, "Off/Low/High/Auto"),
        OFF_HIGH_AUTO(4, "Off/High/Auto"),
        OFF_HIGH(5, "Off/High"),
        UNKNOWN_VALUE(6,"UnknownValue");

        public final int value;
        public final String label;
        private FanModeSequenceEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum StepDirectionEnum {
        INCREASE(0, "Increase"),
        DECREASE(1, "Decrease"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private StepDirectionEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    //ZCL Bitmaps
    public static class Feature {
        public boolean multiSpeed;
        public boolean auto;
        public boolean rocking;
        public boolean wind;
        public boolean step;
        public boolean airflowDirection;
        public Feature(boolean multiSpeed, boolean auto, boolean rocking, boolean wind, boolean step, boolean airflowDirection){
            this.multiSpeed = multiSpeed;
            this.auto = auto;
            this.rocking = rocking;
            this.wind = wind;
            this.step = step;
            this.airflowDirection = airflowDirection;
        }
    }
    public static class RockBitmap {
        public boolean rockLeftRight;
        public boolean rockUpDown;
        public boolean rockRound;
        public RockBitmap(boolean rockLeftRight, boolean rockUpDown, boolean rockRound){
            this.rockLeftRight = rockLeftRight;
            this.rockUpDown = rockUpDown;
            this.rockRound = rockRound;
        }
    }
    public static class WindBitmap {
        public boolean sleepWind;
        public boolean naturalWind;
        public WindBitmap(boolean sleepWind, boolean naturalWind){
            this.sleepWind = sleepWind;
            this.naturalWind = naturalWind;
        }
    }

    public static class StepCommandOptions {
        public StepDirectionEnum direction;
        public Boolean wrap;
        public Boolean lowestOff;
        public  StepCommandOptions(StepDirectionEnum direction, Boolean wrap, Boolean lowestOff){
            this.direction = direction;
            this.wrap = wrap;
            this.lowestOff = lowestOff;
        }
    }
}
