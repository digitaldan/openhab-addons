/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * RvcOperationalState
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class RvcOperationalStateCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OPERATIONAL_STATE_RVC_CLUSTER";
    public static final int CLUSTER_ID = 0x0061;

    class ErrorStateStruct {
        public Integer errorStateID; // enum8
        public String errorStateLabel; // char_string
        public String errorStateDetails; // char_string

        public ErrorStateStruct(Integer errorStateID, String errorStateLabel, String errorStateDetails) {
            this.errorStateID = errorStateID;
            this.errorStateLabel = errorStateLabel;
            this.errorStateDetails = errorStateDetails;
        }
    }

    class OperationalStateStruct {
        public Integer operationalStateID; // enum8
        public String operationalStateLabel; // char_string

        public OperationalStateStruct(Integer operationalStateID, String operationalStateLabel) {
            this.operationalStateID = operationalStateID;
            this.operationalStateLabel = operationalStateLabel;
        }
    }

    // ZCL Enums
    public enum ErrorStateEnum {
        FAILEDTOFINDCHARGINGDOCK(64, "FailedToFindChargingDock"),
        STUCK(65, "Stuck"),
        DUSTBINMISSING(66, "DustBinMissing"),
        DUSTBINFULL(67, "DustBinFull"),
        WATERTANKEMPTY(68, "WaterTankEmpty"),
        WATERTANKMISSING(69, "WaterTankMissing"),
        WATERTANKLIDOPEN(70, "WaterTankLidOpen"),
        MOPCLEANINGPADMISSING(71, "MopCleaningPadMissing"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private ErrorStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum OperationalStateEnum {
        SEEKINGCHARGER(64, "SeekingCharger"),
        CHARGING(65, "Charging"),
        DOCKED(66, "Docked"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private OperationalStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public String phaseList; // 0 char_string reportable
    public Integer currentPhase; // 1 int8u reportable
    public Integer countdownTime; // 2 elapsed_s reportable
    public OperationalStateStruct[] operationalStateList; // 3 OperationalStateStruct reportable
    public Integer operationalState; // 4 enum8 reportable
    public ErrorStateStruct[] operationalError; // 5 ErrorStateStruct reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public RvcOperationalStateCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 48, "RvcOperationalState");
    }

    public void pause(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "pause", o);
    }

    public void stop(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "stop", o);
    }

    public void start(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "start", o);
    }

    public void resume(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "resume", o);
    }

    public void operationalCommandResponse(MatterClient client, ErrorStateStruct[] commandResponseState)
            throws Exception {
        final ErrorStateStruct[] _commandResponseState = commandResponseState;
        Object o = new Object() {
            public ErrorStateStruct[] commandResponseState = _commandResponseState;
        };
        sendCommand(client, "operationalCommandResponse", o);
    }

    public String toString() {
        String str = "";
        str += "phaseList : " + phaseList + "\n";
        str += "currentPhase : " + currentPhase + "\n";
        str += "countdownTime : " + countdownTime + "\n";
        str += "operationalStateList : " + operationalStateList + "\n";
        str += "operationalState : " + operationalState + "\n";
        str += "operationalError : " + operationalError + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
