/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * AdministratorCommissioning
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class AdministratorCommissioningCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "ADMINISTRATOR_COMMISSIONING_CLUSTER";
    public static final int CLUSTER_ID = 0x003C;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(15, "windowStatus"), entry(97, "adminFabricIndex"),
                entry(173, "adminVendorId"), entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"),
                entry(9, "eventList"), entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(7, "openCommissioningWindow"), entry(61, "openBasicCommissioningWindow"),
                entry(110, "revokeCommissioning"));
    }

    // ZCL Enums
    public enum CommissioningWindowStatusEnum implements JsonSerializable {
        WINDOWNOTOPEN(0, "WindowNotOpen"),
        ENHANCEDWINDOWOPEN(1, "EnhancedWindowOpen"),
        BASICWINDOWOPEN(2, "BasicWindowOpen"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private CommissioningWindowStatusEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum StatusCode implements JsonSerializable {
        BUSY(2, "Busy"),
        PAKEPARAMETERERROR(3, "PAKEParameterError"),
        WINDOWNOTOPEN(4, "WindowNotOpen"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private StatusCode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean basic;

        public Feature(boolean basic) {
            this.basic = basic;
        }

        public String toJson() {
            String out = "{";
            out += "\"basic\" : " + basic + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public CommissioningWindowStatusEnum windowStatus; // 15 CommissioningWindowStatusEnum
    public Integer adminFabricIndex; // 97 fabric_idx
    public Integer adminVendorId; // 173 vendor_id
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public AdministratorCommissioningCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 3, "AdministratorCommissioning");
    }

    public void openCommissioningWindow(MatterClient client, Integer commissioningTimeout, String PAKEPasscodeVerifier,
            Integer discriminator, Integer iterations, String salt) throws Exception {
        final Integer _commissioningTimeout = commissioningTimeout;
        final String _PAKEPasscodeVerifier = PAKEPasscodeVerifier;
        final Integer _discriminator = discriminator;
        final Integer _iterations = iterations;
        final String _salt = salt;
        Object o = new Object() {
            public Integer commissioningTimeout = _commissioningTimeout;
            public String PAKEPasscodeVerifier = _PAKEPasscodeVerifier;
            public Integer discriminator = _discriminator;
            public Integer iterations = _iterations;
            public String salt = _salt;
        };
        sendCommand(client, "openCommissioningWindow", o);
    }

    public void openBasicCommissioningWindow(MatterClient client, Integer commissioningTimeout) throws Exception {
        final Integer _commissioningTimeout = commissioningTimeout;
        Object o = new Object() {
            public Integer commissioningTimeout = _commissioningTimeout;
        };
        sendCommand(client, "openBasicCommissioningWindow", o);
    }

    public void revokeCommissioning(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "revokeCommissioning", o);
    }

    public String toString() {
        String str = "";
        str += "windowStatus : " + windowStatus + "\n";
        str += "adminFabricIndex : " + adminFabricIndex + "\n";
        str += "adminVendorId : " + adminVendorId + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
