/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * WindowCovering
 *
 * @author Dan Cunningham - Initial contribution
 */
public class WindowCoveringClusterTypes {

    public static final String CLUSTER_NAME = "WINDOW_COVERING_CLUSTER";
    public static final int CLUSTER_ID = 0x0102;

    // ZCL Enums
    public enum EndProductType {
        ROLLERSHADE(0, "RollerShade"),
        ROMANSHADE(1, "RomanShade"),
        BALLOONSHADE(2, "BalloonShade"),
        WOVENWOOD(3, "WovenWood"),
        PLEATEDSHADE(4, "PleatedShade"),
        CELLULARSHADE(5, "CellularShade"),
        LAYEREDSHADE(6, "LayeredShade"),
        LAYEREDSHADE2D(7, "LayeredShade2D"),
        SHEERSHADE(8, "SheerShade"),
        TILTONLYINTERIORBLIND(9, "TiltOnlyInteriorBlind"),
        INTERIORBLIND(10, "InteriorBlind"),
        VERTICALBLINDSTRIPCURTAIN(11, "VerticalBlindStripCurtain"),
        INTERIORVENETIANBLIND(12, "InteriorVenetianBlind"),
        EXTERIORVENETIANBLIND(13, "ExteriorVenetianBlind"),
        LATERALLEFTCURTAIN(14, "LateralLeftCurtain"),
        LATERALRIGHTCURTAIN(15, "LateralRightCurtain"),
        CENTRALCURTAIN(16, "CentralCurtain"),
        ROLLERSHUTTER(17, "RollerShutter"),
        EXTERIORVERTICALSCREEN(18, "ExteriorVerticalScreen"),
        AWNINGTERRACEPATIO(19, "AwningTerracePatio"),
        AWNINGVERTICALSCREEN(20, "AwningVerticalScreen"),
        TILTONLYPERGOLA(21, "TiltOnlyPergola"),
        SWINGINGSHUTTER(22, "SwingingShutter"),
        SLIDINGSHUTTER(23, "SlidingShutter"),
        UNKNOWN(255, "Unknown"),
        UNKNOWN_VALUE(24, "UnknownValue");

        public final int value;
        public final String label;

        private EndProductType(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum Type {
        ROLLERSHADE(0, "RollerShade"),
        ROLLERSHADE2MOTOR(1, "RollerShade2Motor"),
        ROLLERSHADEEXTERIOR(2, "RollerShadeExterior"),
        ROLLERSHADEEXTERIOR2MOTOR(3, "RollerShadeExterior2Motor"),
        DRAPERY(4, "Drapery"),
        AWNING(5, "Awning"),
        SHUTTER(6, "Shutter"),
        TILTBLINDTILTONLY(7, "TiltBlindTiltOnly"),
        TILTBLINDLIFTANDTILT(8, "TiltBlindLiftAndTilt"),
        PROJECTORSCREEN(9, "ProjectorScreen"),
        UNKNOWN(255, "Unknown"),
        UNKNOWN_VALUE(10, "UnknownValue");

        public final int value;
        public final String label;

        private Type(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class ConfigStatus {
        public boolean operational;
        public boolean onlineReserved;
        public boolean liftMovementReversed;
        public boolean liftPositionAware;
        public boolean tiltPositionAware;
        public boolean liftEncoderControlled;
        public boolean tiltEncoderControlled;

        public ConfigStatus(boolean operational, boolean onlineReserved, boolean liftMovementReversed,
                boolean liftPositionAware, boolean tiltPositionAware, boolean liftEncoderControlled,
                boolean tiltEncoderControlled) {
            this.operational = operational;
            this.onlineReserved = onlineReserved;
            this.liftMovementReversed = liftMovementReversed;
            this.liftPositionAware = liftPositionAware;
            this.tiltPositionAware = tiltPositionAware;
            this.liftEncoderControlled = liftEncoderControlled;
            this.tiltEncoderControlled = tiltEncoderControlled;
        }
    }

    public static class Feature {
        public boolean lift;
        public boolean tilt;
        public boolean positionAwareLift;
        public boolean absolutePosition;
        public boolean positionAwareTilt;

        public Feature(boolean lift, boolean tilt, boolean positionAwareLift, boolean absolutePosition,
                boolean positionAwareTilt) {
            this.lift = lift;
            this.tilt = tilt;
            this.positionAwareLift = positionAwareLift;
            this.absolutePosition = absolutePosition;
            this.positionAwareTilt = positionAwareTilt;
        }
    }

    public static class Mode {
        public boolean motorDirectionReversed;
        public boolean calibrationMode;
        public boolean maintenanceMode;
        public boolean ledFeedback;

        public Mode(boolean motorDirectionReversed, boolean calibrationMode, boolean maintenanceMode,
                boolean ledFeedback) {
            this.motorDirectionReversed = motorDirectionReversed;
            this.calibrationMode = calibrationMode;
            this.maintenanceMode = maintenanceMode;
            this.ledFeedback = ledFeedback;
        }
    }

    public static class OperationalStatus {
        public boolean global;
        public boolean lift;
        public boolean tilt;

        public OperationalStatus(boolean global, boolean lift, boolean tilt) {
            this.global = global;
            this.lift = lift;
            this.tilt = tilt;
        }
    }

    public static class SafetyStatus {
        public boolean remoteLockout;
        public boolean tamperDetection;
        public boolean failedCommunication;
        public boolean positionFailure;
        public boolean thermalProtection;
        public boolean obstacleDetected;
        public boolean power;
        public boolean stopInput;
        public boolean motorJammed;
        public boolean hardwareFailure;
        public boolean manualOperation;
        public boolean protection;

        public SafetyStatus(boolean remoteLockout, boolean tamperDetection, boolean failedCommunication,
                boolean positionFailure, boolean thermalProtection, boolean obstacleDetected, boolean power,
                boolean stopInput, boolean motorJammed, boolean hardwareFailure, boolean manualOperation,
                boolean protection) {
            this.remoteLockout = remoteLockout;
            this.tamperDetection = tamperDetection;
            this.failedCommunication = failedCommunication;
            this.positionFailure = positionFailure;
            this.thermalProtection = thermalProtection;
            this.obstacleDetected = obstacleDetected;
            this.power = power;
            this.stopInput = stopInput;
            this.motorJammed = motorJammed;
            this.hardwareFailure = hardwareFailure;
            this.manualOperation = manualOperation;
            this.protection = protection;
        }
    }

    public static class UpOrOpenCommandOptions {
        public UpOrOpenCommandOptions() {
        }
    }

    public static class DownOrCloseCommandOptions {
        public DownOrCloseCommandOptions() {
        }
    }

    public static class StopMotionCommandOptions {
        public StopMotionCommandOptions() {
        }
    }

    public static class GoToLiftValueCommandOptions {
        public Integer liftValue;

        public GoToLiftValueCommandOptions(Integer liftValue) {
            this.liftValue = liftValue;
        }
    }

    public static class GoToLiftPercentageCommandOptions {
        public Integer liftPercent100thsValue;

        public GoToLiftPercentageCommandOptions(Integer liftPercent100thsValue) {
            this.liftPercent100thsValue = liftPercent100thsValue;
        }
    }

    public static class GoToTiltValueCommandOptions {
        public Integer tiltValue;

        public GoToTiltValueCommandOptions(Integer tiltValue) {
            this.tiltValue = tiltValue;
        }
    }

    public static class GoToTiltPercentageCommandOptions {
        public Integer tiltPercent100thsValue;

        public GoToTiltPercentageCommandOptions(Integer tiltPercent100thsValue) {
            this.tiltPercent100thsValue = tiltPercent100thsValue;
        }
    }
}
