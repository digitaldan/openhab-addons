/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.model.cluster.BaseCluster;
import org.openhab.binding.matter.internal.client.model.cluster.gen.ColorControlClusterTypes.*;

/**
 * ColorControl
 *
 * @author Dan Cunningham - Initial contribution
 */
public class ColorControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "ColorControl";
    public static final int CLUSTER_ID = 0x0300;

    public Integer currentHue; // 0 int8u reportable
    public Integer currentSaturation; // 1 int8u reportable
    public Integer remainingTime; // 2 int16u reportable
    public Integer currentX; // 3 int16u reportable
    public Integer currentY; // 4 int16u reportable
    public Integer driftCompensation; // 5 enum8 reportable
    public String compensationText; // 6 char_string reportable
    public Integer colorTemperatureMireds; // 7 int16u reportable
    public Integer colorMode; // 8 enum8 reportable
    public Map<String, Boolean> options; // 15 bitmap8 reportable writable
    public Integer numberOfPrimaries; // 16 int8u reportable
    public Integer primary1X; // 17 int16u reportable
    public Integer primary1Y; // 18 int16u reportable
    public Integer primary1Intensity; // 19 int8u reportable
    public Integer primary2X; // 21 int16u reportable
    public Integer primary2Y; // 22 int16u reportable
    public Integer primary2Intensity; // 23 int8u reportable
    public Integer primary3X; // 25 int16u reportable
    public Integer primary3Y; // 26 int16u reportable
    public Integer primary3Intensity; // 27 int8u reportable
    public Integer primary4X; // 32 int16u reportable
    public Integer primary4Y; // 33 int16u reportable
    public Integer primary4Intensity; // 34 int8u reportable
    public Integer primary5X; // 36 int16u reportable
    public Integer primary5Y; // 37 int16u reportable
    public Integer primary5Intensity; // 38 int8u reportable
    public Integer primary6X; // 40 int16u reportable
    public Integer primary6Y; // 41 int16u reportable
    public Integer primary6Intensity; // 42 int8u reportable
    public Integer whitePointX; // 48 int16u reportable writable
    public Integer whitePointY; // 49 int16u reportable writable
    public Integer colorPointRX; // 50 int16u reportable writable
    public Integer colorPointRY; // 51 int16u reportable writable
    public Integer colorPointRIntensity; // 52 int8u reportable writable
    public Integer colorPointGX; // 54 int16u reportable writable
    public Integer colorPointGY; // 55 int16u reportable writable
    public Integer colorPointGIntensity; // 56 int8u reportable writable
    public Integer colorPointBX; // 58 int16u reportable writable
    public Integer colorPointBY; // 59 int16u reportable writable
    public Integer colorPointBIntensity; // 60 int8u reportable writable
    public Integer enhancedCurrentHue; // 16384 int16u reportable
    public Integer enhancedColorMode; // 16385 enum8 reportable
    public Integer colorLoopActive; // 16386 int8u reportable
    public Integer colorLoopDirection; // 16387 int8u reportable
    public Integer colorLoopTime; // 16388 int16u reportable
    public Integer colorLoopStartEnhancedHue; // 16389 int16u reportable
    public Integer colorLoopStoredEnhancedHue; // 16390 int16u reportable
    public Map<String, Boolean> colorCapabilities; // 16394 bitmap16 reportable
    public Integer colorTempPhysicalMinMireds; // 16395 int16u reportable
    public Integer colorTempPhysicalMaxMireds; // 16396 int16u reportable
    public Integer coupleColorTempToLevelMinMireds; // 16397 int16u reportable
    public Integer startUpColorTemperatureMireds; // 16400 int16u reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ColorControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 1, "ColorControl");
    }

    public String toString() {
        String str = "";
        str += "currentHue : " + currentHue + "\n";
        str += "currentSaturation : " + currentSaturation + "\n";
        str += "remainingTime : " + remainingTime + "\n";
        str += "currentX : " + currentX + "\n";
        str += "currentY : " + currentY + "\n";
        str += "driftCompensation : " + driftCompensation + "\n";
        str += "compensationText : " + compensationText + "\n";
        str += "colorTemperatureMireds : " + colorTemperatureMireds + "\n";
        str += "colorMode : " + colorMode + "\n";
        str += "options : " + options + "\n";
        str += "numberOfPrimaries : " + numberOfPrimaries + "\n";
        str += "primary1X : " + primary1X + "\n";
        str += "primary1Y : " + primary1Y + "\n";
        str += "primary1Intensity : " + primary1Intensity + "\n";
        str += "primary2X : " + primary2X + "\n";
        str += "primary2Y : " + primary2Y + "\n";
        str += "primary2Intensity : " + primary2Intensity + "\n";
        str += "primary3X : " + primary3X + "\n";
        str += "primary3Y : " + primary3Y + "\n";
        str += "primary3Intensity : " + primary3Intensity + "\n";
        str += "primary4X : " + primary4X + "\n";
        str += "primary4Y : " + primary4Y + "\n";
        str += "primary4Intensity : " + primary4Intensity + "\n";
        str += "primary5X : " + primary5X + "\n";
        str += "primary5Y : " + primary5Y + "\n";
        str += "primary5Intensity : " + primary5Intensity + "\n";
        str += "primary6X : " + primary6X + "\n";
        str += "primary6Y : " + primary6Y + "\n";
        str += "primary6Intensity : " + primary6Intensity + "\n";
        str += "whitePointX : " + whitePointX + "\n";
        str += "whitePointY : " + whitePointY + "\n";
        str += "colorPointRX : " + colorPointRX + "\n";
        str += "colorPointRY : " + colorPointRY + "\n";
        str += "colorPointRIntensity : " + colorPointRIntensity + "\n";
        str += "colorPointGX : " + colorPointGX + "\n";
        str += "colorPointGY : " + colorPointGY + "\n";
        str += "colorPointGIntensity : " + colorPointGIntensity + "\n";
        str += "colorPointBX : " + colorPointBX + "\n";
        str += "colorPointBY : " + colorPointBY + "\n";
        str += "colorPointBIntensity : " + colorPointBIntensity + "\n";
        str += "enhancedCurrentHue : " + enhancedCurrentHue + "\n";
        str += "enhancedColorMode : " + enhancedColorMode + "\n";
        str += "colorLoopActive : " + colorLoopActive + "\n";
        str += "colorLoopDirection : " + colorLoopDirection + "\n";
        str += "colorLoopTime : " + colorLoopTime + "\n";
        str += "colorLoopStartEnhancedHue : " + colorLoopStartEnhancedHue + "\n";
        str += "colorLoopStoredEnhancedHue : " + colorLoopStoredEnhancedHue + "\n";
        str += "colorCapabilities : " + colorCapabilities + "\n";
        str += "colorTempPhysicalMinMireds : " + colorTempPhysicalMinMireds + "\n";
        str += "colorTempPhysicalMaxMireds : " + colorTempPhysicalMaxMireds + "\n";
        str += "coupleColorTempToLevelMinMireds : " + coupleColorTempToLevelMinMireds + "\n";
        str += "startUpColorTemperatureMireds : " + startUpColorTemperatureMireds + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
