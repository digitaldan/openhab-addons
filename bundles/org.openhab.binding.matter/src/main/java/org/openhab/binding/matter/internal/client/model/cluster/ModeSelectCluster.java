/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * ModeSelect
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ModeSelectCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "MODE_SELECT_CLUSTER";
    public static final int CLUSTER_ID = 0x0050;

    class SemanticTagStruct {
        public Integer mfgCode; // vendor_id
        public Integer value; // enum16

        public SemanticTagStruct(Integer mfgCode, Integer value) {
            this.mfgCode = mfgCode;
            this.value = value;
        }
    }

    class ModeOptionStruct {
        public String label; // char_string
        public Integer mode; // int8u
        public SemanticTagStruct[] semanticTags; // SemanticTagStruct

        public ModeOptionStruct(String label, Integer mode, SemanticTagStruct[] semanticTags) {
            this.label = label;
            this.mode = mode;
            this.semanticTags = semanticTags;
        }
    }

    // ZCL Bitmaps
    public static class Feature {
        public boolean onOff;

        public Feature(boolean onOff) {
            this.onOff = onOff;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public String description; // 0 char_string reportable
    public Integer standardNamespace; // 1 enum16 reportable
    public ModeOptionStruct[] supportedModes; // 2 ModeOptionStruct reportable
    public Integer currentMode; // 3 int8u reportable
    public Integer startUpMode; // 4 int8u reportable writable
    public Integer onMode; // 5 int8u reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ModeSelectCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 49, "ModeSelect");
    }

    public void changeToMode(MatterClient client, Integer newMode) throws Exception {
        final Integer _newMode = newMode;
        Object o = new Object() {
            public Integer newMode = _newMode;
        };
        sendCommand(client, "changeToMode", o);
    }

    public String toString() {
        String str = "";
        str += "description : " + description + "\n";
        str += "standardNamespace : " + standardNamespace + "\n";
        str += "supportedModes : " + supportedModes + "\n";
        str += "currentMode : " + currentMode + "\n";
        str += "startUpMode : " + startUpMode + "\n";
        str += "onMode : " + onMode + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
