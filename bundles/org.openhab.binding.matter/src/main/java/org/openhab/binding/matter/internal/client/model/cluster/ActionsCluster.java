/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * Actions
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ActionsCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "ACTIONS_CLUSTER";
    public static final int CLUSTER_ID = 0x0025;

    class ActionStruct {
        public Integer actionID; // int16u
        public String name; // char_string
        public ActionTypeEnum type; // ActionTypeEnum
        public Integer endpointListID; // int16u
        public CommandBits supportedCommands; // CommandBits
        public ActionStateEnum state; // ActionStateEnum

        public ActionStruct(Integer actionID, String name, ActionTypeEnum type, Integer endpointListID,
                CommandBits supportedCommands, ActionStateEnum state) {
            this.actionID = actionID;
            this.name = name;
            this.type = type;
            this.endpointListID = endpointListID;
            this.supportedCommands = supportedCommands;
            this.state = state;
        }
    }

    class EndpointListStruct {
        public Integer endpointListID; // int16u
        public String name; // char_string
        public EndpointListTypeEnum type; // EndpointListTypeEnum
        public List<Integer> endpoints; // endpoint_no

        public EndpointListStruct(Integer endpointListID, String name, EndpointListTypeEnum type,
                List<Integer> endpoints) {
            this.endpointListID = endpointListID;
            this.name = name;
            this.type = type;
            this.endpoints = endpoints;
        }
    }

    // ZCL Enums
    public enum ActionErrorEnum {
        UNKNOWN(0, "Unknown"),
        INTERRUPTED(1, "Interrupted"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private ActionErrorEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum ActionStateEnum {
        INACTIVE(0, "Inactive"),
        ACTIVE(1, "Active"),
        PAUSED(2, "Paused"),
        DISABLED(3, "Disabled"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private ActionStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum ActionTypeEnum {
        OTHER(0, "Other"),
        SCENE(1, "Scene"),
        SEQUENCE(2, "Sequence"),
        AUTOMATION(3, "Automation"),
        EXCEPTION(4, "Exception"),
        NOTIFICATION(5, "Notification"),
        ALARM(6, "Alarm"),
        UNKNOWN_VALUE(7, "UnknownValue");

        public final int value;
        public final String label;

        private ActionTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum EndpointListTypeEnum {
        OTHER(0, "Other"),
        ROOM(1, "Room"),
        ZONE(2, "Zone"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private EndpointListTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class CommandBits {
        public boolean instantAction;
        public boolean instantActionWithTransition;
        public boolean startAction;
        public boolean startActionWithDuration;
        public boolean stopAction;
        public boolean pauseAction;
        public boolean pauseActionWithDuration;
        public boolean resumeAction;
        public boolean enableAction;
        public boolean enableActionWithDuration;
        public boolean disableAction;
        public boolean disableActionWithDuration;

        public CommandBits(boolean instantAction, boolean instantActionWithTransition, boolean startAction,
                boolean startActionWithDuration, boolean stopAction, boolean pauseAction,
                boolean pauseActionWithDuration, boolean resumeAction, boolean enableAction,
                boolean enableActionWithDuration, boolean disableAction, boolean disableActionWithDuration) {
            this.instantAction = instantAction;
            this.instantActionWithTransition = instantActionWithTransition;
            this.startAction = startAction;
            this.startActionWithDuration = startActionWithDuration;
            this.stopAction = stopAction;
            this.pauseAction = pauseAction;
            this.pauseActionWithDuration = pauseActionWithDuration;
            this.resumeAction = resumeAction;
            this.enableAction = enableAction;
            this.enableActionWithDuration = enableActionWithDuration;
            this.disableAction = disableAction;
            this.disableActionWithDuration = disableActionWithDuration;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static CommandBits fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new CommandBits(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5], keys[6], keys[7], keys[8],
                    keys[9], keys[10], keys[11]);
        }
    }

    public ActionStruct[] actionList; // 0 ActionStruct reportable
    public EndpointListStruct[] endpointLists; // 1 EndpointListStruct reportable
    public String setupURL; // 2 long_char_string reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ActionsCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 8, "Actions");
    }

    public void instantAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "instantAction", o);
    }

    public void instantActionWithTransition(MatterClient client, Integer actionID, Integer invokeID,
            Integer transitionTime) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        final Integer _transitionTime = transitionTime;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
            public Integer transitionTime = _transitionTime;
        };
        sendCommand(client, "instantActionWithTransition", o);
    }

    public void startAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "startAction", o);
    }

    public void startActionWithDuration(MatterClient client, Integer actionID, Integer invokeID, Integer duration)
            throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        final Integer _duration = duration;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
            public Integer duration = _duration;
        };
        sendCommand(client, "startActionWithDuration", o);
    }

    public void stopAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "stopAction", o);
    }

    public void pauseAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "pauseAction", o);
    }

    public void pauseActionWithDuration(MatterClient client, Integer actionID, Integer invokeID, Integer duration)
            throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        final Integer _duration = duration;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
            public Integer duration = _duration;
        };
        sendCommand(client, "pauseActionWithDuration", o);
    }

    public void resumeAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "resumeAction", o);
    }

    public void enableAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "enableAction", o);
    }

    public void enableActionWithDuration(MatterClient client, Integer actionID, Integer invokeID, Integer duration)
            throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        final Integer _duration = duration;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
            public Integer duration = _duration;
        };
        sendCommand(client, "enableActionWithDuration", o);
    }

    public void disableAction(MatterClient client, Integer actionID, Integer invokeID) throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
        };
        sendCommand(client, "disableAction", o);
    }

    public void disableActionWithDuration(MatterClient client, Integer actionID, Integer invokeID, Integer duration)
            throws Exception {
        final Integer _actionID = actionID;
        final Integer _invokeID = invokeID;
        final Integer _duration = duration;
        Object o = new Object() {
            public Integer actionID = _actionID;
            public Integer invokeID = _invokeID;
            public Integer duration = _duration;
        };
        sendCommand(client, "disableActionWithDuration", o);
    }

    public String toString() {
        String str = "";
        str += "actionList : " + actionList + "\n";
        str += "endpointLists : " + endpointLists + "\n";
        str += "setupURL : " + setupURL + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
