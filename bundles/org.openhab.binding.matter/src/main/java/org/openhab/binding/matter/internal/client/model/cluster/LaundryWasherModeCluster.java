/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * LaundryWasherMode
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class LaundryWasherModeCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "LAUNDRY_WASHER_MODE_CLUSTER";
    public static final int CLUSTER_ID = 0x0051;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(43, "supportedModes"), entry(120, "currentMode"),
                entry(194, "startUpMode"), entry(257, "onMode"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(26, "changeToMode"), entry(79, "changeToModeResponse"));
    }

    class ModeTagStruct implements JsonSerializable {
        public Integer mfgCode; // vendor_id
        public Integer value; // enum16

        public ModeTagStruct(Integer mfgCode, Integer value) {
            this.mfgCode = mfgCode;
            this.value = value;
        }

        public String toJson() {
            String out = "{";
            out += "\"mfgCode\" : " + mfgCode + ",";
            out += "\"value\" : " + value + "";
            out += "}";
            return out;
        }
    }

    class ModeOptionStruct implements JsonSerializable {
        public String label; // char_string
        public Integer mode; // int8u
        public ModeTagStruct[] modeTags; // ModeTagStruct

        public ModeOptionStruct(String label, Integer mode, ModeTagStruct[] modeTags) {
            this.label = label;
            this.mode = mode;
            this.modeTags = modeTags;
        }

        public String toJson() {
            String out = "{";
            out += "\"label\" : " + label + ",";
            out += "\"mode\" : " + mode + ",";
            out += "\"modeTags\" : " + modeTags + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum ModeTag implements JsonSerializable {
        NORMAL(16384, "Normal"),
        DELICATE(16385, "Delicate"),
        HEAVY(16386, "Heavy"),
        WHITES(16387, "Whites"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private ModeTag(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean onOff;

        public Feature(boolean onOff) {
            this.onOff = onOff;
        }

        public String toJson() {
            String out = "{";
            out += "\"onOff\" : " + onOff + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public ModeOptionStruct[] supportedModes; // 43 ModeOptionStruct
    public Integer currentMode; // 120 int8u
    public Integer startUpMode; // 194 int8u
    public Integer onMode; // 257 int8u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public LaundryWasherModeCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 34, "LaundryWasherMode");
    }

    public void changeToMode(MatterClient client, Integer newMode) throws Exception {
        final Integer _newMode = newMode;
        Object o = new Object() {
            public Integer newMode = _newMode;
        };
        sendCommand(client, "changeToMode", o);
    }

    public void changeToModeResponse(MatterClient client, Integer status, String statusText) throws Exception {
        final Integer _status = status;
        final String _statusText = statusText;
        Object o = new Object() {
            public Integer status = _status;
            public String statusText = _statusText;
        };
        sendCommand(client, "changeToModeResponse", o);
    }

    public String toString() {
        String str = "";
        str += "supportedModes : " + supportedModes + "\n";
        str += "currentMode : " + currentMode + "\n";
        str += "startUpMode : " + startUpMode + "\n";
        str += "onMode : " + onMode + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
