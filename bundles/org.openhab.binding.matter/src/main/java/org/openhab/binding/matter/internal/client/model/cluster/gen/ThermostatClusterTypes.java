/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.Map;
import java.util.List;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;
import static java.util.Map.entry;  

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * Thermostat
 *
 * @author Dan Cunningham - Initial contribution
 */
public class ThermostatClusterTypes {

    public static final String CLUSTER_NAME = "THERMOSTAT_CLUSTER";
    public static final int CLUSTER_ID = 0x0201;

     public class ThermostatScheduleTransition {
        public Integer transitionTime; // int16u
        public Integer heatSetpoint; // int16s
        public Integer coolSetpoint; // int16s
        public ThermostatScheduleTransition(Integer transitionTime, Integer heatSetpoint, Integer coolSetpoint) {
            this.transitionTime = transitionTime;
            this.heatSetpoint = heatSetpoint;
            this.coolSetpoint = coolSetpoint;
        }
     }
    //ZCL Enums
    public enum SetpointAdjustMode {
        HEAT(0, "Heat"),
        COOL(1, "Cool"),
        BOTH(2, "Both"),
        UNKNOWN_VALUE(3,"UnknownValue");

        public final int value;
        public final String label;
        private SetpointAdjustMode(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum ThermostatControlSequence {
        COOLINGONLY(0, "CoolingOnly"),
        COOLINGWITHREHEAT(1, "CoolingWithReheat"),
        HEATINGONLY(2, "HeatingOnly"),
        HEATINGWITHREHEAT(3, "HeatingWithReheat"),
        COOLINGANDHEATING(4, "CoolingAndHeating"),
        COOLINGANDHEATINGWITHREHEAT(5, "CoolingAndHeatingWithReheat"),
        UNKNOWN_VALUE(6,"UnknownValue");

        public final int value;
        public final String label;
        private ThermostatControlSequence(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum ThermostatRunningMode {
        OFF(0, "Off"),
        COOL(3, "Cool"),
        HEAT(4, "Heat"),
        UNKNOWN_VALUE(1,"UnknownValue");

        public final int value;
        public final String label;
        private ThermostatRunningMode(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum ThermostatSystemMode {
        OFF(0, "Off"),
        AUTO(1, "Auto"),
        COOL(3, "Cool"),
        HEAT(4, "Heat"),
        EMERGENCYHEAT(5, "EmergencyHeat"),
        PRECOOLING(6, "Precooling"),
        FANONLY(7, "FanOnly"),
        DRY(8, "Dry"),
        SLEEP(9, "Sleep"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private ThermostatSystemMode(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    //ZCL Bitmaps
    public static class DayOfWeek {
        public boolean sunday;
        public boolean monday;
        public boolean tuesday;
        public boolean wednesday;
        public boolean thursday;
        public boolean friday;
        public boolean saturday;
        public boolean away;
        public DayOfWeek(boolean sunday, boolean monday, boolean tuesday, boolean wednesday, boolean thursday, boolean friday, boolean saturday, boolean away){
            this.sunday = sunday;
            this.monday = monday;
            this.tuesday = tuesday;
            this.wednesday = wednesday;
            this.thursday = thursday;
            this.friday = friday;
            this.saturday = saturday;
            this.away = away;
        }
    }
    public static class Feature {
        public boolean heating;
        public boolean cooling;
        public boolean occupancy;
        public boolean scheduleConfiguration;
        public boolean setback;
        public boolean autoMode;
        public boolean localTemperatureNotExposed;
        public Feature(boolean heating, boolean cooling, boolean occupancy, boolean scheduleConfiguration, boolean setback, boolean autoMode, boolean localTemperatureNotExposed){
            this.heating = heating;
            this.cooling = cooling;
            this.occupancy = occupancy;
            this.scheduleConfiguration = scheduleConfiguration;
            this.setback = setback;
            this.autoMode = autoMode;
            this.localTemperatureNotExposed = localTemperatureNotExposed;
        }
    }
    public static class ModeForSequence {
        public boolean heatSetpointPresent;
        public boolean coolSetpointPresent;
        public ModeForSequence(boolean heatSetpointPresent, boolean coolSetpointPresent){
            this.heatSetpointPresent = heatSetpointPresent;
            this.coolSetpointPresent = coolSetpointPresent;
        }
    }

    public static class SetpointRaiseLowerCommandOptions {
        public SetpointAdjustMode mode;
        public Integer amount;
        public  SetpointRaiseLowerCommandOptions(SetpointAdjustMode mode, Integer amount){
            this.mode = mode;
            this.amount = amount;
        }
    }
    public static class GetWeeklyScheduleResponseCommandOptions {
        public Integer numberOfTransitionsForSequence;
        public DayOfWeek dayOfWeekForSequence;
        public ModeForSequence modeForSequence;
        public ThermostatScheduleTransition transitions;
        public  GetWeeklyScheduleResponseCommandOptions(Integer numberOfTransitionsForSequence, DayOfWeek dayOfWeekForSequence, ModeForSequence modeForSequence, ThermostatScheduleTransition transitions){
            this.numberOfTransitionsForSequence = numberOfTransitionsForSequence;
            this.dayOfWeekForSequence = dayOfWeekForSequence;
            this.modeForSequence = modeForSequence;
            this.transitions = transitions;
        }
    }
    public static class SetWeeklyScheduleCommandOptions {
        public Integer numberOfTransitionsForSequence;
        public DayOfWeek dayOfWeekForSequence;
        public ModeForSequence modeForSequence;
        public ThermostatScheduleTransition transitions;
        public  SetWeeklyScheduleCommandOptions(Integer numberOfTransitionsForSequence, DayOfWeek dayOfWeekForSequence, ModeForSequence modeForSequence, ThermostatScheduleTransition transitions){
            this.numberOfTransitionsForSequence = numberOfTransitionsForSequence;
            this.dayOfWeekForSequence = dayOfWeekForSequence;
            this.modeForSequence = modeForSequence;
            this.transitions = transitions;
        }
    }
    public static class GetWeeklyScheduleCommandOptions {
        public DayOfWeek daysToReturn;
        public ModeForSequence modeToReturn;
        public  GetWeeklyScheduleCommandOptions(DayOfWeek daysToReturn, ModeForSequence modeToReturn){
            this.daysToReturn = daysToReturn;
            this.modeToReturn = modeToReturn;
        }
    }
    public static class ClearWeeklyScheduleCommandOptions {
        public  ClearWeeklyScheduleCommandOptions(){
        }
    }
}
