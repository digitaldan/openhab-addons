/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * GeneralCommissioning
 *
 * @author Dan Cunningham - Initial contribution
 */
public class GeneralCommissioningClusterTypes {

    public static final String CLUSTER_NAME = "GENERAL_COMMISSIONING_CLUSTER";
    public static final int CLUSTER_ID = 0x0030;

    public class BasicCommissioningInfo {
        public Integer failSafeExpiryLengthSeconds; // int16u
        public Integer maxCumulativeFailsafeSeconds; // int16u

        public BasicCommissioningInfo(Integer failSafeExpiryLengthSeconds, Integer maxCumulativeFailsafeSeconds) {
            this.failSafeExpiryLengthSeconds = failSafeExpiryLengthSeconds;
            this.maxCumulativeFailsafeSeconds = maxCumulativeFailsafeSeconds;
        }
    }

    // ZCL Enums
    public enum CommissioningErrorEnum {
        OK(0, "OK"),
        VALUEOUTSIDERANGE(1, "ValueOutsideRange"),
        INVALIDAUTHENTICATION(2, "InvalidAuthentication"),
        NOFAILSAFE(3, "NoFailSafe"),
        BUSYWITHOTHERADMIN(4, "BusyWithOtherAdmin"),
        UNKNOWN_VALUE(5, "UnknownValue");

        public final int value;
        public final String label;

        private CommissioningErrorEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum RegulatoryLocationTypeEnum {
        INDOOR(0, "Indoor"),
        OUTDOOR(1, "Outdoor"),
        INDOOROUTDOOR(2, "IndoorOutdoor"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private RegulatoryLocationTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public static class ArmFailSafeCommandOptions {
        public Integer expiryLengthSeconds;
        public Long breadcrumb;

        public ArmFailSafeCommandOptions(Integer expiryLengthSeconds, Long breadcrumb) {
            this.expiryLengthSeconds = expiryLengthSeconds;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class ArmFailSafeResponseCommandOptions {
        public CommissioningErrorEnum errorCode;
        public String debugText;

        public ArmFailSafeResponseCommandOptions(CommissioningErrorEnum errorCode, String debugText) {
            this.errorCode = errorCode;
            this.debugText = debugText;
        }
    }

    public static class SetRegulatoryConfigCommandOptions {
        public RegulatoryLocationTypeEnum newRegulatoryConfig;
        public String countryCode;
        public Long breadcrumb;

        public SetRegulatoryConfigCommandOptions(RegulatoryLocationTypeEnum newRegulatoryConfig, String countryCode,
                Long breadcrumb) {
            this.newRegulatoryConfig = newRegulatoryConfig;
            this.countryCode = countryCode;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class SetRegulatoryConfigResponseCommandOptions {
        public CommissioningErrorEnum errorCode;
        public String debugText;

        public SetRegulatoryConfigResponseCommandOptions(CommissioningErrorEnum errorCode, String debugText) {
            this.errorCode = errorCode;
            this.debugText = debugText;
        }
    }

    public static class CommissioningCompleteCommandOptions {
        public CommissioningCompleteCommandOptions() {
        }
    }

    public static class CommissioningCompleteResponseCommandOptions {
        public CommissioningErrorEnum errorCode;
        public String debugText;

        public CommissioningCompleteResponseCommandOptions(CommissioningErrorEnum errorCode, String debugText) {
            this.errorCode = errorCode;
            this.debugText = debugText;
        }
    }
}
