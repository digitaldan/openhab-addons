/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * PumpConfigurationAndControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class PumpConfigurationAndControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "PUMP_CONFIGURATION_AND_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0200;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(70, "maxPressure"), entry(158, "maxSpeed"), entry(228, "maxFlow"),
                entry(287, "minConstPressure"), entry(335, "maxConstPressure"), entry(374, "minCompPressure"),
                entry(407, "maxCompPressure"), entry(438, "minConstSpeed"), entry(465, "maxConstSpeed"),
                entry(489, "minConstFlow"), entry(511, "maxConstFlow"), entry(533, "minConstTemp"),
                entry(552, "maxConstTemp"), entry(570, "pumpStatus"), entry(583, "effectiveOperationMode"),
                entry(596, "effectiveControlMode"), entry(608, "capacity"), entry(620, "speed"),
                entry(632, "lifetimeRunningHours"), entry(644, "power"), entry(656, "lifetimeEnergyConsumed"),
                entry(668, "operationMode"), entry(680, "controlMode"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries();
    }

    // ZCL Enums
    public enum ControlModeEnum implements JsonSerializable {
        CONSTANTSPEED(0, "ConstantSpeed"),
        CONSTANTPRESSURE(1, "ConstantPressure"),
        PROPORTIONALPRESSURE(2, "ProportionalPressure"),
        CONSTANTFLOW(3, "ConstantFlow"),
        CONSTANTTEMPERATURE(5, "ConstantTemperature"),
        AUTOMATIC(7, "Automatic"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private ControlModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum OperationModeEnum implements JsonSerializable {
        NORMAL(0, "Normal"),
        MINIMUM(1, "Minimum"),
        MAXIMUM(2, "Maximum"),
        LOCAL(3, "Local"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private OperationModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean constantPressure;
        public boolean compensatedPressure;
        public boolean constantFlow;
        public boolean constantSpeed;
        public boolean constantTemperature;
        public boolean automatic;
        public boolean localOperation;

        public Feature(boolean constantPressure, boolean compensatedPressure, boolean constantFlow,
                boolean constantSpeed, boolean constantTemperature, boolean automatic, boolean localOperation) {
            this.constantPressure = constantPressure;
            this.compensatedPressure = compensatedPressure;
            this.constantFlow = constantFlow;
            this.constantSpeed = constantSpeed;
            this.constantTemperature = constantTemperature;
            this.automatic = automatic;
            this.localOperation = localOperation;
        }

        public String toJson() {
            String out = "{";
            out += "\"constantPressure\" : " + constantPressure + ",";
            out += "\"compensatedPressure\" : " + compensatedPressure + ",";
            out += "\"constantFlow\" : " + constantFlow + ",";
            out += "\"constantSpeed\" : " + constantSpeed + ",";
            out += "\"constantTemperature\" : " + constantTemperature + ",";
            out += "\"automatic\" : " + automatic + ",";
            out += "\"localOperation\" : " + localOperation + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5], keys[6]);
        }
    }

    public static class PumpStatusBitmap implements JsonSerializable {
        public boolean deviceFault;
        public boolean supplyFault;
        public boolean speedLow;
        public boolean speedHigh;
        public boolean localOverride;
        public boolean running;
        public boolean remotePressure;
        public boolean remoteFlow;
        public boolean remoteTemperature;

        public PumpStatusBitmap(boolean deviceFault, boolean supplyFault, boolean speedLow, boolean speedHigh,
                boolean localOverride, boolean running, boolean remotePressure, boolean remoteFlow,
                boolean remoteTemperature) {
            this.deviceFault = deviceFault;
            this.supplyFault = supplyFault;
            this.speedLow = speedLow;
            this.speedHigh = speedHigh;
            this.localOverride = localOverride;
            this.running = running;
            this.remotePressure = remotePressure;
            this.remoteFlow = remoteFlow;
            this.remoteTemperature = remoteTemperature;
        }

        public String toJson() {
            String out = "{";
            out += "\"deviceFault\" : " + deviceFault + ",";
            out += "\"supplyFault\" : " + supplyFault + ",";
            out += "\"speedLow\" : " + speedLow + ",";
            out += "\"speedHigh\" : " + speedHigh + ",";
            out += "\"localOverride\" : " + localOverride + ",";
            out += "\"running\" : " + running + ",";
            out += "\"remotePressure\" : " + remotePressure + ",";
            out += "\"remoteFlow\" : " + remoteFlow + ",";
            out += "\"remoteTemperature\" : " + remoteTemperature + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static PumpStatusBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new PumpStatusBitmap(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5], keys[6], keys[7],
                    keys[8]);
        }
    }

    public Integer maxPressure; // 70 int16s
    public Integer maxSpeed; // 158 int16u
    public Integer maxFlow; // 228 int16u
    public Integer minConstPressure; // 287 int16s
    public Integer maxConstPressure; // 335 int16s
    public Integer minCompPressure; // 374 int16s
    public Integer maxCompPressure; // 407 int16s
    public Integer minConstSpeed; // 438 int16u
    public Integer maxConstSpeed; // 465 int16u
    public Integer minConstFlow; // 489 int16u
    public Integer maxConstFlow; // 511 int16u
    public Integer minConstTemp; // 533 int16s
    public Integer maxConstTemp; // 552 int16s
    public PumpStatusBitmap pumpStatus; // 570 PumpStatusBitmap
    public OperationModeEnum effectiveOperationMode; // 583 OperationModeEnum
    public ControlModeEnum effectiveControlMode; // 596 ControlModeEnum
    public Integer capacity; // 608 int16s
    public Integer speed; // 620 int16u
    public Integer lifetimeRunningHours; // 632 int24u
    public Integer power; // 644 int24u
    public Integer lifetimeEnergyConsumed; // 656 int32u
    public OperationModeEnum operationMode; // 668 OperationModeEnum
    public ControlModeEnum controlMode; // 680 ControlModeEnum
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public PumpConfigurationAndControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 66, "PumpConfigurationAndControl");
    }

    public String toString() {
        String str = "";
        str += "maxPressure : " + maxPressure + "\n";
        str += "maxSpeed : " + maxSpeed + "\n";
        str += "maxFlow : " + maxFlow + "\n";
        str += "minConstPressure : " + minConstPressure + "\n";
        str += "maxConstPressure : " + maxConstPressure + "\n";
        str += "minCompPressure : " + minCompPressure + "\n";
        str += "maxCompPressure : " + maxCompPressure + "\n";
        str += "minConstSpeed : " + minConstSpeed + "\n";
        str += "maxConstSpeed : " + maxConstSpeed + "\n";
        str += "minConstFlow : " + minConstFlow + "\n";
        str += "maxConstFlow : " + maxConstFlow + "\n";
        str += "minConstTemp : " + minConstTemp + "\n";
        str += "maxConstTemp : " + maxConstTemp + "\n";
        str += "pumpStatus : " + pumpStatus + "\n";
        str += "effectiveOperationMode : " + effectiveOperationMode + "\n";
        str += "effectiveControlMode : " + effectiveControlMode + "\n";
        str += "capacity : " + capacity + "\n";
        str += "speed : " + speed + "\n";
        str += "lifetimeRunningHours : " + lifetimeRunningHours + "\n";
        str += "power : " + power + "\n";
        str += "lifetimeEnergyConsumed : " + lifetimeEnergyConsumed + "\n";
        str += "operationMode : " + operationMode + "\n";
        str += "controlMode : " + controlMode + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
