/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * ThreadNetworkDiagnostics
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ThreadNetworkDiagnosticsCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "THREAD_NETWORK_DIAGNOSTICS_CLUSTER";
    public static final int CLUSTER_ID = 0x0035;

    class NeighborTableStruct {
        public Long extAddress; // int64u
        public Integer age; // int32u
        public Integer rloc16; // int16u
        public Integer linkFrameCounter; // int32u
        public Integer mleFrameCounter; // int32u
        public Integer lqi; // int8u
        public Integer averageRssi; // int8s
        public Integer lastRssi; // int8s
        public Integer frameErrorRate; // int8u
        public Integer messageErrorRate; // int8u
        public Boolean rxOnWhenIdle; // boolean
        public Boolean fullThreadDevice; // boolean
        public Boolean fullNetworkData; // boolean
        public Boolean isChild; // boolean

        public NeighborTableStruct(Long extAddress, Integer age, Integer rloc16, Integer linkFrameCounter,
                Integer mleFrameCounter, Integer lqi, Integer averageRssi, Integer lastRssi, Integer frameErrorRate,
                Integer messageErrorRate, Boolean rxOnWhenIdle, Boolean fullThreadDevice, Boolean fullNetworkData,
                Boolean isChild) {
            this.extAddress = extAddress;
            this.age = age;
            this.rloc16 = rloc16;
            this.linkFrameCounter = linkFrameCounter;
            this.mleFrameCounter = mleFrameCounter;
            this.lqi = lqi;
            this.averageRssi = averageRssi;
            this.lastRssi = lastRssi;
            this.frameErrorRate = frameErrorRate;
            this.messageErrorRate = messageErrorRate;
            this.rxOnWhenIdle = rxOnWhenIdle;
            this.fullThreadDevice = fullThreadDevice;
            this.fullNetworkData = fullNetworkData;
            this.isChild = isChild;
        }
    }

    class OperationalDatasetComponents {
        public Boolean activeTimestampPresent; // boolean
        public Boolean pendingTimestampPresent; // boolean
        public Boolean masterKeyPresent; // boolean
        public Boolean networkNamePresent; // boolean
        public Boolean extendedPanIdPresent; // boolean
        public Boolean meshLocalPrefixPresent; // boolean
        public Boolean delayPresent; // boolean
        public Boolean panIdPresent; // boolean
        public Boolean channelPresent; // boolean
        public Boolean pskcPresent; // boolean
        public Boolean securityPolicyPresent; // boolean
        public Boolean channelMaskPresent; // boolean

        public OperationalDatasetComponents(Boolean activeTimestampPresent, Boolean pendingTimestampPresent,
                Boolean masterKeyPresent, Boolean networkNamePresent, Boolean extendedPanIdPresent,
                Boolean meshLocalPrefixPresent, Boolean delayPresent, Boolean panIdPresent, Boolean channelPresent,
                Boolean pskcPresent, Boolean securityPolicyPresent, Boolean channelMaskPresent) {
            this.activeTimestampPresent = activeTimestampPresent;
            this.pendingTimestampPresent = pendingTimestampPresent;
            this.masterKeyPresent = masterKeyPresent;
            this.networkNamePresent = networkNamePresent;
            this.extendedPanIdPresent = extendedPanIdPresent;
            this.meshLocalPrefixPresent = meshLocalPrefixPresent;
            this.delayPresent = delayPresent;
            this.panIdPresent = panIdPresent;
            this.channelPresent = channelPresent;
            this.pskcPresent = pskcPresent;
            this.securityPolicyPresent = securityPolicyPresent;
            this.channelMaskPresent = channelMaskPresent;
        }
    }

    class RouteTableStruct {
        public Long extAddress; // int64u
        public Integer rloc16; // int16u
        public Integer routerId; // int8u
        public Integer nextHop; // int8u
        public Integer pathCost; // int8u
        public Integer LQIIn; // int8u
        public Integer LQIOut; // int8u
        public Integer age; // int8u
        public Boolean allocated; // boolean
        public Boolean linkEstablished; // boolean

        public RouteTableStruct(Long extAddress, Integer rloc16, Integer routerId, Integer nextHop, Integer pathCost,
                Integer LQIIn, Integer LQIOut, Integer age, Boolean allocated, Boolean linkEstablished) {
            this.extAddress = extAddress;
            this.rloc16 = rloc16;
            this.routerId = routerId;
            this.nextHop = nextHop;
            this.pathCost = pathCost;
            this.LQIIn = LQIIn;
            this.LQIOut = LQIOut;
            this.age = age;
            this.allocated = allocated;
            this.linkEstablished = linkEstablished;
        }
    }

    class SecurityPolicy {
        public Integer rotationTime; // int16u
        public Integer flags; // int16u

        public SecurityPolicy(Integer rotationTime, Integer flags) {
            this.rotationTime = rotationTime;
            this.flags = flags;
        }
    }

    // ZCL Enums
    public enum ConnectionStatusEnum {
        CONNECTED(0, "Connected"),
        NOTCONNECTED(1, "NotConnected"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private ConnectionStatusEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum NetworkFaultEnum {
        UNSPECIFIED(0, "Unspecified"),
        LINKDOWN(1, "LinkDown"),
        HARDWAREFAILURE(2, "HardwareFailure"),
        NETWORKJAMMED(3, "NetworkJammed"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private NetworkFaultEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum RoutingRoleEnum {
        UNSPECIFIED(0, "Unspecified"),
        UNASSIGNED(1, "Unassigned"),
        SLEEPYENDDEVICE(2, "SleepyEndDevice"),
        ENDDEVICE(3, "EndDevice"),
        REED(4, "REED"),
        ROUTER(5, "Router"),
        LEADER(6, "Leader"),
        UNKNOWN_VALUE(7, "UnknownValue");

        public final int value;
        public final String label;

        private RoutingRoleEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class Feature {
        public boolean packetCounts;
        public boolean errorCounts;
        public boolean MLECounts;
        public boolean MACCounts;

        public Feature(boolean packetCounts, boolean errorCounts, boolean MLECounts, boolean MACCounts) {
            this.packetCounts = packetCounts;
            this.errorCounts = errorCounts;
            this.MLECounts = MLECounts;
            this.MACCounts = MACCounts;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3]);
        }
    }

    public Integer channel; // 0 int16u reportable
    public RoutingRoleEnum routingRole; // 1 RoutingRoleEnum reportable
    public String networkName; // 2 char_string reportable
    public Integer panId; // 3 int16u reportable
    public Long extendedPanId; // 4 int64u reportable
    public String meshLocalPrefix; // 5 octet_string reportable
    public Long overrunCount; // 6 int64u reportable
    public NeighborTableStruct[] neighborTable; // 7 NeighborTableStruct reportable
    public RouteTableStruct[] routeTable; // 8 RouteTableStruct reportable
    public Integer partitionId; // 9 int32u reportable
    public Integer weighting; // 10 int16u reportable
    public Integer dataVersion; // 11 int16u reportable
    public Integer stableDataVersion; // 12 int16u reportable
    public Integer leaderRouterId; // 13 int8u reportable
    public Integer detachedRoleCount; // 14 int16u reportable
    public Integer childRoleCount; // 15 int16u reportable
    public Integer routerRoleCount; // 16 int16u reportable
    public Integer leaderRoleCount; // 17 int16u reportable
    public Integer attachAttemptCount; // 18 int16u reportable
    public Integer partitionIdChangeCount; // 19 int16u reportable
    public Integer betterPartitionAttachAttemptCount; // 20 int16u reportable
    public Integer parentChangeCount; // 21 int16u reportable
    public Integer txTotalCount; // 22 int32u reportable
    public Integer txUnicastCount; // 23 int32u reportable
    public Integer txBroadcastCount; // 24 int32u reportable
    public Integer txAckRequestedCount; // 25 int32u reportable
    public Integer txAckedCount; // 26 int32u reportable
    public Integer txNoAckRequestedCount; // 27 int32u reportable
    public Integer txDataCount; // 28 int32u reportable
    public Integer txDataPollCount; // 29 int32u reportable
    public Integer txBeaconCount; // 30 int32u reportable
    public Integer txBeaconRequestCount; // 31 int32u reportable
    public Integer txOtherCount; // 32 int32u reportable
    public Integer txRetryCount; // 33 int32u reportable
    public Integer txDirectMaxRetryExpiryCount; // 34 int32u reportable
    public Integer txIndirectMaxRetryExpiryCount; // 35 int32u reportable
    public Integer txErrCcaCount; // 36 int32u reportable
    public Integer txErrAbortCount; // 37 int32u reportable
    public Integer txErrBusyChannelCount; // 38 int32u reportable
    public Integer rxTotalCount; // 39 int32u reportable
    public Integer rxUnicastCount; // 40 int32u reportable
    public Integer rxBroadcastCount; // 41 int32u reportable
    public Integer rxDataCount; // 42 int32u reportable
    public Integer rxDataPollCount; // 43 int32u reportable
    public Integer rxBeaconCount; // 44 int32u reportable
    public Integer rxBeaconRequestCount; // 45 int32u reportable
    public Integer rxOtherCount; // 46 int32u reportable
    public Integer rxAddressFilteredCount; // 47 int32u reportable
    public Integer rxDestAddrFilteredCount; // 48 int32u reportable
    public Integer rxDuplicatedCount; // 49 int32u reportable
    public Integer rxErrNoFrameCount; // 50 int32u reportable
    public Integer rxErrUnknownNeighborCount; // 51 int32u reportable
    public Integer rxErrInvalidSrcAddrCount; // 52 int32u reportable
    public Integer rxErrSecCount; // 53 int32u reportable
    public Integer rxErrFcsCount; // 54 int32u reportable
    public Integer rxErrOtherCount; // 55 int32u reportable
    public Long activeTimestamp; // 56 int64u reportable
    public Long pendingTimestamp; // 57 int64u reportable
    public Integer delay; // 58 int32u reportable
    public SecurityPolicy securityPolicy; // 59 SecurityPolicy reportable
    public String channelPage0Mask; // 60 octet_string reportable
    public OperationalDatasetComponents operationalDatasetComponents; // 61 OperationalDatasetComponents reportable
    public NetworkFaultEnum activeNetworkFaultsList; // 62 NetworkFaultEnum reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ThreadNetworkDiagnosticsCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 74, "ThreadNetworkDiagnostics");
    }

    public void resetCounts(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "resetCounts", o);
    }

    public String toString() {
        String str = "";
        str += "channel : " + channel + "\n";
        str += "routingRole : " + routingRole + "\n";
        str += "networkName : " + networkName + "\n";
        str += "panId : " + panId + "\n";
        str += "extendedPanId : " + extendedPanId + "\n";
        str += "meshLocalPrefix : " + meshLocalPrefix + "\n";
        str += "overrunCount : " + overrunCount + "\n";
        str += "neighborTable : " + neighborTable + "\n";
        str += "routeTable : " + routeTable + "\n";
        str += "partitionId : " + partitionId + "\n";
        str += "weighting : " + weighting + "\n";
        str += "dataVersion : " + dataVersion + "\n";
        str += "stableDataVersion : " + stableDataVersion + "\n";
        str += "leaderRouterId : " + leaderRouterId + "\n";
        str += "detachedRoleCount : " + detachedRoleCount + "\n";
        str += "childRoleCount : " + childRoleCount + "\n";
        str += "routerRoleCount : " + routerRoleCount + "\n";
        str += "leaderRoleCount : " + leaderRoleCount + "\n";
        str += "attachAttemptCount : " + attachAttemptCount + "\n";
        str += "partitionIdChangeCount : " + partitionIdChangeCount + "\n";
        str += "betterPartitionAttachAttemptCount : " + betterPartitionAttachAttemptCount + "\n";
        str += "parentChangeCount : " + parentChangeCount + "\n";
        str += "txTotalCount : " + txTotalCount + "\n";
        str += "txUnicastCount : " + txUnicastCount + "\n";
        str += "txBroadcastCount : " + txBroadcastCount + "\n";
        str += "txAckRequestedCount : " + txAckRequestedCount + "\n";
        str += "txAckedCount : " + txAckedCount + "\n";
        str += "txNoAckRequestedCount : " + txNoAckRequestedCount + "\n";
        str += "txDataCount : " + txDataCount + "\n";
        str += "txDataPollCount : " + txDataPollCount + "\n";
        str += "txBeaconCount : " + txBeaconCount + "\n";
        str += "txBeaconRequestCount : " + txBeaconRequestCount + "\n";
        str += "txOtherCount : " + txOtherCount + "\n";
        str += "txRetryCount : " + txRetryCount + "\n";
        str += "txDirectMaxRetryExpiryCount : " + txDirectMaxRetryExpiryCount + "\n";
        str += "txIndirectMaxRetryExpiryCount : " + txIndirectMaxRetryExpiryCount + "\n";
        str += "txErrCcaCount : " + txErrCcaCount + "\n";
        str += "txErrAbortCount : " + txErrAbortCount + "\n";
        str += "txErrBusyChannelCount : " + txErrBusyChannelCount + "\n";
        str += "rxTotalCount : " + rxTotalCount + "\n";
        str += "rxUnicastCount : " + rxUnicastCount + "\n";
        str += "rxBroadcastCount : " + rxBroadcastCount + "\n";
        str += "rxDataCount : " + rxDataCount + "\n";
        str += "rxDataPollCount : " + rxDataPollCount + "\n";
        str += "rxBeaconCount : " + rxBeaconCount + "\n";
        str += "rxBeaconRequestCount : " + rxBeaconRequestCount + "\n";
        str += "rxOtherCount : " + rxOtherCount + "\n";
        str += "rxAddressFilteredCount : " + rxAddressFilteredCount + "\n";
        str += "rxDestAddrFilteredCount : " + rxDestAddrFilteredCount + "\n";
        str += "rxDuplicatedCount : " + rxDuplicatedCount + "\n";
        str += "rxErrNoFrameCount : " + rxErrNoFrameCount + "\n";
        str += "rxErrUnknownNeighborCount : " + rxErrUnknownNeighborCount + "\n";
        str += "rxErrInvalidSrcAddrCount : " + rxErrInvalidSrcAddrCount + "\n";
        str += "rxErrSecCount : " + rxErrSecCount + "\n";
        str += "rxErrFcsCount : " + rxErrFcsCount + "\n";
        str += "rxErrOtherCount : " + rxErrOtherCount + "\n";
        str += "activeTimestamp : " + activeTimestamp + "\n";
        str += "pendingTimestamp : " + pendingTimestamp + "\n";
        str += "delay : " + delay + "\n";
        str += "securityPolicy : " + securityPolicy + "\n";
        str += "channelPage0Mask : " + channelPage0Mask + "\n";
        str += "operationalDatasetComponents : " + operationalDatasetComponents + "\n";
        str += "activeNetworkFaultsList : " + activeNetworkFaultsList + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
