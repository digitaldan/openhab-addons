/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * NetworkCommissioning
 *
 * @author Dan Cunningham - Initial contribution
 */
public class NetworkCommissioningClusterTypes {

    public static final String CLUSTER_NAME = "NETWORK_COMMISSIONING_CLUSTER";
    public static final int CLUSTER_ID = 0x0031;

    public class NetworkInfoStruct {
        public String networkID; // octet_string
        public Boolean connected; // boolean
        public String networkIdentifier; // octet_string
        public String clientIdentifier; // octet_string

        public NetworkInfoStruct(String networkID, Boolean connected, String networkIdentifier,
                String clientIdentifier) {
            this.networkID = networkID;
            this.connected = connected;
            this.networkIdentifier = networkIdentifier;
            this.clientIdentifier = clientIdentifier;
        }
    }

    public class ThreadInterfaceScanResultStruct {
        public Integer panId; // int16u
        public Long extendedPanId; // int64u
        public String networkName; // char_string
        public Integer channel; // int16u
        public Integer version; // int8u
        public String extendedAddress; // octet_string
        public Integer rssi; // int8s
        public Integer lqi; // int8u

        public ThreadInterfaceScanResultStruct(Integer panId, Long extendedPanId, String networkName, Integer channel,
                Integer version, String extendedAddress, Integer rssi, Integer lqi) {
            this.panId = panId;
            this.extendedPanId = extendedPanId;
            this.networkName = networkName;
            this.channel = channel;
            this.version = version;
            this.extendedAddress = extendedAddress;
            this.rssi = rssi;
            this.lqi = lqi;
        }
    }

    public class WiFiInterfaceScanResultStruct {
        public WiFiSecurityBitmap security; // WiFiSecurityBitmap
        public String ssid; // octet_string
        public String bssid; // octet_string
        public Integer channel; // int16u
        public WiFiBandEnum wiFiBand; // WiFiBandEnum
        public Integer rssi; // int8s

        public WiFiInterfaceScanResultStruct(WiFiSecurityBitmap security, String ssid, String bssid, Integer channel,
                WiFiBandEnum wiFiBand, Integer rssi) {
            this.security = security;
            this.ssid = ssid;
            this.bssid = bssid;
            this.channel = channel;
            this.wiFiBand = wiFiBand;
            this.rssi = rssi;
        }
    }

    // ZCL Enums
    public enum NetworkCommissioningStatusEnum {
        SUCCESS(0, "Success"),
        OUTOFRANGE(1, "OutOfRange"),
        BOUNDSEXCEEDED(2, "BoundsExceeded"),
        NETWORKIDNOTFOUND(3, "NetworkIDNotFound"),
        DUPLICATENETWORKID(4, "DuplicateNetworkID"),
        NETWORKNOTFOUND(5, "NetworkNotFound"),
        REGULATORYERROR(6, "RegulatoryError"),
        AUTHFAILURE(7, "AuthFailure"),
        UNSUPPORTEDSECURITY(8, "UnsupportedSecurity"),
        OTHERCONNECTIONFAILURE(9, "OtherConnectionFailure"),
        IPV6FAILED(10, "IPV6Failed"),
        IPBINDFAILED(11, "IPBindFailed"),
        UNKNOWNERROR(12, "UnknownError"),
        UNKNOWN_VALUE(13, "UnknownValue");

        public final int value;
        public final String label;

        private NetworkCommissioningStatusEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum WiFiBandEnum {
        T2G4(0, "2G4"),
        T3G65(1, "3G65"),
        T5G(2, "5G"),
        T6G(3, "6G"),
        T60G(4, "60G"),
        T1G(5, "1G"),
        UNKNOWN_VALUE(6, "UnknownValue");

        public final int value;
        public final String label;

        private WiFiBandEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class Feature {
        public boolean wiFiNetworkInterface;
        public boolean threadNetworkInterface;
        public boolean ethernetNetworkInterface;
        public boolean perDeviceCredentials;

        public Feature(boolean wiFiNetworkInterface, boolean threadNetworkInterface, boolean ethernetNetworkInterface,
                boolean perDeviceCredentials) {
            this.wiFiNetworkInterface = wiFiNetworkInterface;
            this.threadNetworkInterface = threadNetworkInterface;
            this.ethernetNetworkInterface = ethernetNetworkInterface;
            this.perDeviceCredentials = perDeviceCredentials;
        }
    }

    public static class ThreadCapabilitiesBitmap {
        public boolean isBorderRouterCapable;
        public boolean isRouterCapable;
        public boolean isSleepyEndDeviceCapable;
        public boolean isFullThreadDevice;
        public boolean isSynchronizedSleepyEndDeviceCapable;

        public ThreadCapabilitiesBitmap(boolean isBorderRouterCapable, boolean isRouterCapable,
                boolean isSleepyEndDeviceCapable, boolean isFullThreadDevice,
                boolean isSynchronizedSleepyEndDeviceCapable) {
            this.isBorderRouterCapable = isBorderRouterCapable;
            this.isRouterCapable = isRouterCapable;
            this.isSleepyEndDeviceCapable = isSleepyEndDeviceCapable;
            this.isFullThreadDevice = isFullThreadDevice;
            this.isSynchronizedSleepyEndDeviceCapable = isSynchronizedSleepyEndDeviceCapable;
        }
    }

    public static class WiFiSecurityBitmap {
        public boolean unencrypted;
        public boolean wep;
        public boolean wpaPersonal;
        public boolean wpa2Personal;
        public boolean wpa3Personal;
        public boolean wpa3MatterPdc;

        public WiFiSecurityBitmap(boolean unencrypted, boolean wep, boolean wpaPersonal, boolean wpa2Personal,
                boolean wpa3Personal, boolean wpa3MatterPdc) {
            this.unencrypted = unencrypted;
            this.wep = wep;
            this.wpaPersonal = wpaPersonal;
            this.wpa2Personal = wpa2Personal;
            this.wpa3Personal = wpa3Personal;
            this.wpa3MatterPdc = wpa3MatterPdc;
        }
    }

    public static class ScanNetworksCommandOptions {
        public String ssid;
        public Long breadcrumb;

        public ScanNetworksCommandOptions(String ssid, Long breadcrumb) {
            this.ssid = ssid;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class ScanNetworksResponseCommandOptions {
        public NetworkCommissioningStatusEnum networkingStatus;
        public String debugText;
        public WiFiInterfaceScanResultStruct[] wiFiScanResults;
        public ThreadInterfaceScanResultStruct[] threadScanResults;

        public ScanNetworksResponseCommandOptions(NetworkCommissioningStatusEnum networkingStatus, String debugText,
                WiFiInterfaceScanResultStruct[] wiFiScanResults, ThreadInterfaceScanResultStruct[] threadScanResults) {
            this.networkingStatus = networkingStatus;
            this.debugText = debugText;
            this.wiFiScanResults = wiFiScanResults;
            this.threadScanResults = threadScanResults;
        }
    }

    public static class AddOrUpdateWiFiNetworkCommandOptions {
        public String ssid;
        public String credentials;
        public Long breadcrumb;
        public String networkIdentity;
        public String clientIdentifier;
        public String possessionNonce;

        public AddOrUpdateWiFiNetworkCommandOptions(String ssid, String credentials, Long breadcrumb,
                String networkIdentity, String clientIdentifier, String possessionNonce) {
            this.ssid = ssid;
            this.credentials = credentials;
            this.breadcrumb = breadcrumb;
            this.networkIdentity = networkIdentity;
            this.clientIdentifier = clientIdentifier;
            this.possessionNonce = possessionNonce;
        }
    }

    public static class AddOrUpdateThreadNetworkCommandOptions {
        public String operationalDataset;
        public Long breadcrumb;

        public AddOrUpdateThreadNetworkCommandOptions(String operationalDataset, Long breadcrumb) {
            this.operationalDataset = operationalDataset;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class RemoveNetworkCommandOptions {
        public String networkID;
        public Long breadcrumb;

        public RemoveNetworkCommandOptions(String networkID, Long breadcrumb) {
            this.networkID = networkID;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class NetworkConfigResponseCommandOptions {
        public NetworkCommissioningStatusEnum networkingStatus;
        public String debugText;
        public Integer networkIndex;
        public String clientIdentity;
        public String possessionSignature;

        public NetworkConfigResponseCommandOptions(NetworkCommissioningStatusEnum networkingStatus, String debugText,
                Integer networkIndex, String clientIdentity, String possessionSignature) {
            this.networkingStatus = networkingStatus;
            this.debugText = debugText;
            this.networkIndex = networkIndex;
            this.clientIdentity = clientIdentity;
            this.possessionSignature = possessionSignature;
        }
    }

    public static class ConnectNetworkCommandOptions {
        public String networkID;
        public Long breadcrumb;

        public ConnectNetworkCommandOptions(String networkID, Long breadcrumb) {
            this.networkID = networkID;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class ConnectNetworkResponseCommandOptions {
        public NetworkCommissioningStatusEnum networkingStatus;
        public String debugText;
        public Integer errorValue;

        public ConnectNetworkResponseCommandOptions(NetworkCommissioningStatusEnum networkingStatus, String debugText,
                Integer errorValue) {
            this.networkingStatus = networkingStatus;
            this.debugText = debugText;
            this.errorValue = errorValue;
        }
    }

    public static class ReorderNetworkCommandOptions {
        public String networkID;
        public Integer networkIndex;
        public Long breadcrumb;

        public ReorderNetworkCommandOptions(String networkID, Integer networkIndex, Long breadcrumb) {
            this.networkID = networkID;
            this.networkIndex = networkIndex;
            this.breadcrumb = breadcrumb;
        }
    }

    public static class QueryIdentityCommandOptions {
        public String keyIdentifier;
        public String possessionNonce;

        public QueryIdentityCommandOptions(String keyIdentifier, String possessionNonce) {
            this.keyIdentifier = keyIdentifier;
            this.possessionNonce = possessionNonce;
        }
    }

    public static class QueryIdentityResponseCommandOptions {
        public String identity;
        public String possessionSignature;

        public QueryIdentityResponseCommandOptions(String identity, String possessionSignature) {
            this.identity = identity;
            this.possessionSignature = possessionSignature;
        }
    }
}
