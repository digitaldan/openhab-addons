/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * BasicInformation
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class BasicInformationCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "BASIC_INFORMATION_CLUSTER";
    public static final int CLUSTER_ID = 0x0028;

    class CapabilityMinimaStruct {
        public Integer caseSessionsPerFabric; // int16u
        public Integer subscriptionsPerFabric; // int16u

        public CapabilityMinimaStruct(Integer caseSessionsPerFabric, Integer subscriptionsPerFabric) {
            this.caseSessionsPerFabric = caseSessionsPerFabric;
            this.subscriptionsPerFabric = subscriptionsPerFabric;
        }
    }

    class ProductAppearanceStruct {
        public ProductFinishEnum finish; // ProductFinishEnum
        public ColorEnum primaryColor; // ColorEnum

        public ProductAppearanceStruct(ProductFinishEnum finish, ColorEnum primaryColor) {
            this.finish = finish;
            this.primaryColor = primaryColor;
        }
    }

    // ZCL Enums
    public enum ColorEnum {
        BLACK(0, "Black"),
        NAVY(1, "Navy"),
        GREEN(2, "Green"),
        TEAL(3, "Teal"),
        MAROON(4, "Maroon"),
        PURPLE(5, "Purple"),
        OLIVE(6, "Olive"),
        GRAY(7, "Gray"),
        BLUE(8, "Blue"),
        LIME(9, "Lime"),
        AQUA(10, "Aqua"),
        RED(11, "Red"),
        FUCHSIA(12, "Fuchsia"),
        YELLOW(13, "Yellow"),
        WHITE(14, "White"),
        NICKEL(15, "Nickel"),
        CHROME(16, "Chrome"),
        BRASS(17, "Brass"),
        COPPER(18, "Copper"),
        SILVER(19, "Silver"),
        GOLD(20, "Gold"),
        UNKNOWN_VALUE(21, "UnknownValue");

        public final int value;
        public final String label;

        private ColorEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum ProductFinishEnum {
        OTHER(0, "Other"),
        MATTE(1, "Matte"),
        SATIN(2, "Satin"),
        POLISHED(3, "Polished"),
        RUGGED(4, "Rugged"),
        FABRIC(5, "Fabric"),
        UNKNOWN_VALUE(6, "UnknownValue");

        public final int value;
        public final String label;

        private ProductFinishEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public Integer dataModelRevision; // 0 int16u reportable
    public String vendorName; // 1 char_string reportable
    public Integer vendorID; // 2 vendor_id reportable
    public String productName; // 3 char_string reportable
    public Integer productID; // 4 int16u reportable
    public String nodeLabel; // 5 char_string reportable writable
    public String location; // 6 char_string reportable writable
    public Integer hardwareVersion; // 7 int16u reportable
    public String hardwareVersionString; // 8 char_string reportable
    public Integer softwareVersion; // 9 int32u reportable
    public String softwareVersionString; // 10 char_string reportable
    public String manufacturingDate; // 11 char_string reportable
    public String partNumber; // 12 char_string reportable
    public String productURL; // 13 long_char_string reportable
    public String productLabel; // 14 char_string reportable
    public String serialNumber; // 15 char_string reportable
    public Boolean localConfigDisabled; // 16 boolean reportable writable
    public Boolean reachable; // 17 boolean reportable
    public String uniqueID; // 18 char_string reportable
    public CapabilityMinimaStruct[] capabilityMinima; // 19 CapabilityMinimaStruct reportable
    public ProductAppearanceStruct[] productAppearance; // 20 ProductAppearanceStruct reportable
    public Integer specificationVersion; // 21 int32u reportable
    public Integer maxPathsPerInvoke; // 22 int16u reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public BasicInformationCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 5, "BasicInformation");
    }

    public void mfgSpecificPing(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "mfgSpecificPing", o);
    }

    public String toString() {
        String str = "";
        str += "dataModelRevision : " + dataModelRevision + "\n";
        str += "vendorName : " + vendorName + "\n";
        str += "vendorID : " + vendorID + "\n";
        str += "productName : " + productName + "\n";
        str += "productID : " + productID + "\n";
        str += "nodeLabel : " + nodeLabel + "\n";
        str += "location : " + location + "\n";
        str += "hardwareVersion : " + hardwareVersion + "\n";
        str += "hardwareVersionString : " + hardwareVersionString + "\n";
        str += "softwareVersion : " + softwareVersion + "\n";
        str += "softwareVersionString : " + softwareVersionString + "\n";
        str += "manufacturingDate : " + manufacturingDate + "\n";
        str += "partNumber : " + partNumber + "\n";
        str += "productURL : " + productURL + "\n";
        str += "productLabel : " + productLabel + "\n";
        str += "serialNumber : " + serialNumber + "\n";
        str += "localConfigDisabled : " + localConfigDisabled + "\n";
        str += "reachable : " + reachable + "\n";
        str += "uniqueID : " + uniqueID + "\n";
        str += "capabilityMinima : " + capabilityMinima + "\n";
        str += "productAppearance : " + productAppearance + "\n";
        str += "specificationVersion : " + specificationVersion + "\n";
        str += "maxPathsPerInvoke : " + maxPathsPerInvoke + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
