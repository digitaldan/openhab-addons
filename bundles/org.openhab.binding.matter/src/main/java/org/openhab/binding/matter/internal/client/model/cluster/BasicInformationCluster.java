/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * BasicInformation
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class BasicInformationCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "BASIC_INFORMATION_CLUSTER";
    public static final int CLUSTER_ID = 0x0028;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(35, "dataModelRevision"), entry(125, "vendorName"),
                entry(200, "vendorID"), entry(263, "productName"), entry(316, "productID"), entry(358, "nodeLabel"),
                entry(395, "location"), entry(426, "hardwareVersion"), entry(455, "hardwareVersionString"),
                entry(481, "softwareVersion"), entry(506, "softwareVersionString"), entry(528, "manufacturingDate"),
                entry(548, "partNumber"), entry(566, "productURL"), entry(580, "productLabel"),
                entry(593, "serialNumber"), entry(605, "localConfigDisabled"), entry(618, "reachable"),
                entry(630, "uniqueID"), entry(642, "capabilityMinima"), entry(654, "productAppearance"),
                entry(666, "specificationVersion"), entry(678, "maxPathsPerInvoke"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(313, "mfgSpecificPing"));
    }

    class CapabilityMinimaStruct implements JsonSerializable {
        public Integer caseSessionsPerFabric; // int16u
        public Integer subscriptionsPerFabric; // int16u

        public CapabilityMinimaStruct(Integer caseSessionsPerFabric, Integer subscriptionsPerFabric) {
            this.caseSessionsPerFabric = caseSessionsPerFabric;
            this.subscriptionsPerFabric = subscriptionsPerFabric;
        }

        public String toJson() {
            String out = "{";
            out += "\"caseSessionsPerFabric\" : " + caseSessionsPerFabric + ",";
            out += "\"subscriptionsPerFabric\" : " + subscriptionsPerFabric + "";
            out += "}";
            return out;
        }
    }

    class ProductAppearanceStruct implements JsonSerializable {
        public ProductFinishEnum finish; // ProductFinishEnum
        public ColorEnum primaryColor; // ColorEnum

        public ProductAppearanceStruct(ProductFinishEnum finish, ColorEnum primaryColor) {
            this.finish = finish;
            this.primaryColor = primaryColor;
        }

        public String toJson() {
            String out = "{";
            out += "\"finish\" : " + finish + ",";
            out += "\"primaryColor\" : " + primaryColor + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum ColorEnum implements JsonSerializable {
        BLACK(0, "Black"),
        NAVY(1, "Navy"),
        GREEN(2, "Green"),
        TEAL(3, "Teal"),
        MAROON(4, "Maroon"),
        PURPLE(5, "Purple"),
        OLIVE(6, "Olive"),
        GRAY(7, "Gray"),
        BLUE(8, "Blue"),
        LIME(9, "Lime"),
        AQUA(10, "Aqua"),
        RED(11, "Red"),
        FUCHSIA(12, "Fuchsia"),
        YELLOW(13, "Yellow"),
        WHITE(14, "White"),
        NICKEL(15, "Nickel"),
        CHROME(16, "Chrome"),
        BRASS(17, "Brass"),
        COPPER(18, "Copper"),
        SILVER(19, "Silver"),
        GOLD(20, "Gold"),
        UNKNOWN_VALUE(21, "UnknownValue");

        public final int value;
        public final String label;

        private ColorEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ProductFinishEnum implements JsonSerializable {
        OTHER(0, "Other"),
        MATTE(1, "Matte"),
        SATIN(2, "Satin"),
        POLISHED(3, "Polished"),
        RUGGED(4, "Rugged"),
        FABRIC(5, "Fabric"),
        UNKNOWN_VALUE(6, "UnknownValue");

        public final int value;
        public final String label;

        private ProductFinishEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public Integer dataModelRevision; // 35 int16u
    public String vendorName; // 125 char_string
    public Integer vendorID; // 200 vendor_id
    public String productName; // 263 char_string
    public Integer productID; // 316 int16u
    public String nodeLabel; // 358 char_string
    public String location; // 395 char_string
    public Integer hardwareVersion; // 426 int16u
    public String hardwareVersionString; // 455 char_string
    public Integer softwareVersion; // 481 int32u
    public String softwareVersionString; // 506 char_string
    public String manufacturingDate; // 528 char_string
    public String partNumber; // 548 char_string
    public String productURL; // 566 long_char_string
    public String productLabel; // 580 char_string
    public String serialNumber; // 593 char_string
    public Boolean localConfigDisabled; // 605 boolean
    public Boolean reachable; // 618 boolean
    public String uniqueID; // 630 char_string
    public CapabilityMinimaStruct[] capabilityMinima; // 642 CapabilityMinimaStruct
    public ProductAppearanceStruct[] productAppearance; // 654 ProductAppearanceStruct
    public Integer specificationVersion; // 666 int32u
    public Integer maxPathsPerInvoke; // 678 int16u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public BasicInformationCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 25, "BasicInformation");
    }

    public void mfgSpecificPing(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "mfgSpecificPing", o);
    }

    public String toString() {
        String str = "";
        str += "dataModelRevision : " + dataModelRevision + "\n";
        str += "vendorName : " + vendorName + "\n";
        str += "vendorID : " + vendorID + "\n";
        str += "productName : " + productName + "\n";
        str += "productID : " + productID + "\n";
        str += "nodeLabel : " + nodeLabel + "\n";
        str += "location : " + location + "\n";
        str += "hardwareVersion : " + hardwareVersion + "\n";
        str += "hardwareVersionString : " + hardwareVersionString + "\n";
        str += "softwareVersion : " + softwareVersion + "\n";
        str += "softwareVersionString : " + softwareVersionString + "\n";
        str += "manufacturingDate : " + manufacturingDate + "\n";
        str += "partNumber : " + partNumber + "\n";
        str += "productURL : " + productURL + "\n";
        str += "productLabel : " + productLabel + "\n";
        str += "serialNumber : " + serialNumber + "\n";
        str += "localConfigDisabled : " + localConfigDisabled + "\n";
        str += "reachable : " + reachable + "\n";
        str += "uniqueID : " + uniqueID + "\n";
        str += "capabilityMinima : " + capabilityMinima + "\n";
        str += "productAppearance : " + productAppearance + "\n";
        str += "specificationVersion : " + specificationVersion + "\n";
        str += "maxPathsPerInvoke : " + maxPathsPerInvoke + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
