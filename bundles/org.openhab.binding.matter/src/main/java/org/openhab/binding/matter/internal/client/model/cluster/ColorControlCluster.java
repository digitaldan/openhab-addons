/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * ColorControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ColorControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "COLOR_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0300;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(4, "currentHue"), entry(6, "currentSaturation"),
                entry(8, "remainingTime"), entry(10, "currentX"), entry(12, "currentY"), entry(19, "driftCompensation"),
                entry(100, "compensationText"), entry(176, "colorTemperatureMireds"), entry(244, "colorMode"),
                entry(301, "options"), entry(343, "numberOfPrimaries"), entry(382, "primary1X"),
                entry(414, "primary1Y"), entry(445, "primary1Intensity"), entry(472, "primary2X"),
                entry(496, "primary2Y"), entry(517, "primary2Intensity"), entry(539, "primary3X"),
                entry(558, "primary3Y"), entry(574, "primary3Intensity"), entry(587, "primary4X"),
                entry(600, "primary4Y"), entry(612, "primary4Intensity"), entry(624, "primary5X"),
                entry(636, "primary5Y"), entry(648, "primary5Intensity"), entry(659, "primary6X"),
                entry(670, "primary6Y"), entry(682, "primary6Intensity"), entry(690, "whitePointX"),
                entry(699, "whitePointY"), entry(708, "colorPointRX"), entry(716, "colorPointRY"),
                entry(724, "colorPointRIntensity"), entry(732, "colorPointGX"), entry(740, "colorPointGY"),
                entry(748, "colorPointGIntensity"), entry(756, "colorPointBX"), entry(763, "colorPointBY"),
                entry(770, "colorPointBIntensity"), entry(1048, "enhancedCurrentHue"), entry(1049, "enhancedColorMode"),
                entry(1050, "colorLoopActive"), entry(1051, "colorLoopDirection"), entry(1052, "colorLoopTime"),
                entry(1053, "colorLoopStartEnhancedHue"), entry(1054, "colorLoopStoredEnhancedHue"),
                entry(1055, "colorCapabilities"), entry(1056, "colorTempPhysicalMinMireds"),
                entry(1057, "colorTempPhysicalMaxMireds"), entry(777, "coupleColorTempToLevelMinMireds"),
                entry(784, "startUpColorTemperatureMireds"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(1, "moveToHue"), entry(2, "moveHue"), entry(3, "stepHue"),
                entry(4, "moveToSaturation"), entry(5, "moveSaturation"), entry(9, "stepSaturation"),
                entry(63, "moveToHueAndSaturation"), entry(112, "moveToColor"), entry(146, "moveColor"),
                entry(175, "stepColor"), entry(198, "moveToColorTemperature"), entry(312, "enhancedMoveToHue"),
                entry(314, "enhancedMoveHue"), entry(315, "enhancedStepHue"),
                entry(316, "enhancedMoveToHueAndSaturation"), entry(317, "colorLoopSet"), entry(318, "stopMoveStep"),
                entry(319, "moveColorTemperature"), entry(320, "stepColorTemperature"));
    }

    // ZCL Enums
    public enum ColorLoopAction implements JsonSerializable {
        DEACTIVATE(0, "Deactivate"),
        ACTIVATEFROMCOLORLOOPSTARTENHANCEDHUE(1, "ActivateFromColorLoopStartEnhancedHue"),
        ACTIVATEFROMENHANCEDCURRENTHUE(2, "ActivateFromEnhancedCurrentHue"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private ColorLoopAction(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ColorLoopDirection implements JsonSerializable {
        DECREMENTHUE(0, "DecrementHue"),
        INCREMENTHUE(1, "IncrementHue"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private ColorLoopDirection(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ColorMode implements JsonSerializable {
        CURRENTHUEANDCURRENTSATURATION(0, "CurrentHueAndCurrentSaturation"),
        CURRENTXANDCURRENTY(1, "CurrentXAndCurrentY"),
        COLORTEMPERATURE(2, "ColorTemperature"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private ColorMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum HueDirection implements JsonSerializable {
        SHORTESTDISTANCE(0, "ShortestDistance"),
        LONGESTDISTANCE(1, "LongestDistance"),
        UP(2, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private HueDirection(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum HueMoveMode implements JsonSerializable {
        STOP(0, "Stop"),
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private HueMoveMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum HueStepMode implements JsonSerializable {
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private HueStepMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum SaturationMoveMode implements JsonSerializable {
        STOP(0, "Stop"),
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private SaturationMoveMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum SaturationStepMode implements JsonSerializable {
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private SaturationStepMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class ColorCapabilities implements JsonSerializable {
        public boolean hueSaturationSupported;
        public boolean enhancedHueSupported;
        public boolean colorLoopSupported;
        public boolean XYAttributesSupported;
        public boolean colorTemperatureSupported;

        public ColorCapabilities(boolean hueSaturationSupported, boolean enhancedHueSupported,
                boolean colorLoopSupported, boolean XYAttributesSupported, boolean colorTemperatureSupported) {
            this.hueSaturationSupported = hueSaturationSupported;
            this.enhancedHueSupported = enhancedHueSupported;
            this.colorLoopSupported = colorLoopSupported;
            this.XYAttributesSupported = XYAttributesSupported;
            this.colorTemperatureSupported = colorTemperatureSupported;
        }

        public String toJson() {
            String out = "{";
            out += "\"hueSaturationSupported\" : " + hueSaturationSupported + ",";
            out += "\"enhancedHueSupported\" : " + enhancedHueSupported + ",";
            out += "\"colorLoopSupported\" : " + colorLoopSupported + ",";
            out += "\"XYAttributesSupported\" : " + XYAttributesSupported + ",";
            out += "\"colorTemperatureSupported\" : " + colorTemperatureSupported + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static ColorCapabilities fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new ColorCapabilities(keys[0], keys[1], keys[2], keys[3], keys[4]);
        }
    }

    public static class ColorLoopUpdateFlags implements JsonSerializable {
        public boolean updateAction;
        public boolean updateDirection;
        public boolean updateTime;
        public boolean updateStartHue;

        public ColorLoopUpdateFlags(boolean updateAction, boolean updateDirection, boolean updateTime,
                boolean updateStartHue) {
            this.updateAction = updateAction;
            this.updateDirection = updateDirection;
            this.updateTime = updateTime;
            this.updateStartHue = updateStartHue;
        }

        public String toJson() {
            String out = "{";
            out += "\"updateAction\" : " + updateAction + ",";
            out += "\"updateDirection\" : " + updateDirection + ",";
            out += "\"updateTime\" : " + updateTime + ",";
            out += "\"updateStartHue\" : " + updateStartHue + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static ColorLoopUpdateFlags fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new ColorLoopUpdateFlags(keys[0], keys[1], keys[2], keys[3]);
        }
    }

    public static class Feature implements JsonSerializable {
        public boolean hueAndSaturation;
        public boolean enhancedHue;
        public boolean colorLoop;
        public boolean xy;
        public boolean colorTemperature;

        public Feature(boolean hueAndSaturation, boolean enhancedHue, boolean colorLoop, boolean xy,
                boolean colorTemperature) {
            this.hueAndSaturation = hueAndSaturation;
            this.enhancedHue = enhancedHue;
            this.colorLoop = colorLoop;
            this.xy = xy;
            this.colorTemperature = colorTemperature;
        }

        public String toJson() {
            String out = "{";
            out += "\"hueAndSaturation\" : " + hueAndSaturation + ",";
            out += "\"enhancedHue\" : " + enhancedHue + ",";
            out += "\"colorLoop\" : " + colorLoop + ",";
            out += "\"xy\" : " + xy + ",";
            out += "\"colorTemperature\" : " + colorTemperature + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3], keys[4]);
        }
    }

    public Integer currentHue; // 4 int8u
    public Integer currentSaturation; // 6 int8u
    public Integer remainingTime; // 8 int16u
    public Integer currentX; // 10 int16u
    public Integer currentY; // 12 int16u
    public Integer driftCompensation; // 19 enum8
    public String compensationText; // 100 char_string
    public Integer colorTemperatureMireds; // 176 int16u
    public Integer colorMode; // 244 enum8
    public Map<String, Boolean> options; // 301 bitmap8
    public Integer numberOfPrimaries; // 343 int8u
    public Integer primary1X; // 382 int16u
    public Integer primary1Y; // 414 int16u
    public Integer primary1Intensity; // 445 int8u
    public Integer primary2X; // 472 int16u
    public Integer primary2Y; // 496 int16u
    public Integer primary2Intensity; // 517 int8u
    public Integer primary3X; // 539 int16u
    public Integer primary3Y; // 558 int16u
    public Integer primary3Intensity; // 574 int8u
    public Integer primary4X; // 587 int16u
    public Integer primary4Y; // 600 int16u
    public Integer primary4Intensity; // 612 int8u
    public Integer primary5X; // 624 int16u
    public Integer primary5Y; // 636 int16u
    public Integer primary5Intensity; // 648 int8u
    public Integer primary6X; // 659 int16u
    public Integer primary6Y; // 670 int16u
    public Integer primary6Intensity; // 682 int8u
    public Integer whitePointX; // 690 int16u
    public Integer whitePointY; // 699 int16u
    public Integer colorPointRX; // 708 int16u
    public Integer colorPointRY; // 716 int16u
    public Integer colorPointRIntensity; // 724 int8u
    public Integer colorPointGX; // 732 int16u
    public Integer colorPointGY; // 740 int16u
    public Integer colorPointGIntensity; // 748 int8u
    public Integer colorPointBX; // 756 int16u
    public Integer colorPointBY; // 763 int16u
    public Integer colorPointBIntensity; // 770 int8u
    public Integer enhancedCurrentHue; // 1048 int16u
    public Integer enhancedColorMode; // 1049 enum8
    public Integer colorLoopActive; // 1050 int8u
    public Integer colorLoopDirection; // 1051 int8u
    public Integer colorLoopTime; // 1052 int16u
    public Integer colorLoopStartEnhancedHue; // 1053 int16u
    public Integer colorLoopStoredEnhancedHue; // 1054 int16u
    public Map<String, Boolean> colorCapabilities; // 1055 bitmap16
    public Integer colorTempPhysicalMinMireds; // 1056 int16u
    public Integer colorTempPhysicalMaxMireds; // 1057 int16u
    public Integer coupleColorTempToLevelMinMireds; // 777 int16u
    public Integer startUpColorTemperatureMireds; // 784 int16u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public ColorControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 1, "ColorControl");
    }

    public void moveToHue(MatterClient client, Integer hue, HueDirection direction, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _hue = hue;
        final HueDirection _direction = direction;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer hue = _hue;
            public HueDirection direction = _direction;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToHue", o);
    }

    public void moveHue(MatterClient client, HueMoveMode moveMode, Integer rate, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveHue", o);
    }

    public void stepHue(MatterClient client, HueStepMode stepMode, Integer stepSize, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepHue", o);
    }

    public void moveToSaturation(MatterClient client, Integer saturation, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToSaturation", o);
    }

    public void moveSaturation(MatterClient client, SaturationMoveMode moveMode, Integer rate,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final SaturationMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public SaturationMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveSaturation", o);
    }

    public void stepSaturation(MatterClient client, SaturationStepMode stepMode, Integer stepSize,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final SaturationStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public SaturationStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepSaturation", o);
    }

    public void moveToHueAndSaturation(MatterClient client, Integer hue, Integer saturation, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _hue = hue;
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer hue = _hue;
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToHueAndSaturation", o);
    }

    public void moveToColor(MatterClient client, Integer colorX, Integer colorY, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _colorX = colorX;
        final Integer _colorY = colorY;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer colorX = _colorX;
            public Integer colorY = _colorY;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToColor", o);
    }

    public void moveColor(MatterClient client, Integer rateX, Integer rateY, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _rateX = rateX;
        final Integer _rateY = rateY;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer rateX = _rateX;
            public Integer rateY = _rateY;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveColor", o);
    }

    public void stepColor(MatterClient client, Integer stepX, Integer stepY, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _stepX = stepX;
        final Integer _stepY = stepY;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer stepX = _stepX;
            public Integer stepY = _stepY;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepColor", o);
    }

    public void moveToColorTemperature(MatterClient client, Integer colorTemperatureMireds, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _colorTemperatureMireds = colorTemperatureMireds;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer colorTemperatureMireds = _colorTemperatureMireds;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToColorTemperature", o);
    }

    public void enhancedMoveToHue(MatterClient client, Integer enhancedHue, HueDirection direction,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final Integer _enhancedHue = enhancedHue;
        final HueDirection _direction = direction;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer enhancedHue = _enhancedHue;
            public HueDirection direction = _direction;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveToHue", o);
    }

    public void enhancedMoveHue(MatterClient client, HueMoveMode moveMode, Integer rate,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveHue", o);
    }

    public void enhancedStepHue(MatterClient client, HueStepMode stepMode, Integer stepSize, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedStepHue", o);
    }

    public void enhancedMoveToHueAndSaturation(MatterClient client, Integer enhancedHue, Integer saturation,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final Integer _enhancedHue = enhancedHue;
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer enhancedHue = _enhancedHue;
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveToHueAndSaturation", o);
    }

    public void colorLoopSet(MatterClient client, ColorLoopUpdateFlags updateFlags, ColorLoopAction action,
            ColorLoopDirection direction, Integer time, Integer startHue, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final ColorLoopUpdateFlags _updateFlags = updateFlags;
        final ColorLoopAction _action = action;
        final ColorLoopDirection _direction = direction;
        final Integer _time = time;
        final Integer _startHue = startHue;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public ColorLoopUpdateFlags updateFlags = _updateFlags;
            public ColorLoopAction action = _action;
            public ColorLoopDirection direction = _direction;
            public Integer time = _time;
            public Integer startHue = _startHue;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "colorLoopSet", o);
    }

    public void stopMoveStep(MatterClient client, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stopMoveStep", o);
    }

    public void moveColorTemperature(MatterClient client, HueMoveMode moveMode, Integer rate,
            Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Integer _colorTemperatureMinimumMireds = colorTemperatureMinimumMireds;
        final Integer _colorTemperatureMaximumMireds = colorTemperatureMaximumMireds;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Integer colorTemperatureMinimumMireds = _colorTemperatureMinimumMireds;
            public Integer colorTemperatureMaximumMireds = _colorTemperatureMaximumMireds;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveColorTemperature", o);
    }

    public void stepColorTemperature(MatterClient client, HueStepMode stepMode, Integer stepSize,
            Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Integer _colorTemperatureMinimumMireds = colorTemperatureMinimumMireds;
        final Integer _colorTemperatureMaximumMireds = colorTemperatureMaximumMireds;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Integer colorTemperatureMinimumMireds = _colorTemperatureMinimumMireds;
            public Integer colorTemperatureMaximumMireds = _colorTemperatureMaximumMireds;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepColorTemperature", o);
    }

    public String toString() {
        String str = "";
        str += "currentHue : " + currentHue + "\n";
        str += "currentSaturation : " + currentSaturation + "\n";
        str += "remainingTime : " + remainingTime + "\n";
        str += "currentX : " + currentX + "\n";
        str += "currentY : " + currentY + "\n";
        str += "driftCompensation : " + driftCompensation + "\n";
        str += "compensationText : " + compensationText + "\n";
        str += "colorTemperatureMireds : " + colorTemperatureMireds + "\n";
        str += "colorMode : " + colorMode + "\n";
        str += "options : " + options + "\n";
        str += "numberOfPrimaries : " + numberOfPrimaries + "\n";
        str += "primary1X : " + primary1X + "\n";
        str += "primary1Y : " + primary1Y + "\n";
        str += "primary1Intensity : " + primary1Intensity + "\n";
        str += "primary2X : " + primary2X + "\n";
        str += "primary2Y : " + primary2Y + "\n";
        str += "primary2Intensity : " + primary2Intensity + "\n";
        str += "primary3X : " + primary3X + "\n";
        str += "primary3Y : " + primary3Y + "\n";
        str += "primary3Intensity : " + primary3Intensity + "\n";
        str += "primary4X : " + primary4X + "\n";
        str += "primary4Y : " + primary4Y + "\n";
        str += "primary4Intensity : " + primary4Intensity + "\n";
        str += "primary5X : " + primary5X + "\n";
        str += "primary5Y : " + primary5Y + "\n";
        str += "primary5Intensity : " + primary5Intensity + "\n";
        str += "primary6X : " + primary6X + "\n";
        str += "primary6Y : " + primary6Y + "\n";
        str += "primary6Intensity : " + primary6Intensity + "\n";
        str += "whitePointX : " + whitePointX + "\n";
        str += "whitePointY : " + whitePointY + "\n";
        str += "colorPointRX : " + colorPointRX + "\n";
        str += "colorPointRY : " + colorPointRY + "\n";
        str += "colorPointRIntensity : " + colorPointRIntensity + "\n";
        str += "colorPointGX : " + colorPointGX + "\n";
        str += "colorPointGY : " + colorPointGY + "\n";
        str += "colorPointGIntensity : " + colorPointGIntensity + "\n";
        str += "colorPointBX : " + colorPointBX + "\n";
        str += "colorPointBY : " + colorPointBY + "\n";
        str += "colorPointBIntensity : " + colorPointBIntensity + "\n";
        str += "enhancedCurrentHue : " + enhancedCurrentHue + "\n";
        str += "enhancedColorMode : " + enhancedColorMode + "\n";
        str += "colorLoopActive : " + colorLoopActive + "\n";
        str += "colorLoopDirection : " + colorLoopDirection + "\n";
        str += "colorLoopTime : " + colorLoopTime + "\n";
        str += "colorLoopStartEnhancedHue : " + colorLoopStartEnhancedHue + "\n";
        str += "colorLoopStoredEnhancedHue : " + colorLoopStoredEnhancedHue + "\n";
        str += "colorCapabilities : " + colorCapabilities + "\n";
        str += "colorTempPhysicalMinMireds : " + colorTempPhysicalMinMireds + "\n";
        str += "colorTempPhysicalMaxMireds : " + colorTempPhysicalMaxMireds + "\n";
        str += "coupleColorTempToLevelMinMireds : " + coupleColorTempToLevelMinMireds + "\n";
        str += "startUpColorTemperatureMireds : " + startUpColorTemperatureMireds + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
