/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * ColorControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ColorControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "COLOR_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0300;

    // ZCL Enums
    public enum ColorLoopAction {
        DEACTIVATE(0, "Deactivate"),
        ACTIVATEFROMCOLORLOOPSTARTENHANCEDHUE(1, "ActivateFromColorLoopStartEnhancedHue"),
        ACTIVATEFROMENHANCEDCURRENTHUE(2, "ActivateFromEnhancedCurrentHue"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private ColorLoopAction(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum ColorLoopDirection {
        DECREMENTHUE(0, "DecrementHue"),
        INCREMENTHUE(1, "IncrementHue"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private ColorLoopDirection(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum ColorMode {
        CURRENTHUEANDCURRENTSATURATION(0, "CurrentHueAndCurrentSaturation"),
        CURRENTXANDCURRENTY(1, "CurrentXAndCurrentY"),
        COLORTEMPERATURE(2, "ColorTemperature"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private ColorMode(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum HueDirection {
        SHORTESTDISTANCE(0, "ShortestDistance"),
        LONGESTDISTANCE(1, "LongestDistance"),
        UP(2, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private HueDirection(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum HueMoveMode {
        STOP(0, "Stop"),
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private HueMoveMode(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum HueStepMode {
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private HueStepMode(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum SaturationMoveMode {
        STOP(0, "Stop"),
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private SaturationMoveMode(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum SaturationStepMode {
        UP(1, "Up"),
        DOWN(3, "Down"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private SaturationStepMode(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class ColorCapabilities {
        public boolean hueSaturationSupported;
        public boolean enhancedHueSupported;
        public boolean colorLoopSupported;
        public boolean XYAttributesSupported;
        public boolean colorTemperatureSupported;

        public ColorCapabilities(boolean hueSaturationSupported, boolean enhancedHueSupported,
                boolean colorLoopSupported, boolean XYAttributesSupported, boolean colorTemperatureSupported) {
            this.hueSaturationSupported = hueSaturationSupported;
            this.enhancedHueSupported = enhancedHueSupported;
            this.colorLoopSupported = colorLoopSupported;
            this.XYAttributesSupported = XYAttributesSupported;
            this.colorTemperatureSupported = colorTemperatureSupported;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static ColorCapabilities fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new ColorCapabilities(keys[0], keys[1], keys[2], keys[3], keys[4]);
        }
    }

    public static class ColorLoopUpdateFlags {
        public boolean updateAction;
        public boolean updateDirection;
        public boolean updateTime;
        public boolean updateStartHue;

        public ColorLoopUpdateFlags(boolean updateAction, boolean updateDirection, boolean updateTime,
                boolean updateStartHue) {
            this.updateAction = updateAction;
            this.updateDirection = updateDirection;
            this.updateTime = updateTime;
            this.updateStartHue = updateStartHue;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static ColorLoopUpdateFlags fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new ColorLoopUpdateFlags(keys[0], keys[1], keys[2], keys[3]);
        }
    }

    public static class Feature {
        public boolean hueAndSaturation;
        public boolean enhancedHue;
        public boolean colorLoop;
        public boolean xy;
        public boolean colorTemperature;

        public Feature(boolean hueAndSaturation, boolean enhancedHue, boolean colorLoop, boolean xy,
                boolean colorTemperature) {
            this.hueAndSaturation = hueAndSaturation;
            this.enhancedHue = enhancedHue;
            this.colorLoop = colorLoop;
            this.xy = xy;
            this.colorTemperature = colorTemperature;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3], keys[4]);
        }
    }

    public Integer currentHue; // 0 int8u reportable
    public Integer currentSaturation; // 1 int8u reportable
    public Integer remainingTime; // 2 int16u reportable
    public Integer currentX; // 3 int16u reportable
    public Integer currentY; // 4 int16u reportable
    public Integer driftCompensation; // 5 enum8 reportable
    public String compensationText; // 6 char_string reportable
    public Integer colorTemperatureMireds; // 7 int16u reportable
    public Integer colorMode; // 8 enum8 reportable
    public Map<String, Boolean> options; // 15 bitmap8 reportable writable
    public Integer numberOfPrimaries; // 16 int8u reportable
    public Integer primary1X; // 17 int16u reportable
    public Integer primary1Y; // 18 int16u reportable
    public Integer primary1Intensity; // 19 int8u reportable
    public Integer primary2X; // 21 int16u reportable
    public Integer primary2Y; // 22 int16u reportable
    public Integer primary2Intensity; // 23 int8u reportable
    public Integer primary3X; // 25 int16u reportable
    public Integer primary3Y; // 26 int16u reportable
    public Integer primary3Intensity; // 27 int8u reportable
    public Integer primary4X; // 32 int16u reportable
    public Integer primary4Y; // 33 int16u reportable
    public Integer primary4Intensity; // 34 int8u reportable
    public Integer primary5X; // 36 int16u reportable
    public Integer primary5Y; // 37 int16u reportable
    public Integer primary5Intensity; // 38 int8u reportable
    public Integer primary6X; // 40 int16u reportable
    public Integer primary6Y; // 41 int16u reportable
    public Integer primary6Intensity; // 42 int8u reportable
    public Integer whitePointX; // 48 int16u reportable writable
    public Integer whitePointY; // 49 int16u reportable writable
    public Integer colorPointRX; // 50 int16u reportable writable
    public Integer colorPointRY; // 51 int16u reportable writable
    public Integer colorPointRIntensity; // 52 int8u reportable writable
    public Integer colorPointGX; // 54 int16u reportable writable
    public Integer colorPointGY; // 55 int16u reportable writable
    public Integer colorPointGIntensity; // 56 int8u reportable writable
    public Integer colorPointBX; // 58 int16u reportable writable
    public Integer colorPointBY; // 59 int16u reportable writable
    public Integer colorPointBIntensity; // 60 int8u reportable writable
    public Integer enhancedCurrentHue; // 16384 int16u reportable
    public Integer enhancedColorMode; // 16385 enum8 reportable
    public Integer colorLoopActive; // 16386 int8u reportable
    public Integer colorLoopDirection; // 16387 int8u reportable
    public Integer colorLoopTime; // 16388 int16u reportable
    public Integer colorLoopStartEnhancedHue; // 16389 int16u reportable
    public Integer colorLoopStoredEnhancedHue; // 16390 int16u reportable
    public Map<String, Boolean> colorCapabilities; // 16394 bitmap16 reportable
    public Integer colorTempPhysicalMinMireds; // 16395 int16u reportable
    public Integer colorTempPhysicalMaxMireds; // 16396 int16u reportable
    public Integer coupleColorTempToLevelMinMireds; // 16397 int16u reportable
    public Integer startUpColorTemperatureMireds; // 16400 int16u reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ColorControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 1, "ColorControl");
    }

    public void moveToHue(MatterClient client, Integer hue, HueDirection direction, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _hue = hue;
        final HueDirection _direction = direction;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer hue = _hue;
            public HueDirection direction = _direction;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToHue", o);
    }

    public void moveHue(MatterClient client, HueMoveMode moveMode, Integer rate, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveHue", o);
    }

    public void stepHue(MatterClient client, HueStepMode stepMode, Integer stepSize, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepHue", o);
    }

    public void moveToSaturation(MatterClient client, Integer saturation, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToSaturation", o);
    }

    public void moveSaturation(MatterClient client, SaturationMoveMode moveMode, Integer rate,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final SaturationMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public SaturationMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveSaturation", o);
    }

    public void stepSaturation(MatterClient client, SaturationStepMode stepMode, Integer stepSize,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final SaturationStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public SaturationStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepSaturation", o);
    }

    public void moveToHueAndSaturation(MatterClient client, Integer hue, Integer saturation, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _hue = hue;
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer hue = _hue;
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToHueAndSaturation", o);
    }

    public void moveToColor(MatterClient client, Integer colorX, Integer colorY, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _colorX = colorX;
        final Integer _colorY = colorY;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer colorX = _colorX;
            public Integer colorY = _colorY;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToColor", o);
    }

    public void moveColor(MatterClient client, Integer rateX, Integer rateY, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _rateX = rateX;
        final Integer _rateY = rateY;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer rateX = _rateX;
            public Integer rateY = _rateY;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveColor", o);
    }

    public void stepColor(MatterClient client, Integer stepX, Integer stepY, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _stepX = stepX;
        final Integer _stepY = stepY;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer stepX = _stepX;
            public Integer stepY = _stepY;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepColor", o);
    }

    public void moveToColorTemperature(MatterClient client, Integer colorTemperatureMireds, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final Integer _colorTemperatureMireds = colorTemperatureMireds;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer colorTemperatureMireds = _colorTemperatureMireds;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToColorTemperature", o);
    }

    public void enhancedMoveToHue(MatterClient client, Integer enhancedHue, HueDirection direction,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final Integer _enhancedHue = enhancedHue;
        final HueDirection _direction = direction;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer enhancedHue = _enhancedHue;
            public HueDirection direction = _direction;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveToHue", o);
    }

    public void enhancedMoveHue(MatterClient client, HueMoveMode moveMode, Integer rate,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveHue", o);
    }

    public void enhancedStepHue(MatterClient client, HueStepMode stepMode, Integer stepSize, Integer transitionTime,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedStepHue", o);
    }

    public void enhancedMoveToHueAndSaturation(MatterClient client, Integer enhancedHue, Integer saturation,
            Integer transitionTime, Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride)
            throws Exception {
        final Integer _enhancedHue = enhancedHue;
        final Integer _saturation = saturation;
        final Integer _transitionTime = transitionTime;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer enhancedHue = _enhancedHue;
            public Integer saturation = _saturation;
            public Integer transitionTime = _transitionTime;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "enhancedMoveToHueAndSaturation", o);
    }

    public void colorLoopSet(MatterClient client, ColorLoopUpdateFlags updateFlags, ColorLoopAction action,
            ColorLoopDirection direction, Integer time, Integer startHue, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final ColorLoopUpdateFlags _updateFlags = updateFlags;
        final ColorLoopAction _action = action;
        final ColorLoopDirection _direction = direction;
        final Integer _time = time;
        final Integer _startHue = startHue;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public ColorLoopUpdateFlags updateFlags = _updateFlags;
            public ColorLoopAction action = _action;
            public ColorLoopDirection direction = _direction;
            public Integer time = _time;
            public Integer startHue = _startHue;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "colorLoopSet", o);
    }

    public void stopMoveStep(MatterClient client, Map<String, Boolean> optionsMask,
            Map<String, Boolean> optionsOverride) throws Exception {
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stopMoveStep", o);
    }

    public void moveColorTemperature(MatterClient client, HueMoveMode moveMode, Integer rate,
            Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueMoveMode _moveMode = moveMode;
        final Integer _rate = rate;
        final Integer _colorTemperatureMinimumMireds = colorTemperatureMinimumMireds;
        final Integer _colorTemperatureMaximumMireds = colorTemperatureMaximumMireds;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueMoveMode moveMode = _moveMode;
            public Integer rate = _rate;
            public Integer colorTemperatureMinimumMireds = _colorTemperatureMinimumMireds;
            public Integer colorTemperatureMaximumMireds = _colorTemperatureMaximumMireds;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveColorTemperature", o);
    }

    public void stepColorTemperature(MatterClient client, HueStepMode stepMode, Integer stepSize,
            Integer transitionTime, Integer colorTemperatureMinimumMireds, Integer colorTemperatureMaximumMireds,
            Map<String, Boolean> optionsMask, Map<String, Boolean> optionsOverride) throws Exception {
        final HueStepMode _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final Integer _colorTemperatureMinimumMireds = colorTemperatureMinimumMireds;
        final Integer _colorTemperatureMaximumMireds = colorTemperatureMaximumMireds;
        final Map<String, Boolean> _optionsMask = optionsMask;
        final Map<String, Boolean> _optionsOverride = optionsOverride;
        Object o = new Object() {
            public HueStepMode stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public Integer colorTemperatureMinimumMireds = _colorTemperatureMinimumMireds;
            public Integer colorTemperatureMaximumMireds = _colorTemperatureMaximumMireds;
            public Map<String, Boolean> optionsMask = _optionsMask;
            public Map<String, Boolean> optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepColorTemperature", o);
    }

    public String toString() {
        String str = "";
        str += "currentHue : " + currentHue + "\n";
        str += "currentSaturation : " + currentSaturation + "\n";
        str += "remainingTime : " + remainingTime + "\n";
        str += "currentX : " + currentX + "\n";
        str += "currentY : " + currentY + "\n";
        str += "driftCompensation : " + driftCompensation + "\n";
        str += "compensationText : " + compensationText + "\n";
        str += "colorTemperatureMireds : " + colorTemperatureMireds + "\n";
        str += "colorMode : " + colorMode + "\n";
        str += "options : " + options + "\n";
        str += "numberOfPrimaries : " + numberOfPrimaries + "\n";
        str += "primary1X : " + primary1X + "\n";
        str += "primary1Y : " + primary1Y + "\n";
        str += "primary1Intensity : " + primary1Intensity + "\n";
        str += "primary2X : " + primary2X + "\n";
        str += "primary2Y : " + primary2Y + "\n";
        str += "primary2Intensity : " + primary2Intensity + "\n";
        str += "primary3X : " + primary3X + "\n";
        str += "primary3Y : " + primary3Y + "\n";
        str += "primary3Intensity : " + primary3Intensity + "\n";
        str += "primary4X : " + primary4X + "\n";
        str += "primary4Y : " + primary4Y + "\n";
        str += "primary4Intensity : " + primary4Intensity + "\n";
        str += "primary5X : " + primary5X + "\n";
        str += "primary5Y : " + primary5Y + "\n";
        str += "primary5Intensity : " + primary5Intensity + "\n";
        str += "primary6X : " + primary6X + "\n";
        str += "primary6Y : " + primary6Y + "\n";
        str += "primary6Intensity : " + primary6Intensity + "\n";
        str += "whitePointX : " + whitePointX + "\n";
        str += "whitePointY : " + whitePointY + "\n";
        str += "colorPointRX : " + colorPointRX + "\n";
        str += "colorPointRY : " + colorPointRY + "\n";
        str += "colorPointRIntensity : " + colorPointRIntensity + "\n";
        str += "colorPointGX : " + colorPointGX + "\n";
        str += "colorPointGY : " + colorPointGY + "\n";
        str += "colorPointGIntensity : " + colorPointGIntensity + "\n";
        str += "colorPointBX : " + colorPointBX + "\n";
        str += "colorPointBY : " + colorPointBY + "\n";
        str += "colorPointBIntensity : " + colorPointBIntensity + "\n";
        str += "enhancedCurrentHue : " + enhancedCurrentHue + "\n";
        str += "enhancedColorMode : " + enhancedColorMode + "\n";
        str += "colorLoopActive : " + colorLoopActive + "\n";
        str += "colorLoopDirection : " + colorLoopDirection + "\n";
        str += "colorLoopTime : " + colorLoopTime + "\n";
        str += "colorLoopStartEnhancedHue : " + colorLoopStartEnhancedHue + "\n";
        str += "colorLoopStoredEnhancedHue : " + colorLoopStoredEnhancedHue + "\n";
        str += "colorCapabilities : " + colorCapabilities + "\n";
        str += "colorTempPhysicalMinMireds : " + colorTempPhysicalMinMireds + "\n";
        str += "colorTempPhysicalMaxMireds : " + colorTempPhysicalMaxMireds + "\n";
        str += "coupleColorTempToLevelMinMireds : " + coupleColorTempToLevelMinMireds + "\n";
        str += "startUpColorTemperatureMireds : " + startUpColorTemperatureMireds + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
