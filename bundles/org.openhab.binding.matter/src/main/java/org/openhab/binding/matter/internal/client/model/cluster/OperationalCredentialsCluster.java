/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * OperationalCredentials
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OperationalCredentialsCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OPERATIONAL_CREDENTIALS_CLUSTER";
    public static final int CLUSTER_ID = 0x003E;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(59, "NOCs"), entry(138, "fabrics"), entry(208, "supportedFabrics"),
                entry(271, "commissionedFabrics"), entry(323, "trustedRootCertificates"),
                entry(365, "currentFabricIndex"), entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"),
                entry(9, "eventList"), entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(35, "attestationRequest"), entry(88, "attestationResponse"),
                entry(132, "certificateChainRequest"), entry(163, "certificateChainResponse"), entry(187, "CSRRequest"),
                entry(208, "CSRResponse"), entry(222, "addNOC"), entry(234, "updateNOC"), entry(243, "NOCResponse"),
                entry(251, "updateFabricLabel"), entry(258, "removeFabric"), entry(265, "addTrustedRootCertificate"));
    }

    class FabricDescriptorStruct implements JsonSerializable {
        public String rootPublicKey; // octet_string
        public Integer vendorID; // vendor_id
        public Long fabricID; // fabric_id
        public Long nodeID; // node_id
        public String label; // char_string
        public Integer fabricIndex; // fabric_idx

        public FabricDescriptorStruct(String rootPublicKey, Integer vendorID, Long fabricID, Long nodeID, String label,
                Integer fabricIndex) {
            this.rootPublicKey = rootPublicKey;
            this.vendorID = vendorID;
            this.fabricID = fabricID;
            this.nodeID = nodeID;
            this.label = label;
            this.fabricIndex = fabricIndex;
        }

        public String toJson() {
            String out = "{";
            out += "\"rootPublicKey\" : " + rootPublicKey + ",";
            out += "\"vendorID\" : " + vendorID + ",";
            out += "\"fabricID\" : " + fabricID + ",";
            out += "\"nodeID\" : " + nodeID + ",";
            out += "\"label\" : " + label + ",";
            out += "\"fabricIndex\" : " + fabricIndex + "";
            out += "}";
            return out;
        }
    }

    class NOCStruct implements JsonSerializable {
        public String noc; // octet_string
        public String icac; // octet_string
        public Integer fabricIndex; // fabric_idx

        public NOCStruct(String noc, String icac, Integer fabricIndex) {
            this.noc = noc;
            this.icac = icac;
            this.fabricIndex = fabricIndex;
        }

        public String toJson() {
            String out = "{";
            out += "\"noc\" : " + noc + ",";
            out += "\"icac\" : " + icac + ",";
            out += "\"fabricIndex\" : " + fabricIndex + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum CertificateChainTypeEnum implements JsonSerializable {
        DACCERTIFICATE(1, "DACCertificate"),
        PAICERTIFICATE(2, "PAICertificate"),
        UNKNOWN_VALUE(0, "UnknownValue");

        public final int value;
        public final String label;

        private CertificateChainTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum NodeOperationalCertStatusEnum implements JsonSerializable {
        OK(0, "OK"),
        INVALIDPUBLICKEY(1, "InvalidPublicKey"),
        INVALIDNODEOPID(2, "InvalidNodeOpId"),
        INVALIDNOC(3, "InvalidNOC"),
        MISSINGCSR(4, "MissingCsr"),
        TABLEFULL(5, "TableFull"),
        INVALIDADMINSUBJECT(6, "InvalidAdminSubject"),
        FABRICCONFLICT(9, "FabricConflict"),
        LABELCONFLICT(10, "LabelConflict"),
        INVALIDFABRICINDEX(11, "InvalidFabricIndex"),
        UNKNOWN_VALUE(7, "UnknownValue");

        public final int value;
        public final String label;

        private NodeOperationalCertStatusEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public NOCStruct[] NOCs; // 59 NOCStruct
    public FabricDescriptorStruct[] fabrics; // 138 FabricDescriptorStruct
    public Integer supportedFabrics; // 208 int8u
    public Integer commissionedFabrics; // 271 int8u
    public String trustedRootCertificates; // 323 octet_string
    public Integer currentFabricIndex; // 365 int8u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public OperationalCredentialsCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 54, "OperationalCredentials");
    }

    public void attestationRequest(MatterClient client, String attestationNonce) throws Exception {
        final String _attestationNonce = attestationNonce;
        Object o = new Object() {
            public String attestationNonce = _attestationNonce;
        };
        sendCommand(client, "attestationRequest", o);
    }

    public void attestationResponse(MatterClient client, String attestationElements, String attestationSignature)
            throws Exception {
        final String _attestationElements = attestationElements;
        final String _attestationSignature = attestationSignature;
        Object o = new Object() {
            public String attestationElements = _attestationElements;
            public String attestationSignature = _attestationSignature;
        };
        sendCommand(client, "attestationResponse", o);
    }

    public void certificateChainRequest(MatterClient client, CertificateChainTypeEnum certificateType)
            throws Exception {
        final CertificateChainTypeEnum _certificateType = certificateType;
        Object o = new Object() {
            public CertificateChainTypeEnum certificateType = _certificateType;
        };
        sendCommand(client, "certificateChainRequest", o);
    }

    public void certificateChainResponse(MatterClient client, String certificate) throws Exception {
        final String _certificate = certificate;
        Object o = new Object() {
            public String certificate = _certificate;
        };
        sendCommand(client, "certificateChainResponse", o);
    }

    public void CSRRequest(MatterClient client, String CSRNonce, Boolean isForUpdateNOC) throws Exception {
        final String _CSRNonce = CSRNonce;
        final Boolean _isForUpdateNOC = isForUpdateNOC;
        Object o = new Object() {
            public String CSRNonce = _CSRNonce;
            public Boolean isForUpdateNOC = _isForUpdateNOC;
        };
        sendCommand(client, "CSRRequest", o);
    }

    public void CSRResponse(MatterClient client, String NOCSRElements, String attestationSignature) throws Exception {
        final String _NOCSRElements = NOCSRElements;
        final String _attestationSignature = attestationSignature;
        Object o = new Object() {
            public String NOCSRElements = _NOCSRElements;
            public String attestationSignature = _attestationSignature;
        };
        sendCommand(client, "CSRResponse", o);
    }

    public void addNOC(MatterClient client, String NOCValue, String ICACValue, String IPKValue, Long caseAdminSubject,
            Integer adminVendorId) throws Exception {
        final String _NOCValue = NOCValue;
        final String _ICACValue = ICACValue;
        final String _IPKValue = IPKValue;
        final Long _caseAdminSubject = caseAdminSubject;
        final Integer _adminVendorId = adminVendorId;
        Object o = new Object() {
            public String NOCValue = _NOCValue;
            public String ICACValue = _ICACValue;
            public String IPKValue = _IPKValue;
            public Long caseAdminSubject = _caseAdminSubject;
            public Integer adminVendorId = _adminVendorId;
        };
        sendCommand(client, "addNOC", o);
    }

    public void updateNOC(MatterClient client, String NOCValue, String ICACValue) throws Exception {
        final String _NOCValue = NOCValue;
        final String _ICACValue = ICACValue;
        Object o = new Object() {
            public String NOCValue = _NOCValue;
            public String ICACValue = _ICACValue;
        };
        sendCommand(client, "updateNOC", o);
    }

    public void NOCResponse(MatterClient client, NodeOperationalCertStatusEnum statusCode, Integer fabricIndex,
            String debugText) throws Exception {
        final NodeOperationalCertStatusEnum _statusCode = statusCode;
        final Integer _fabricIndex = fabricIndex;
        final String _debugText = debugText;
        Object o = new Object() {
            public NodeOperationalCertStatusEnum statusCode = _statusCode;
            public Integer fabricIndex = _fabricIndex;
            public String debugText = _debugText;
        };
        sendCommand(client, "NOCResponse", o);
    }

    public void updateFabricLabel(MatterClient client, String label) throws Exception {
        final String _label = label;
        Object o = new Object() {
            public String label = _label;
        };
        sendCommand(client, "updateFabricLabel", o);
    }

    public void removeFabric(MatterClient client, Integer fabricIndex) throws Exception {
        final Integer _fabricIndex = fabricIndex;
        Object o = new Object() {
            public Integer fabricIndex = _fabricIndex;
        };
        sendCommand(client, "removeFabric", o);
    }

    public void addTrustedRootCertificate(MatterClient client, String rootCACertificate) throws Exception {
        final String _rootCACertificate = rootCACertificate;
        Object o = new Object() {
            public String rootCACertificate = _rootCACertificate;
        };
        sendCommand(client, "addTrustedRootCertificate", o);
    }

    public String toString() {
        String str = "";
        str += "NOCs : " + NOCs + "\n";
        str += "fabrics : " + fabrics + "\n";
        str += "supportedFabrics : " + supportedFabrics + "\n";
        str += "commissionedFabrics : " + commissionedFabrics + "\n";
        str += "trustedRootCertificates : " + trustedRootCertificates + "\n";
        str += "currentFabricIndex : " + currentFabricIndex + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
