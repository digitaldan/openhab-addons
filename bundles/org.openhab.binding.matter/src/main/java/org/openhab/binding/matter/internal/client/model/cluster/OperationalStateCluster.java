/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * OperationalState
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OperationalStateCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OPERATIONAL_STATE_CLUSTER";
    public static final int CLUSTER_ID = 0x0060;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(52, "phaseList"), entry(132, "currentPhase"),
                entry(201, "countdownTime"), entry(264, "operationalStateList"), entry(317, "operationalState"),
                entry(359, "operationalError"), entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"),
                entry(9, "eventList"), entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(38, "pause"), entry(91, "stop"), entry(134, "start"),
                entry(165, "resume"), entry(189, "operationalCommandResponse"));
    }

    class ErrorStateStruct implements JsonSerializable {
        public Integer errorStateID; // enum8
        public String errorStateLabel; // char_string
        public String errorStateDetails; // char_string

        public ErrorStateStruct(Integer errorStateID, String errorStateLabel, String errorStateDetails) {
            this.errorStateID = errorStateID;
            this.errorStateLabel = errorStateLabel;
            this.errorStateDetails = errorStateDetails;
        }

        public String toJson() {
            String out = "{";
            out += "\"errorStateID\" : " + errorStateID + ",";
            out += "\"errorStateLabel\" : " + errorStateLabel + ",";
            out += "\"errorStateDetails\" : " + errorStateDetails + "";
            out += "}";
            return out;
        }
    }

    class OperationalStateStruct implements JsonSerializable {
        public Integer operationalStateID; // enum8
        public String operationalStateLabel; // char_string

        public OperationalStateStruct(Integer operationalStateID, String operationalStateLabel) {
            this.operationalStateID = operationalStateID;
            this.operationalStateLabel = operationalStateLabel;
        }

        public String toJson() {
            String out = "{";
            out += "\"operationalStateID\" : " + operationalStateID + ",";
            out += "\"operationalStateLabel\" : " + operationalStateLabel + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum ErrorStateEnum implements JsonSerializable {
        NOERROR(0, "NoError"),
        UNABLETOSTARTORRESUME(1, "UnableToStartOrResume"),
        UNABLETOCOMPLETEOPERATION(2, "UnableToCompleteOperation"),
        COMMANDINVALIDINSTATE(3, "CommandInvalidInState"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private ErrorStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum OperationalStateEnum implements JsonSerializable {
        STOPPED(0, "Stopped"),
        RUNNING(1, "Running"),
        PAUSED(2, "Paused"),
        ERROR(3, "Error"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private OperationalStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public String phaseList; // 52 char_string
    public Integer currentPhase; // 132 int8u
    public Integer countdownTime; // 201 elapsed_s
    public OperationalStateStruct[] operationalStateList; // 264 OperationalStateStruct
    public OperationalStateEnum operationalState; // 317 OperationalStateEnum
    public ErrorStateStruct[] operationalError; // 359 ErrorStateStruct
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public OperationalStateCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 45, "OperationalState");
    }

    public void pause(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "pause", o);
    }

    public void stop(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "stop", o);
    }

    public void start(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "start", o);
    }

    public void resume(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "resume", o);
    }

    public void operationalCommandResponse(MatterClient client, ErrorStateStruct[] commandResponseState)
            throws Exception {
        final ErrorStateStruct[] _commandResponseState = commandResponseState;
        Object o = new Object() {
            public ErrorStateStruct[] commandResponseState = _commandResponseState;
        };
        sendCommand(client, "operationalCommandResponse", o);
    }

    public String toString() {
        String str = "";
        str += "phaseList : " + phaseList + "\n";
        str += "currentPhase : " + currentPhase + "\n";
        str += "countdownTime : " + countdownTime + "\n";
        str += "operationalStateList : " + operationalStateList + "\n";
        str += "operationalState : " + operationalState + "\n";
        str += "operationalError : " + operationalError + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
