/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * Thermostat
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ThermostatCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "THERMOSTAT_CLUSTER";
    public static final int CLUSTER_ID = 0x0201;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(104, "localTemperature"), entry(181, "outdoorTemperature"),
                entry(246, "occupancy"), entry(302, "absMinHeatSetpointLimit"), entry(347, "absMaxHeatSetpointLimit"),
                entry(385, "absMinCoolSetpointLimit"), entry(417, "absMaxCoolSetpointLimit"),
                entry(448, "PICoolingDemand"), entry(475, "PIHeatingDemand"), entry(499, "HVACSystemTypeConfiguration"),
                entry(520, "localTemperatureCalibration"), entry(542, "occupiedCoolingSetpoint"),
                entry(561, "occupiedHeatingSetpoint"), entry(576, "unoccupiedCoolingSetpoint"),
                entry(588, "unoccupiedHeatingSetpoint"), entry(601, "minHeatSetpointLimit"),
                entry(614, "maxHeatSetpointLimit"), entry(626, "minCoolSetpointLimit"),
                entry(638, "maxCoolSetpointLimit"), entry(650, "minSetpointDeadBand"), entry(662, "remoteSensing"),
                entry(674, "controlSequenceOfOperation"), entry(685, "systemMode"), entry(694, "thermostatRunningMode"),
                entry(703, "startOfWeek"), entry(711, "numberOfWeeklyTransitions"),
                entry(719, "numberOfDailyTransitions"), entry(727, "temperatureSetpointHold"),
                entry(735, "temperatureSetpointHoldDuration"), entry(743, "thermostatProgrammingOperationMode"),
                entry(751, "thermostatRunningState"), entry(759, "setpointChangeSource"),
                entry(766, "setpointChangeAmount"), entry(773, "setpointChangeSourceTimestamp"),
                entry(780, "occupiedSetback"), entry(787, "occupiedSetbackMin"), entry(792, "occupiedSetbackMax"),
                entry(796, "unoccupiedSetback"), entry(801, "unoccupiedSetbackMin"), entry(806, "unoccupiedSetbackMax"),
                entry(811, "emergencyHeatDelta"), entry(816, "ACType"), entry(821, "ACCapacity"),
                entry(826, "ACRefrigerantType"), entry(831, "ACCompressorType"), entry(836, "ACErrorCode"),
                entry(841, "ACLouverPosition"), entry(845, "ACCoilTemperature"), entry(850, "ACCapacityformat"),
                entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"), entry(9, "eventList"),
                entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(65, "setpointRaiseLower"), entry(199, "getWeeklyScheduleResponse"),
                entry(115, "setWeeklySchedule"), entry(149, "getWeeklySchedule"), entry(176, "clearWeeklySchedule"));
    }

    class ThermostatScheduleTransition implements JsonSerializable {
        public Integer transitionTime; // int16u
        public Integer heatSetpoint; // int16s
        public Integer coolSetpoint; // int16s

        public ThermostatScheduleTransition(Integer transitionTime, Integer heatSetpoint, Integer coolSetpoint) {
            this.transitionTime = transitionTime;
            this.heatSetpoint = heatSetpoint;
            this.coolSetpoint = coolSetpoint;
        }

        public String toJson() {
            String out = "{";
            out += "\"transitionTime\" : " + transitionTime + ",";
            out += "\"heatSetpoint\" : " + heatSetpoint + ",";
            out += "\"coolSetpoint\" : " + coolSetpoint + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum SetpointAdjustMode implements JsonSerializable {
        HEAT(0, "Heat"),
        COOL(1, "Cool"),
        BOTH(2, "Both"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private SetpointAdjustMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ThermostatControlSequence implements JsonSerializable {
        COOLINGONLY(0, "CoolingOnly"),
        COOLINGWITHREHEAT(1, "CoolingWithReheat"),
        HEATINGONLY(2, "HeatingOnly"),
        HEATINGWITHREHEAT(3, "HeatingWithReheat"),
        COOLINGANDHEATING(4, "CoolingAndHeating"),
        COOLINGANDHEATINGWITHREHEAT(5, "CoolingAndHeatingWithReheat"),
        UNKNOWN_VALUE(6, "UnknownValue");

        public final int value;
        public final String label;

        private ThermostatControlSequence(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ThermostatRunningMode implements JsonSerializable {
        OFF(0, "Off"),
        COOL(3, "Cool"),
        HEAT(4, "Heat"),
        UNKNOWN_VALUE(1, "UnknownValue");

        public final int value;
        public final String label;

        private ThermostatRunningMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ThermostatSystemMode implements JsonSerializable {
        OFF(0, "Off"),
        AUTO(1, "Auto"),
        COOL(3, "Cool"),
        HEAT(4, "Heat"),
        EMERGENCYHEAT(5, "EmergencyHeat"),
        PRECOOLING(6, "Precooling"),
        FANONLY(7, "FanOnly"),
        DRY(8, "Dry"),
        SLEEP(9, "Sleep"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private ThermostatSystemMode(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class DayOfWeek implements JsonSerializable {
        public boolean sunday;
        public boolean monday;
        public boolean tuesday;
        public boolean wednesday;
        public boolean thursday;
        public boolean friday;
        public boolean saturday;
        public boolean away;

        public DayOfWeek(boolean sunday, boolean monday, boolean tuesday, boolean wednesday, boolean thursday,
                boolean friday, boolean saturday, boolean away) {
            this.sunday = sunday;
            this.monday = monday;
            this.tuesday = tuesday;
            this.wednesday = wednesday;
            this.thursday = thursday;
            this.friday = friday;
            this.saturday = saturday;
            this.away = away;
        }

        public String toJson() {
            String out = "{";
            out += "\"sunday\" : " + sunday + ",";
            out += "\"monday\" : " + monday + ",";
            out += "\"tuesday\" : " + tuesday + ",";
            out += "\"wednesday\" : " + wednesday + ",";
            out += "\"thursday\" : " + thursday + ",";
            out += "\"friday\" : " + friday + ",";
            out += "\"saturday\" : " + saturday + ",";
            out += "\"away\" : " + away + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static DayOfWeek fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new DayOfWeek(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5], keys[6], keys[7]);
        }
    }

    public static class Feature implements JsonSerializable {
        public boolean heating;
        public boolean cooling;
        public boolean occupancy;
        public boolean scheduleConfiguration;
        public boolean setback;
        public boolean autoMode;
        public boolean localTemperatureNotExposed;

        public Feature(boolean heating, boolean cooling, boolean occupancy, boolean scheduleConfiguration,
                boolean setback, boolean autoMode, boolean localTemperatureNotExposed) {
            this.heating = heating;
            this.cooling = cooling;
            this.occupancy = occupancy;
            this.scheduleConfiguration = scheduleConfiguration;
            this.setback = setback;
            this.autoMode = autoMode;
            this.localTemperatureNotExposed = localTemperatureNotExposed;
        }

        public String toJson() {
            String out = "{";
            out += "\"heating\" : " + heating + ",";
            out += "\"cooling\" : " + cooling + ",";
            out += "\"occupancy\" : " + occupancy + ",";
            out += "\"scheduleConfiguration\" : " + scheduleConfiguration + ",";
            out += "\"setback\" : " + setback + ",";
            out += "\"autoMode\" : " + autoMode + ",";
            out += "\"localTemperatureNotExposed\" : " + localTemperatureNotExposed + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5], keys[6]);
        }
    }

    public static class ModeForSequence implements JsonSerializable {
        public boolean heatSetpointPresent;
        public boolean coolSetpointPresent;

        public ModeForSequence(boolean heatSetpointPresent, boolean coolSetpointPresent) {
            this.heatSetpointPresent = heatSetpointPresent;
            this.coolSetpointPresent = coolSetpointPresent;
        }

        public String toJson() {
            String out = "{";
            out += "\"heatSetpointPresent\" : " + heatSetpointPresent + ",";
            out += "\"coolSetpointPresent\" : " + coolSetpointPresent + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static ModeForSequence fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new ModeForSequence(keys[0], keys[1]);
        }
    }

    public Integer localTemperature; // 104 int16s
    public Integer outdoorTemperature; // 181 int16s
    public Map<String, Boolean> occupancy; // 246 bitmap8
    public Integer absMinHeatSetpointLimit; // 302 int16s
    public Integer absMaxHeatSetpointLimit; // 347 int16s
    public Integer absMinCoolSetpointLimit; // 385 int16s
    public Integer absMaxCoolSetpointLimit; // 417 int16s
    public Integer PICoolingDemand; // 448 int8u
    public Integer PIHeatingDemand; // 475 int8u
    public Map<String, Boolean> HVACSystemTypeConfiguration; // 499 bitmap8
    public Integer localTemperatureCalibration; // 520 int8s
    public Integer occupiedCoolingSetpoint; // 542 int16s
    public Integer occupiedHeatingSetpoint; // 561 int16s
    public Integer unoccupiedCoolingSetpoint; // 576 int16s
    public Integer unoccupiedHeatingSetpoint; // 588 int16s
    public Integer minHeatSetpointLimit; // 601 int16s
    public Integer maxHeatSetpointLimit; // 614 int16s
    public Integer minCoolSetpointLimit; // 626 int16s
    public Integer maxCoolSetpointLimit; // 638 int16s
    public Integer minSetpointDeadBand; // 650 int8s
    public Map<String, Boolean> remoteSensing; // 662 bitmap8
    public ThermostatControlSequence controlSequenceOfOperation; // 674 ThermostatControlSequence
    public Integer systemMode; // 685 enum8
    public Integer thermostatRunningMode; // 694 enum8
    public Integer startOfWeek; // 703 enum8
    public Integer numberOfWeeklyTransitions; // 711 int8u
    public Integer numberOfDailyTransitions; // 719 int8u
    public Integer temperatureSetpointHold; // 727 enum8
    public Integer temperatureSetpointHoldDuration; // 735 int16u
    public Map<String, Boolean> thermostatProgrammingOperationMode; // 743 bitmap8
    public Map<String, Boolean> thermostatRunningState; // 751 bitmap16
    public Integer setpointChangeSource; // 759 enum8
    public Integer setpointChangeAmount; // 766 int16s
    public Integer setpointChangeSourceTimestamp; // 773 epoch_s
    public Integer occupiedSetback; // 780 int8u
    public Integer occupiedSetbackMin; // 787 int8u
    public Integer occupiedSetbackMax; // 792 int8u
    public Integer unoccupiedSetback; // 796 int8u
    public Integer unoccupiedSetbackMin; // 801 int8u
    public Integer unoccupiedSetbackMax; // 806 int8u
    public Integer emergencyHeatDelta; // 811 int8u
    public Integer ACType; // 816 enum8
    public Integer ACCapacity; // 821 int16u
    public Integer ACRefrigerantType; // 826 enum8
    public Integer ACCompressorType; // 831 enum8
    public Map<String, Boolean> ACErrorCode; // 836 bitmap32
    public Integer ACLouverPosition; // 841 enum8
    public Integer ACCoilTemperature; // 845 int16s
    public Integer ACCapacityformat; // 850 enum8
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public ThermostatCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 95, "Thermostat");
    }

    public void setpointRaiseLower(MatterClient client, SetpointAdjustMode mode, Integer amount) throws Exception {
        final SetpointAdjustMode _mode = mode;
        final Integer _amount = amount;
        Object o = new Object() {
            public SetpointAdjustMode mode = _mode;
            public Integer amount = _amount;
        };
        sendCommand(client, "setpointRaiseLower", o);
    }

    public void getWeeklyScheduleResponse(MatterClient client, Integer numberOfTransitionsForSequence,
            DayOfWeek dayOfWeekForSequence, ModeForSequence modeForSequence, ThermostatScheduleTransition transitions)
            throws Exception {
        final Integer _numberOfTransitionsForSequence = numberOfTransitionsForSequence;
        final DayOfWeek _dayOfWeekForSequence = dayOfWeekForSequence;
        final ModeForSequence _modeForSequence = modeForSequence;
        final ThermostatScheduleTransition _transitions = transitions;
        Object o = new Object() {
            public Integer numberOfTransitionsForSequence = _numberOfTransitionsForSequence;
            public DayOfWeek dayOfWeekForSequence = _dayOfWeekForSequence;
            public ModeForSequence modeForSequence = _modeForSequence;
            public ThermostatScheduleTransition transitions = _transitions;
        };
        sendCommand(client, "getWeeklyScheduleResponse", o);
    }

    public void setWeeklySchedule(MatterClient client, Integer numberOfTransitionsForSequence,
            DayOfWeek dayOfWeekForSequence, ModeForSequence modeForSequence, ThermostatScheduleTransition transitions)
            throws Exception {
        final Integer _numberOfTransitionsForSequence = numberOfTransitionsForSequence;
        final DayOfWeek _dayOfWeekForSequence = dayOfWeekForSequence;
        final ModeForSequence _modeForSequence = modeForSequence;
        final ThermostatScheduleTransition _transitions = transitions;
        Object o = new Object() {
            public Integer numberOfTransitionsForSequence = _numberOfTransitionsForSequence;
            public DayOfWeek dayOfWeekForSequence = _dayOfWeekForSequence;
            public ModeForSequence modeForSequence = _modeForSequence;
            public ThermostatScheduleTransition transitions = _transitions;
        };
        sendCommand(client, "setWeeklySchedule", o);
    }

    public void getWeeklySchedule(MatterClient client, DayOfWeek daysToReturn, ModeForSequence modeToReturn)
            throws Exception {
        final DayOfWeek _daysToReturn = daysToReturn;
        final ModeForSequence _modeToReturn = modeToReturn;
        Object o = new Object() {
            public DayOfWeek daysToReturn = _daysToReturn;
            public ModeForSequence modeToReturn = _modeToReturn;
        };
        sendCommand(client, "getWeeklySchedule", o);
    }

    public void clearWeeklySchedule(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "clearWeeklySchedule", o);
    }

    public String toString() {
        String str = "";
        str += "localTemperature : " + localTemperature + "\n";
        str += "outdoorTemperature : " + outdoorTemperature + "\n";
        str += "occupancy : " + occupancy + "\n";
        str += "absMinHeatSetpointLimit : " + absMinHeatSetpointLimit + "\n";
        str += "absMaxHeatSetpointLimit : " + absMaxHeatSetpointLimit + "\n";
        str += "absMinCoolSetpointLimit : " + absMinCoolSetpointLimit + "\n";
        str += "absMaxCoolSetpointLimit : " + absMaxCoolSetpointLimit + "\n";
        str += "PICoolingDemand : " + PICoolingDemand + "\n";
        str += "PIHeatingDemand : " + PIHeatingDemand + "\n";
        str += "HVACSystemTypeConfiguration : " + HVACSystemTypeConfiguration + "\n";
        str += "localTemperatureCalibration : " + localTemperatureCalibration + "\n";
        str += "occupiedCoolingSetpoint : " + occupiedCoolingSetpoint + "\n";
        str += "occupiedHeatingSetpoint : " + occupiedHeatingSetpoint + "\n";
        str += "unoccupiedCoolingSetpoint : " + unoccupiedCoolingSetpoint + "\n";
        str += "unoccupiedHeatingSetpoint : " + unoccupiedHeatingSetpoint + "\n";
        str += "minHeatSetpointLimit : " + minHeatSetpointLimit + "\n";
        str += "maxHeatSetpointLimit : " + maxHeatSetpointLimit + "\n";
        str += "minCoolSetpointLimit : " + minCoolSetpointLimit + "\n";
        str += "maxCoolSetpointLimit : " + maxCoolSetpointLimit + "\n";
        str += "minSetpointDeadBand : " + minSetpointDeadBand + "\n";
        str += "remoteSensing : " + remoteSensing + "\n";
        str += "controlSequenceOfOperation : " + controlSequenceOfOperation + "\n";
        str += "systemMode : " + systemMode + "\n";
        str += "thermostatRunningMode : " + thermostatRunningMode + "\n";
        str += "startOfWeek : " + startOfWeek + "\n";
        str += "numberOfWeeklyTransitions : " + numberOfWeeklyTransitions + "\n";
        str += "numberOfDailyTransitions : " + numberOfDailyTransitions + "\n";
        str += "temperatureSetpointHold : " + temperatureSetpointHold + "\n";
        str += "temperatureSetpointHoldDuration : " + temperatureSetpointHoldDuration + "\n";
        str += "thermostatProgrammingOperationMode : " + thermostatProgrammingOperationMode + "\n";
        str += "thermostatRunningState : " + thermostatRunningState + "\n";
        str += "setpointChangeSource : " + setpointChangeSource + "\n";
        str += "setpointChangeAmount : " + setpointChangeAmount + "\n";
        str += "setpointChangeSourceTimestamp : " + setpointChangeSourceTimestamp + "\n";
        str += "occupiedSetback : " + occupiedSetback + "\n";
        str += "occupiedSetbackMin : " + occupiedSetbackMin + "\n";
        str += "occupiedSetbackMax : " + occupiedSetbackMax + "\n";
        str += "unoccupiedSetback : " + unoccupiedSetback + "\n";
        str += "unoccupiedSetbackMin : " + unoccupiedSetbackMin + "\n";
        str += "unoccupiedSetbackMax : " + unoccupiedSetbackMax + "\n";
        str += "emergencyHeatDelta : " + emergencyHeatDelta + "\n";
        str += "ACType : " + ACType + "\n";
        str += "ACCapacity : " + ACCapacity + "\n";
        str += "ACRefrigerantType : " + ACRefrigerantType + "\n";
        str += "ACCompressorType : " + ACCompressorType + "\n";
        str += "ACErrorCode : " + ACErrorCode + "\n";
        str += "ACLouverPosition : " + ACLouverPosition + "\n";
        str += "ACCoilTemperature : " + ACCoilTemperature + "\n";
        str += "ACCapacityformat : " + ACCapacityformat + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
