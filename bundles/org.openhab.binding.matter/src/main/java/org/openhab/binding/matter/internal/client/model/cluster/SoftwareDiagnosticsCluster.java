/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * SoftwareDiagnostics
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class SoftwareDiagnosticsCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "SOFTWARE_DIAGNOSTICS_CLUSTER";
    public static final int CLUSTER_ID = 0x0034;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(80, "threadMetrics"), entry(160, "currentHeapFree"),
                entry(229, "currentHeapUsed"), entry(288, "currentHeapHighWatermark"),
                entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"), entry(9, "eventList"),
                entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(48, "resetWatermarks"));
    }

    class ThreadMetricsStruct implements JsonSerializable {
        public Long id; // int64u
        public String name; // char_string
        public Integer stackFreeCurrent; // int32u
        public Integer stackFreeMinimum; // int32u
        public Integer stackSize; // int32u

        public ThreadMetricsStruct(Long id, String name, Integer stackFreeCurrent, Integer stackFreeMinimum,
                Integer stackSize) {
            this.id = id;
            this.name = name;
            this.stackFreeCurrent = stackFreeCurrent;
            this.stackFreeMinimum = stackFreeMinimum;
            this.stackSize = stackSize;
        }

        public String toJson() {
            String out = "{";
            out += "\"id\" : " + id + ",";
            out += "\"name\" : " + name + ",";
            out += "\"stackFreeCurrent\" : " + stackFreeCurrent + ",";
            out += "\"stackFreeMinimum\" : " + stackFreeMinimum + ",";
            out += "\"stackSize\" : " + stackSize + "";
            out += "}";
            return out;
        }
    }

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean watermarks;

        public Feature(boolean watermarks) {
            this.watermarks = watermarks;
        }

        public String toJson() {
            String out = "{";
            out += "\"watermarks\" : " + watermarks + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public ThreadMetricsStruct[] threadMetrics; // 80 ThreadMetricsStruct
    public Long currentHeapFree; // 160 int64u
    public Long currentHeapUsed; // 229 int64u
    public Long currentHeapHighWatermark; // 288 int64u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public SoftwareDiagnosticsCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 76, "SoftwareDiagnostics");
    }

    public void resetWatermarks(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "resetWatermarks", o);
    }

    public String toString() {
        String str = "";
        str += "threadMetrics : " + threadMetrics + "\n";
        str += "currentHeapFree : " + currentHeapFree + "\n";
        str += "currentHeapUsed : " + currentHeapUsed + "\n";
        str += "currentHeapHighWatermark : " + currentHeapHighWatermark + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
