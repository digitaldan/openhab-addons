/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * SoftwareDiagnostics
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class SoftwareDiagnosticsCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "SOFTWARE_DIAGNOSTICS_CLUSTER";
    public static final int CLUSTER_ID = 0x0034;

    class ThreadMetricsStruct {
        public Long id; // int64u
        public String name; // char_string
        public Integer stackFreeCurrent; // int32u
        public Integer stackFreeMinimum; // int32u
        public Integer stackSize; // int32u

        public ThreadMetricsStruct(Long id, String name, Integer stackFreeCurrent, Integer stackFreeMinimum,
                Integer stackSize) {
            this.id = id;
            this.name = name;
            this.stackFreeCurrent = stackFreeCurrent;
            this.stackFreeMinimum = stackFreeMinimum;
            this.stackSize = stackSize;
        }
    }

    // ZCL Bitmaps
    public static class Feature {
        public boolean watermarks;

        public Feature(boolean watermarks) {
            this.watermarks = watermarks;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public ThreadMetricsStruct[] threadMetrics; // 0 ThreadMetricsStruct reportable
    public Long currentHeapFree; // 1 int64u reportable
    public Long currentHeapUsed; // 2 int64u reportable
    public Long currentHeapHighWatermark; // 3 int64u reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public SoftwareDiagnosticsCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 65, "SoftwareDiagnostics");
    }

    public void resetWatermarks(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "resetWatermarks", o);
    }

    public String toString() {
        String str = "";
        str += "threadMetrics : " + threadMetrics + "\n";
        str += "currentHeapFree : " + currentHeapFree + "\n";
        str += "currentHeapUsed : " + currentHeapUsed + "\n";
        str += "currentHeapHighWatermark : " + currentHeapHighWatermark + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
