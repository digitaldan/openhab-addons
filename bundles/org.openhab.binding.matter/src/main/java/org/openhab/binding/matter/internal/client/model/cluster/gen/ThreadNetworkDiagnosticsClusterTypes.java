/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.Map;
import java.util.List;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;
import static java.util.Map.entry;  

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * ThreadNetworkDiagnostics
 *
 * @author Dan Cunningham - Initial contribution
 */
public class ThreadNetworkDiagnosticsClusterTypes {

    public static final String CLUSTER_NAME = "THREAD_NETWORK_DIAGNOSTICS_CLUSTER";
    public static final int CLUSTER_ID = 0x0035;

     public class NeighborTableStruct {
        public Long extAddress; // int64u
        public Integer age; // int32u
        public Integer rloc16; // int16u
        public Integer linkFrameCounter; // int32u
        public Integer mleFrameCounter; // int32u
        public Integer lqi; // int8u
        public Integer averageRssi; // int8s
        public Integer lastRssi; // int8s
        public Integer frameErrorRate; // int8u
        public Integer messageErrorRate; // int8u
        public Boolean rxOnWhenIdle; // boolean
        public Boolean fullThreadDevice; // boolean
        public Boolean fullNetworkData; // boolean
        public Boolean isChild; // boolean
        public NeighborTableStruct(Long extAddress, Integer age, Integer rloc16, Integer linkFrameCounter, Integer mleFrameCounter, Integer lqi, Integer averageRssi, Integer lastRssi, Integer frameErrorRate, Integer messageErrorRate, Boolean rxOnWhenIdle, Boolean fullThreadDevice, Boolean fullNetworkData, Boolean isChild) {
            this.extAddress = extAddress;
            this.age = age;
            this.rloc16 = rloc16;
            this.linkFrameCounter = linkFrameCounter;
            this.mleFrameCounter = mleFrameCounter;
            this.lqi = lqi;
            this.averageRssi = averageRssi;
            this.lastRssi = lastRssi;
            this.frameErrorRate = frameErrorRate;
            this.messageErrorRate = messageErrorRate;
            this.rxOnWhenIdle = rxOnWhenIdle;
            this.fullThreadDevice = fullThreadDevice;
            this.fullNetworkData = fullNetworkData;
            this.isChild = isChild;
        }
     }
     public class OperationalDatasetComponents {
        public Boolean activeTimestampPresent; // boolean
        public Boolean pendingTimestampPresent; // boolean
        public Boolean masterKeyPresent; // boolean
        public Boolean networkNamePresent; // boolean
        public Boolean extendedPanIdPresent; // boolean
        public Boolean meshLocalPrefixPresent; // boolean
        public Boolean delayPresent; // boolean
        public Boolean panIdPresent; // boolean
        public Boolean channelPresent; // boolean
        public Boolean pskcPresent; // boolean
        public Boolean securityPolicyPresent; // boolean
        public Boolean channelMaskPresent; // boolean
        public OperationalDatasetComponents(Boolean activeTimestampPresent, Boolean pendingTimestampPresent, Boolean masterKeyPresent, Boolean networkNamePresent, Boolean extendedPanIdPresent, Boolean meshLocalPrefixPresent, Boolean delayPresent, Boolean panIdPresent, Boolean channelPresent, Boolean pskcPresent, Boolean securityPolicyPresent, Boolean channelMaskPresent) {
            this.activeTimestampPresent = activeTimestampPresent;
            this.pendingTimestampPresent = pendingTimestampPresent;
            this.masterKeyPresent = masterKeyPresent;
            this.networkNamePresent = networkNamePresent;
            this.extendedPanIdPresent = extendedPanIdPresent;
            this.meshLocalPrefixPresent = meshLocalPrefixPresent;
            this.delayPresent = delayPresent;
            this.panIdPresent = panIdPresent;
            this.channelPresent = channelPresent;
            this.pskcPresent = pskcPresent;
            this.securityPolicyPresent = securityPolicyPresent;
            this.channelMaskPresent = channelMaskPresent;
        }
     }
     public class RouteTableStruct {
        public Long extAddress; // int64u
        public Integer rloc16; // int16u
        public Integer routerId; // int8u
        public Integer nextHop; // int8u
        public Integer pathCost; // int8u
        public Integer LQIIn; // int8u
        public Integer LQIOut; // int8u
        public Integer age; // int8u
        public Boolean allocated; // boolean
        public Boolean linkEstablished; // boolean
        public RouteTableStruct(Long extAddress, Integer rloc16, Integer routerId, Integer nextHop, Integer pathCost, Integer LQIIn, Integer LQIOut, Integer age, Boolean allocated, Boolean linkEstablished) {
            this.extAddress = extAddress;
            this.rloc16 = rloc16;
            this.routerId = routerId;
            this.nextHop = nextHop;
            this.pathCost = pathCost;
            this.LQIIn = LQIIn;
            this.LQIOut = LQIOut;
            this.age = age;
            this.allocated = allocated;
            this.linkEstablished = linkEstablished;
        }
     }
     public class SecurityPolicy {
        public Integer rotationTime; // int16u
        public Integer flags; // int16u
        public SecurityPolicy(Integer rotationTime, Integer flags) {
            this.rotationTime = rotationTime;
            this.flags = flags;
        }
     }
    //ZCL Enums
    public enum ConnectionStatusEnum {
        CONNECTED(0, "Connected"),
        NOTCONNECTED(1, "NotConnected"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private ConnectionStatusEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum NetworkFaultEnum {
        UNSPECIFIED(0, "Unspecified"),
        LINKDOWN(1, "LinkDown"),
        HARDWAREFAILURE(2, "HardwareFailure"),
        NETWORKJAMMED(3, "NetworkJammed"),
        UNKNOWN_VALUE(4,"UnknownValue");

        public final int value;
        public final String label;
        private NetworkFaultEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum RoutingRoleEnum {
        UNSPECIFIED(0, "Unspecified"),
        UNASSIGNED(1, "Unassigned"),
        SLEEPYENDDEVICE(2, "SleepyEndDevice"),
        ENDDEVICE(3, "EndDevice"),
        REED(4, "REED"),
        ROUTER(5, "Router"),
        LEADER(6, "Leader"),
        UNKNOWN_VALUE(7,"UnknownValue");

        public final int value;
        public final String label;
        private RoutingRoleEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    //ZCL Bitmaps
    public static class Feature {
        public boolean packetCounts;
        public boolean errorCounts;
        public boolean MLECounts;
        public boolean MACCounts;
        public Feature(boolean packetCounts, boolean errorCounts, boolean MLECounts, boolean MACCounts){
            this.packetCounts = packetCounts;
            this.errorCounts = errorCounts;
            this.MLECounts = MLECounts;
            this.MACCounts = MACCounts;
        }
    }

    public static class ResetCountsCommandOptions {
        public  ResetCountsCommandOptions(){
        }
    }
}
