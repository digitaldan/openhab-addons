/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * LevelControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class LevelControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "LEVEL_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0008;

    // ZCL Enums
    public enum MoveModeEnum {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private MoveModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum StepModeEnum {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private StepModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class Feature {
        public boolean onOff;
        public boolean lighting;
        public boolean frequency;

        public Feature(boolean onOff, boolean lighting, boolean frequency) {
            this.onOff = onOff;
            this.lighting = lighting;
            this.frequency = frequency;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2]);
        }
    }

    public static class OptionsBitmap {
        public boolean executeIfOff;
        public boolean coupleColorTempToLevel;

        public OptionsBitmap(boolean executeIfOff, boolean coupleColorTempToLevel) {
            this.executeIfOff = executeIfOff;
            this.coupleColorTempToLevel = coupleColorTempToLevel;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OptionsBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OptionsBitmap(keys[0], keys[1]);
        }
    }

    public Integer currentLevel; // 0 int8u reportable
    public Integer remainingTime; // 1 int16u reportable
    public Integer minLevel; // 2 int8u reportable
    public Integer maxLevel; // 3 int8u reportable
    public Integer currentFrequency; // 4 int16u reportable
    public Integer minFrequency; // 5 int16u reportable
    public Integer maxFrequency; // 6 int16u reportable
    public OptionsBitmap options; // 15 OptionsBitmap reportable writable
    public Integer onOffTransitionTime; // 16 int16u reportable writable
    public Integer onLevel; // 17 int8u reportable writable
    public Integer onTransitionTime; // 18 int16u reportable writable
    public Integer offTransitionTime; // 19 int16u reportable writable
    public Integer defaultMoveRate; // 20 int8u reportable writable
    public Integer startUpCurrentLevel; // 16384 int8u reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public LevelControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 39, "LevelControl");
    }

    public void moveToLevel(MatterClient client, Integer level, Integer transitionTime, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final Integer _level = level;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer level = _level;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToLevel", o);
    }

    public void move(MatterClient client, MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final MoveModeEnum _moveMode = moveMode;
        final Integer _rate = rate;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public MoveModeEnum moveMode = _moveMode;
            public Integer rate = _rate;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "move", o);
    }

    public void step(MatterClient client, StepModeEnum stepMode, Integer stepSize, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final StepModeEnum _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public StepModeEnum stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "step", o);
    }

    public void stop(MatterClient client, OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stop", o);
    }

    public void moveToLevelWithOnOff(MatterClient client, Integer level, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final Integer _level = level;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer level = _level;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToLevelWithOnOff", o);
    }

    public void moveWithOnOff(MatterClient client, MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final MoveModeEnum _moveMode = moveMode;
        final Integer _rate = rate;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public MoveModeEnum moveMode = _moveMode;
            public Integer rate = _rate;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveWithOnOff", o);
    }

    public void stepWithOnOff(MatterClient client, StepModeEnum stepMode, Integer stepSize, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final StepModeEnum _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public StepModeEnum stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepWithOnOff", o);
    }

    public void stopWithOnOff(MatterClient client, OptionsBitmap optionsMask, OptionsBitmap optionsOverride)
            throws Exception {
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stopWithOnOff", o);
    }

    public void moveToClosestFrequency(MatterClient client, Integer frequency) throws Exception {
        final Integer _frequency = frequency;
        Object o = new Object() {
            public Integer frequency = _frequency;
        };
        sendCommand(client, "moveToClosestFrequency", o);
    }

    public String toString() {
        String str = "";
        str += "currentLevel : " + currentLevel + "\n";
        str += "remainingTime : " + remainingTime + "\n";
        str += "minLevel : " + minLevel + "\n";
        str += "maxLevel : " + maxLevel + "\n";
        str += "currentFrequency : " + currentFrequency + "\n";
        str += "minFrequency : " + minFrequency + "\n";
        str += "maxFrequency : " + maxFrequency + "\n";
        str += "options : " + options + "\n";
        str += "onOffTransitionTime : " + onOffTransitionTime + "\n";
        str += "onLevel : " + onLevel + "\n";
        str += "onTransitionTime : " + onTransitionTime + "\n";
        str += "offTransitionTime : " + offTransitionTime + "\n";
        str += "defaultMoveRate : " + defaultMoveRate + "\n";
        str += "startUpCurrentLevel : " + startUpCurrentLevel + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
