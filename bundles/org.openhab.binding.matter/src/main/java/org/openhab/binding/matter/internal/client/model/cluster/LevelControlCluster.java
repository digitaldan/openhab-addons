/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * LevelControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class LevelControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "LEVEL_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0008;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(49, "currentLevel"), entry(127, "remainingTime"),
                entry(197, "minLevel"), entry(260, "maxLevel"), entry(313, "currentFrequency"),
                entry(364, "minFrequency"), entry(400, "maxFrequency"), entry(549, "options"),
                entry(431, "onOffTransitionTime"), entry(459, "onLevel"), entry(484, "onTransitionTime"),
                entry(507, "offTransitionTime"), entry(529, "defaultMoveRate"), entry(568, "startUpCurrentLevel"),
                entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"), entry(9, "eventList"),
                entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(30, "moveToLevel"), entry(83, "move"), entry(127, "step"),
                entry(158, "stop"), entry(185, "moveToLevelWithOnOff"), entry(206, "moveWithOnOff"),
                entry(219, "stepWithOnOff"), entry(232, "stopWithOnOff"), entry(241, "moveToClosestFrequency"));
    }

    // ZCL Enums
    public enum MoveModeEnum implements JsonSerializable {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private MoveModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum StepModeEnum implements JsonSerializable {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private StepModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean onOff;
        public boolean lighting;
        public boolean frequency;

        public Feature(boolean onOff, boolean lighting, boolean frequency) {
            this.onOff = onOff;
            this.lighting = lighting;
            this.frequency = frequency;
        }

        public String toJson() {
            String out = "{";
            out += "\"onOff\" : " + onOff + ",";
            out += "\"lighting\" : " + lighting + ",";
            out += "\"frequency\" : " + frequency + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2]);
        }
    }

    public static class OptionsBitmap implements JsonSerializable {
        public boolean executeIfOff;
        public boolean coupleColorTempToLevel;

        public OptionsBitmap(boolean executeIfOff, boolean coupleColorTempToLevel) {
            this.executeIfOff = executeIfOff;
            this.coupleColorTempToLevel = coupleColorTempToLevel;
        }

        public String toJson() {
            String out = "{";
            out += "\"executeIfOff\" : " + executeIfOff + ",";
            out += "\"coupleColorTempToLevel\" : " + coupleColorTempToLevel + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OptionsBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OptionsBitmap(keys[0], keys[1]);
        }
    }

    public Integer currentLevel; // 49 int8u
    public Integer remainingTime; // 127 int16u
    public Integer minLevel; // 197 int8u
    public Integer maxLevel; // 260 int8u
    public Integer currentFrequency; // 313 int16u
    public Integer minFrequency; // 364 int16u
    public Integer maxFrequency; // 400 int16u
    public OptionsBitmap options; // 549 OptionsBitmap
    public Integer onOffTransitionTime; // 431 int16u
    public Integer onLevel; // 459 int8u
    public Integer onTransitionTime; // 484 int16u
    public Integer offTransitionTime; // 507 int16u
    public Integer defaultMoveRate; // 529 int8u
    public Integer startUpCurrentLevel; // 568 int8u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public LevelControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 39, "LevelControl");
    }

    public void moveToLevel(MatterClient client, Integer level, Integer transitionTime, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final Integer _level = level;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer level = _level;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToLevel", o);
    }

    public void move(MatterClient client, MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final MoveModeEnum _moveMode = moveMode;
        final Integer _rate = rate;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public MoveModeEnum moveMode = _moveMode;
            public Integer rate = _rate;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "move", o);
    }

    public void step(MatterClient client, StepModeEnum stepMode, Integer stepSize, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final StepModeEnum _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public StepModeEnum stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "step", o);
    }

    public void stop(MatterClient client, OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stop", o);
    }

    public void moveToLevelWithOnOff(MatterClient client, Integer level, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final Integer _level = level;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public Integer level = _level;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveToLevelWithOnOff", o);
    }

    public void moveWithOnOff(MatterClient client, MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask,
            OptionsBitmap optionsOverride) throws Exception {
        final MoveModeEnum _moveMode = moveMode;
        final Integer _rate = rate;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public MoveModeEnum moveMode = _moveMode;
            public Integer rate = _rate;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "moveWithOnOff", o);
    }

    public void stepWithOnOff(MatterClient client, StepModeEnum stepMode, Integer stepSize, Integer transitionTime,
            OptionsBitmap optionsMask, OptionsBitmap optionsOverride) throws Exception {
        final StepModeEnum _stepMode = stepMode;
        final Integer _stepSize = stepSize;
        final Integer _transitionTime = transitionTime;
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public StepModeEnum stepMode = _stepMode;
            public Integer stepSize = _stepSize;
            public Integer transitionTime = _transitionTime;
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stepWithOnOff", o);
    }

    public void stopWithOnOff(MatterClient client, OptionsBitmap optionsMask, OptionsBitmap optionsOverride)
            throws Exception {
        final OptionsBitmap _optionsMask = optionsMask;
        final OptionsBitmap _optionsOverride = optionsOverride;
        Object o = new Object() {
            public OptionsBitmap optionsMask = _optionsMask;
            public OptionsBitmap optionsOverride = _optionsOverride;
        };
        sendCommand(client, "stopWithOnOff", o);
    }

    public void moveToClosestFrequency(MatterClient client, Integer frequency) throws Exception {
        final Integer _frequency = frequency;
        Object o = new Object() {
            public Integer frequency = _frequency;
        };
        sendCommand(client, "moveToClosestFrequency", o);
    }

    public String toString() {
        String str = "";
        str += "currentLevel : " + currentLevel + "\n";
        str += "remainingTime : " + remainingTime + "\n";
        str += "minLevel : " + minLevel + "\n";
        str += "maxLevel : " + maxLevel + "\n";
        str += "currentFrequency : " + currentFrequency + "\n";
        str += "minFrequency : " + minFrequency + "\n";
        str += "maxFrequency : " + maxFrequency + "\n";
        str += "options : " + options + "\n";
        str += "onOffTransitionTime : " + onOffTransitionTime + "\n";
        str += "onLevel : " + onLevel + "\n";
        str += "onTransitionTime : " + onTransitionTime + "\n";
        str += "offTransitionTime : " + offTransitionTime + "\n";
        str += "defaultMoveRate : " + defaultMoveRate + "\n";
        str += "startUpCurrentLevel : " + startUpCurrentLevel + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
