/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * OccupancySensing
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OccupancySensingCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OCCUPANCY_SENSING_CLUSTER";
    public static final int CLUSTER_ID = 0x0406;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(56, "occupancy"), entry(134, "occupancySensorType"),
                entry(203, "occupancySensorTypeBitmap"), entry(277, "PIROccupiedToUnoccupiedDelay"),
                entry(327, "PIRUnoccupiedToOccupiedDelay"), entry(368, "PIRUnoccupiedToOccupiedThreshold"),
                entry(402, "ultrasonicOccupiedToUnoccupiedDelay"), entry(433, "ultrasonicUnoccupiedToOccupiedDelay"),
                entry(461, "ultrasonicUnoccupiedToOccupiedThreshold"),
                entry(485, "physicalContactOccupiedToUnoccupiedDelay"),
                entry(508, "physicalContactUnoccupiedToOccupiedDelay"),
                entry(530, "physicalContactUnoccupiedToOccupiedThreshold"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries();
    }

    // ZCL Enums
    public enum OccupancySensorTypeEnum implements JsonSerializable {
        PIR(0, "PIR"),
        ULTRASONIC(1, "Ultrasonic"),
        PIRANDULTRASONIC(2, "PIRAndUltrasonic"),
        PHYSICALCONTACT(3, "PhysicalContact"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private OccupancySensorTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class OccupancyBitmap implements JsonSerializable {
        public boolean occupied;

        public OccupancyBitmap(boolean occupied) {
            this.occupied = occupied;
        }

        public String toJson() {
            String out = "{";
            out += "\"occupied\" : " + occupied + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OccupancyBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OccupancyBitmap(keys[0]);
        }
    }

    public static class OccupancySensorTypeBitmap implements JsonSerializable {
        public boolean pir;
        public boolean ultrasonic;
        public boolean physicalContact;

        public OccupancySensorTypeBitmap(boolean pir, boolean ultrasonic, boolean physicalContact) {
            this.pir = pir;
            this.ultrasonic = ultrasonic;
            this.physicalContact = physicalContact;
        }

        public String toJson() {
            String out = "{";
            out += "\"pir\" : " + pir + ",";
            out += "\"ultrasonic\" : " + ultrasonic + ",";
            out += "\"physicalContact\" : " + physicalContact + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OccupancySensorTypeBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OccupancySensorTypeBitmap(keys[0], keys[1], keys[2]);
        }
    }

    public OccupancyBitmap occupancy; // 56 OccupancyBitmap
    public OccupancySensorTypeEnum occupancySensorType; // 134 OccupancySensorTypeEnum
    public OccupancySensorTypeBitmap occupancySensorTypeBitmap; // 203 OccupancySensorTypeBitmap
    public Integer PIROccupiedToUnoccupiedDelay; // 277 int16u
    public Integer PIRUnoccupiedToOccupiedDelay; // 327 int16u
    public Integer PIRUnoccupiedToOccupiedThreshold; // 368 int8u
    public Integer ultrasonicOccupiedToUnoccupiedDelay; // 402 int16u
    public Integer ultrasonicUnoccupiedToOccupiedDelay; // 433 int16u
    public Integer ultrasonicUnoccupiedToOccupiedThreshold; // 461 int8u
    public Integer physicalContactOccupiedToUnoccupiedDelay; // 485 int16u
    public Integer physicalContactUnoccupiedToOccupiedDelay; // 508 int16u
    public Integer physicalContactUnoccupiedToOccupiedThreshold; // 530 int8u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public OccupancySensingCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 49, "OccupancySensing");
    }

    public String toString() {
        String str = "";
        str += "occupancy : " + occupancy + "\n";
        str += "occupancySensorType : " + occupancySensorType + "\n";
        str += "occupancySensorTypeBitmap : " + occupancySensorTypeBitmap + "\n";
        str += "PIROccupiedToUnoccupiedDelay : " + PIROccupiedToUnoccupiedDelay + "\n";
        str += "PIRUnoccupiedToOccupiedDelay : " + PIRUnoccupiedToOccupiedDelay + "\n";
        str += "PIRUnoccupiedToOccupiedThreshold : " + PIRUnoccupiedToOccupiedThreshold + "\n";
        str += "ultrasonicOccupiedToUnoccupiedDelay : " + ultrasonicOccupiedToUnoccupiedDelay + "\n";
        str += "ultrasonicUnoccupiedToOccupiedDelay : " + ultrasonicUnoccupiedToOccupiedDelay + "\n";
        str += "ultrasonicUnoccupiedToOccupiedThreshold : " + ultrasonicUnoccupiedToOccupiedThreshold + "\n";
        str += "physicalContactOccupiedToUnoccupiedDelay : " + physicalContactOccupiedToUnoccupiedDelay + "\n";
        str += "physicalContactUnoccupiedToOccupiedDelay : " + physicalContactUnoccupiedToOccupiedDelay + "\n";
        str += "physicalContactUnoccupiedToOccupiedThreshold : " + physicalContactUnoccupiedToOccupiedThreshold + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
