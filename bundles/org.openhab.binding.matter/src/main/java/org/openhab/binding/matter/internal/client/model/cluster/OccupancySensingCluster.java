/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

/**
 * OccupancySensing
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OccupancySensingCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OCCUPANCY_SENSING_CLUSTER";
    public static final int CLUSTER_ID = 0x0406;

    // ZCL Enums
    public enum OccupancySensorTypeEnum {
        PIR(0, "PIR"),
        ULTRASONIC(1, "Ultrasonic"),
        PIRANDULTRASONIC(2, "PIRAndUltrasonic"),
        PHYSICALCONTACT(3, "PhysicalContact"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private OccupancySensorTypeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class OccupancyBitmap {
        public boolean occupied;

        public OccupancyBitmap(boolean occupied) {
            this.occupied = occupied;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OccupancyBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OccupancyBitmap(keys[0]);
        }
    }

    public static class OccupancySensorTypeBitmap {
        public boolean pir;
        public boolean ultrasonic;
        public boolean physicalContact;

        public OccupancySensorTypeBitmap(boolean pir, boolean ultrasonic, boolean physicalContact) {
            this.pir = pir;
            this.ultrasonic = ultrasonic;
            this.physicalContact = physicalContact;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OccupancySensorTypeBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OccupancySensorTypeBitmap(keys[0], keys[1], keys[2]);
        }
    }

    public OccupancyBitmap occupancy; // 0 OccupancyBitmap reportable
    public OccupancySensorTypeEnum occupancySensorType; // 1 OccupancySensorTypeEnum reportable
    public OccupancySensorTypeBitmap occupancySensorTypeBitmap; // 2 OccupancySensorTypeBitmap reportable
    public Integer PIROccupiedToUnoccupiedDelay; // 16 int16u reportable writable
    public Integer PIRUnoccupiedToOccupiedDelay; // 17 int16u reportable writable
    public Integer PIRUnoccupiedToOccupiedThreshold; // 18 int8u reportable writable
    public Integer ultrasonicOccupiedToUnoccupiedDelay; // 32 int16u reportable writable
    public Integer ultrasonicUnoccupiedToOccupiedDelay; // 33 int16u reportable writable
    public Integer ultrasonicUnoccupiedToOccupiedThreshold; // 34 int8u reportable writable
    public Integer physicalContactOccupiedToUnoccupiedDelay; // 48 int16u reportable writable
    public Integer physicalContactUnoccupiedToOccupiedDelay; // 49 int16u reportable writable
    public Integer physicalContactUnoccupiedToOccupiedThreshold; // 50 int8u reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public OccupancySensingCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 51, "OccupancySensing");
    }

    public String toString() {
        String str = "";
        str += "occupancy : " + occupancy + "\n";
        str += "occupancySensorType : " + occupancySensorType + "\n";
        str += "occupancySensorTypeBitmap : " + occupancySensorTypeBitmap + "\n";
        str += "PIROccupiedToUnoccupiedDelay : " + PIROccupiedToUnoccupiedDelay + "\n";
        str += "PIRUnoccupiedToOccupiedDelay : " + PIRUnoccupiedToOccupiedDelay + "\n";
        str += "PIRUnoccupiedToOccupiedThreshold : " + PIRUnoccupiedToOccupiedThreshold + "\n";
        str += "ultrasonicOccupiedToUnoccupiedDelay : " + ultrasonicOccupiedToUnoccupiedDelay + "\n";
        str += "ultrasonicUnoccupiedToOccupiedDelay : " + ultrasonicUnoccupiedToOccupiedDelay + "\n";
        str += "ultrasonicUnoccupiedToOccupiedThreshold : " + ultrasonicUnoccupiedToOccupiedThreshold + "\n";
        str += "physicalContactOccupiedToUnoccupiedDelay : " + physicalContactOccupiedToUnoccupiedDelay + "\n";
        str += "physicalContactUnoccupiedToOccupiedDelay : " + physicalContactUnoccupiedToOccupiedDelay + "\n";
        str += "physicalContactUnoccupiedToOccupiedThreshold : " + physicalContactUnoccupiedToOccupiedThreshold + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
