/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import java.util.Map;
import java.util.List;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;
import static java.util.Map.entry;  

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * LevelControl
 *
 * @author Dan Cunningham - Initial contribution
 */
public class LevelControlClusterTypes {

    public static final String CLUSTER_NAME = "LEVEL_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0008;

    //ZCL Enums
    public enum MoveModeEnum {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private MoveModeEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    public enum StepModeEnum {
        UP(0, "Up"),
        DOWN(1, "Down"),
        UNKNOWN_VALUE(2,"UnknownValue");

        public final int value;
        public final String label;
        private StepModeEnum(int value, String label){
            this.value = value;
            this.label = label;
        }
    };

    //ZCL Bitmaps
    public static class Feature {
        public boolean onOff;
        public boolean lighting;
        public boolean frequency;
        public Feature(boolean onOff, boolean lighting, boolean frequency){
            this.onOff = onOff;
            this.lighting = lighting;
            this.frequency = frequency;
        }
    }
    public static class OptionsBitmap {
        public boolean executeIfOff;
        public boolean coupleColorTempToLevel;
        public OptionsBitmap(boolean executeIfOff, boolean coupleColorTempToLevel){
            this.executeIfOff = executeIfOff;
            this.coupleColorTempToLevel = coupleColorTempToLevel;
        }
    }

    public static class MoveToLevelCommandOptions {
        public Integer level;
        public Integer transitionTime;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  MoveToLevelCommandOptions(Integer level, Integer transitionTime, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.level = level;
            this.transitionTime = transitionTime;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class MoveCommandOptions {
        public MoveModeEnum moveMode;
        public Integer rate;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  MoveCommandOptions(MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.moveMode = moveMode;
            this.rate = rate;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class StepCommandOptions {
        public StepModeEnum stepMode;
        public Integer stepSize;
        public Integer transitionTime;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  StepCommandOptions(StepModeEnum stepMode, Integer stepSize, Integer transitionTime, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.stepMode = stepMode;
            this.stepSize = stepSize;
            this.transitionTime = transitionTime;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class StopCommandOptions {
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  StopCommandOptions(OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class MoveToLevelWithOnOffCommandOptions {
        public Integer level;
        public Integer transitionTime;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  MoveToLevelWithOnOffCommandOptions(Integer level, Integer transitionTime, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.level = level;
            this.transitionTime = transitionTime;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class MoveWithOnOffCommandOptions {
        public MoveModeEnum moveMode;
        public Integer rate;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  MoveWithOnOffCommandOptions(MoveModeEnum moveMode, Integer rate, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.moveMode = moveMode;
            this.rate = rate;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class StepWithOnOffCommandOptions {
        public StepModeEnum stepMode;
        public Integer stepSize;
        public Integer transitionTime;
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  StepWithOnOffCommandOptions(StepModeEnum stepMode, Integer stepSize, Integer transitionTime, OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.stepMode = stepMode;
            this.stepSize = stepSize;
            this.transitionTime = transitionTime;
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class StopWithOnOffCommandOptions {
        public OptionsBitmap optionsMask;
        public OptionsBitmap optionsOverride;
        public  StopWithOnOffCommandOptions(OptionsBitmap optionsMask, OptionsBitmap optionsOverride){
            this.optionsMask = optionsMask;
            this.optionsOverride = optionsOverride;
        }
    }
    public static class MoveToClosestFrequencyCommandOptions {
        public Integer frequency;
        public  MoveToClosestFrequencyCommandOptions(Integer frequency){
            this.frequency = frequency;
        }
    }
}
