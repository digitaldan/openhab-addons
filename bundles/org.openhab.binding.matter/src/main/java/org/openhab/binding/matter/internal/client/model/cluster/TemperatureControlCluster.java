/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * TemperatureControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class TemperatureControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "TEMPERATURE_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0056;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(81, "temperatureSetpoint"), entry(163, "minTemperature"),
                entry(236, "maxTemperature"), entry(293, "step"), entry(339, "selectedTemperatureLevel"),
                entry(380, "supportedTemperatureLevels"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(49, "setTemperature"));
    }

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean temperatureNumber;
        public boolean temperatureLevel;
        public boolean temperatureStep;

        public Feature(boolean temperatureNumber, boolean temperatureLevel, boolean temperatureStep) {
            this.temperatureNumber = temperatureNumber;
            this.temperatureLevel = temperatureLevel;
            this.temperatureStep = temperatureStep;
        }

        public String toJson() {
            String out = "{";
            out += "\"temperatureNumber\" : " + temperatureNumber + ",";
            out += "\"temperatureLevel\" : " + temperatureLevel + ",";
            out += "\"temperatureStep\" : " + temperatureStep + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2]);
        }
    }

    public Integer temperatureSetpoint; // 81 temperature
    public Integer minTemperature; // 163 temperature
    public Integer maxTemperature; // 236 temperature
    public Integer step; // 293 temperature
    public Integer selectedTemperatureLevel; // 339 int8u
    public String supportedTemperatureLevels; // 380 char_string
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public TemperatureControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 78, "TemperatureControl");
    }

    public void setTemperature(MatterClient client, Integer targetTemperature, Integer targetTemperatureLevel)
            throws Exception {
        final Integer _targetTemperature = targetTemperature;
        final Integer _targetTemperatureLevel = targetTemperatureLevel;
        Object o = new Object() {
            public Integer targetTemperature = _targetTemperature;
            public Integer targetTemperatureLevel = _targetTemperatureLevel;
        };
        sendCommand(client, "setTemperature", o);
    }

    public String toString() {
        String str = "";
        str += "temperatureSetpoint : " + temperatureSetpoint + "\n";
        str += "minTemperature : " + minTemperature + "\n";
        str += "maxTemperature : " + maxTemperature + "\n";
        str += "step : " + step + "\n";
        str += "selectedTemperatureLevel : " + selectedTemperatureLevel + "\n";
        str += "supportedTemperatureLevels : " + supportedTemperatureLevels + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
