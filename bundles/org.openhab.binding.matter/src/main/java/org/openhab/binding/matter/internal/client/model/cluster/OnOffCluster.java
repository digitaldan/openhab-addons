/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * OnOff
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OnOffCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "ON_OFF_CLUSTER";
    public static final int CLUSTER_ID = 0x0006;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(55, "onOff"), entry(135, "globalSceneControl"), entry(204, "onTime"),
                entry(274, "offWaitTime"), entry(326, "startUpOnOff"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(34, "off"), entry(87, "on"), entry(130, "toggle"),
                entry(166, "offWithEffect"), entry(191, "onWithRecallGlobalScene"), entry(210, "onWithTimedOff"));
    }

    // ZCL Enums
    public enum DelayedAllOffEffectVariantEnum implements JsonSerializable {
        DELAYEDOFFFASTFADE(0, "DelayedOffFastFade"),
        NOFADE(1, "NoFade"),
        DELAYEDOFFSLOWFADE(2, "DelayedOffSlowFade"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private DelayedAllOffEffectVariantEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum DyingLightEffectVariantEnum implements JsonSerializable {
        DYINGLIGHTFADEOFF(0, "DyingLightFadeOff"),
        UNKNOWN_VALUE(1, "UnknownValue");

        public final int value;
        public final String label;

        private DyingLightEffectVariantEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum EffectIdentifierEnum implements JsonSerializable {
        DELAYEDALLOFF(0, "DelayedAllOff"),
        DYINGLIGHT(1, "DyingLight"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private EffectIdentifierEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum StartUpOnOffEnum implements JsonSerializable {
        OFF(0, "Off"),
        ON(1, "On"),
        TOGGLE(2, "Toggle"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private StartUpOnOffEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean lighting;
        public boolean deadFrontBehavior;
        public boolean offOnly;

        public Feature(boolean lighting, boolean deadFrontBehavior, boolean offOnly) {
            this.lighting = lighting;
            this.deadFrontBehavior = deadFrontBehavior;
            this.offOnly = offOnly;
        }

        public String toJson() {
            String out = "{";
            out += "\"lighting\" : " + lighting + ",";
            out += "\"deadFrontBehavior\" : " + deadFrontBehavior + ",";
            out += "\"offOnly\" : " + offOnly + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2]);
        }
    }

    public static class OnOffControlBitmap implements JsonSerializable {
        public boolean acceptOnlyWhenOn;

        public OnOffControlBitmap(boolean acceptOnlyWhenOn) {
            this.acceptOnlyWhenOn = acceptOnlyWhenOn;
        }

        public String toJson() {
            String out = "{";
            out += "\"acceptOnlyWhenOn\" : " + acceptOnlyWhenOn + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static OnOffControlBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new OnOffControlBitmap(keys[0]);
        }
    }

    public Boolean onOff; // 55 boolean
    public Boolean globalSceneControl; // 135 boolean
    public Integer onTime; // 204 int16u
    public Integer offWaitTime; // 274 int16u
    public StartUpOnOffEnum startUpOnOff; // 326 StartUpOnOffEnum
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public OnOffCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 48, "OnOff");
    }

    public void off(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "off", o);
    }

    public void on(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "on", o);
    }

    public void toggle(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "toggle", o);
    }

    public void offWithEffect(MatterClient client, EffectIdentifierEnum effectIdentifier, Integer effectVariant)
            throws Exception {
        final EffectIdentifierEnum _effectIdentifier = effectIdentifier;
        final Integer _effectVariant = effectVariant;
        Object o = new Object() {
            public EffectIdentifierEnum effectIdentifier = _effectIdentifier;
            public Integer effectVariant = _effectVariant;
        };
        sendCommand(client, "offWithEffect", o);
    }

    public void onWithRecallGlobalScene(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "onWithRecallGlobalScene", o);
    }

    public void onWithTimedOff(MatterClient client, OnOffControlBitmap onOffControl, Integer onTime,
            Integer offWaitTime) throws Exception {
        final OnOffControlBitmap _onOffControl = onOffControl;
        final Integer _onTime = onTime;
        final Integer _offWaitTime = offWaitTime;
        Object o = new Object() {
            public OnOffControlBitmap onOffControl = _onOffControl;
            public Integer onTime = _onTime;
            public Integer offWaitTime = _offWaitTime;
        };
        sendCommand(client, "onWithTimedOff", o);
    }

    public String toString() {
        String str = "";
        str += "onOff : " + onOff + "\n";
        str += "globalSceneControl : " + globalSceneControl + "\n";
        str += "onTime : " + onTime + "\n";
        str += "offWaitTime : " + offWaitTime + "\n";
        str += "startUpOnOff : " + startUpOnOff + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
