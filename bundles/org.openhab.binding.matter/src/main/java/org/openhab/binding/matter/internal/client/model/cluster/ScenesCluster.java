/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * Scenes
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class ScenesCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "SCENES_CLUSTER";
    public static final int CLUSTER_ID = 0x0005;

    class AttributeValuePair {
        public List<Integer> attributeID; // attrib_id
        public Integer attributeValue; // int32u

        public AttributeValuePair(List<Integer> attributeID, Integer attributeValue) {
            this.attributeID = attributeID;
            this.attributeValue = attributeValue;
        }
    }

    class ExtensionFieldSet {
        public List<Integer> clusterID; // cluster_id
        public AttributeValuePair attributeValueList; // AttributeValuePair

        public ExtensionFieldSet(List<Integer> clusterID, AttributeValuePair attributeValueList) {
            this.clusterID = clusterID;
            this.attributeValueList = attributeValueList;
        }
    }

    class SceneInfoStruct {
        public Integer sceneCount; // int8u
        public Integer currentScene; // int8u
        public List<Integer> currentGroup; // group_id
        public Boolean sceneValid; // boolean
        public Integer remainingCapacity; // int8u
        public Integer fabricIndex; // fabric_idx

        public SceneInfoStruct(Integer sceneCount, Integer currentScene, List<Integer> currentGroup, Boolean sceneValid,
                Integer remainingCapacity, Integer fabricIndex) {
            this.sceneCount = sceneCount;
            this.currentScene = currentScene;
            this.currentGroup = currentGroup;
            this.sceneValid = sceneValid;
            this.remainingCapacity = remainingCapacity;
            this.fabricIndex = fabricIndex;
        }
    }

    // ZCL Bitmaps
    public static class CopyModeBitmap {
        public boolean copyAllScenes;

        public CopyModeBitmap(boolean copyAllScenes) {
            this.copyAllScenes = copyAllScenes;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static CopyModeBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new CopyModeBitmap(keys[0]);
        }
    }

    public static class Feature {
        public boolean sceneNames;
        public boolean explicit;
        public boolean tableSize;
        public boolean fabricScenes;

        public Feature(boolean sceneNames, boolean explicit, boolean tableSize, boolean fabricScenes) {
            this.sceneNames = sceneNames;
            this.explicit = explicit;
            this.tableSize = tableSize;
            this.fabricScenes = fabricScenes;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3]);
        }
    }

    public static class NameSupportBitmap {
        public boolean sceneNames;

        public NameSupportBitmap(boolean sceneNames) {
            this.sceneNames = sceneNames;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static NameSupportBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new NameSupportBitmap(keys[0]);
        }
    }

    public Integer sceneCount; // 0 int8u reportable
    public Integer currentScene; // 1 int8u reportable
    public List<Integer> currentGroup; // 2 group_id reportable
    public Boolean sceneValid; // 3 boolean reportable
    public NameSupportBitmap nameSupport; // 4 NameSupportBitmap reportable
    public Long lastConfiguredBy; // 5 node_id reportable
    public Integer sceneTableSize; // 6 int16u reportable
    public SceneInfoStruct[] fabricSceneInfo; // 7 SceneInfoStruct reportable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public ScenesCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 62, "Scenes");
    }

    public void addScene(MatterClient client, List<Integer> groupID, Integer sceneID, Integer transitionTime,
            String sceneName, ExtensionFieldSet extensionFieldSets) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        final Integer _transitionTime = transitionTime;
        final String _sceneName = sceneName;
        final ExtensionFieldSet _extensionFieldSets = extensionFieldSets;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
            public Integer transitionTime = _transitionTime;
            public String sceneName = _sceneName;
            public ExtensionFieldSet extensionFieldSets = _extensionFieldSets;
        };
        sendCommand(client, "addScene", o);
    }

    public void addSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID)
            throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "addSceneResponse", o);
    }

    public void viewScene(MatterClient client, List<Integer> groupID, Integer sceneID) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "viewScene", o);
    }

    public void viewSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID,
            Integer transitionTime, String sceneName, ExtensionFieldSet extensionFieldSets) throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        final Integer _transitionTime = transitionTime;
        final String _sceneName = sceneName;
        final ExtensionFieldSet _extensionFieldSets = extensionFieldSets;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
            public Integer transitionTime = _transitionTime;
            public String sceneName = _sceneName;
            public ExtensionFieldSet extensionFieldSets = _extensionFieldSets;
        };
        sendCommand(client, "viewSceneResponse", o);
    }

    public void removeScene(MatterClient client, List<Integer> groupID, Integer sceneID) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "removeScene", o);
    }

    public void removeSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID)
            throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "removeSceneResponse", o);
    }

    public void removeAllScenes(MatterClient client, List<Integer> groupID) throws Exception {
        final List<Integer> _groupID = groupID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
        };
        sendCommand(client, "removeAllScenes", o);
    }

    public void removeAllScenesResponse(MatterClient client, Integer status, List<Integer> groupID) throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
        };
        sendCommand(client, "removeAllScenesResponse", o);
    }

    public void storeScene(MatterClient client, List<Integer> groupID, Integer sceneID) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "storeScene", o);
    }

    public void storeSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID)
            throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "storeSceneResponse", o);
    }

    public void recallScene(MatterClient client, List<Integer> groupID, Integer sceneID, Integer transitionTime)
            throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        final Integer _transitionTime = transitionTime;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
            public Integer transitionTime = _transitionTime;
        };
        sendCommand(client, "recallScene", o);
    }

    public void getSceneMembership(MatterClient client, List<Integer> groupID) throws Exception {
        final List<Integer> _groupID = groupID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
        };
        sendCommand(client, "getSceneMembership", o);
    }

    public void getSceneMembershipResponse(MatterClient client, Integer status, Integer capacity, List<Integer> groupID,
            Integer sceneList) throws Exception {
        final Integer _status = status;
        final Integer _capacity = capacity;
        final List<Integer> _groupID = groupID;
        final Integer _sceneList = sceneList;
        Object o = new Object() {
            public Integer status = _status;
            public Integer capacity = _capacity;
            public List<Integer> groupID = _groupID;
            public Integer sceneList = _sceneList;
        };
        sendCommand(client, "getSceneMembershipResponse", o);
    }

    public void enhancedAddScene(MatterClient client, List<Integer> groupID, Integer sceneID, Integer transitionTime,
            String sceneName, ExtensionFieldSet extensionFieldSets) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        final Integer _transitionTime = transitionTime;
        final String _sceneName = sceneName;
        final ExtensionFieldSet _extensionFieldSets = extensionFieldSets;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
            public Integer transitionTime = _transitionTime;
            public String sceneName = _sceneName;
            public ExtensionFieldSet extensionFieldSets = _extensionFieldSets;
        };
        sendCommand(client, "enhancedAddScene", o);
    }

    public void enhancedAddSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID)
            throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "enhancedAddSceneResponse", o);
    }

    public void enhancedViewScene(MatterClient client, List<Integer> groupID, Integer sceneID) throws Exception {
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        Object o = new Object() {
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
        };
        sendCommand(client, "enhancedViewScene", o);
    }

    public void enhancedViewSceneResponse(MatterClient client, Integer status, List<Integer> groupID, Integer sceneID,
            Integer transitionTime, String sceneName, ExtensionFieldSet extensionFieldSets) throws Exception {
        final Integer _status = status;
        final List<Integer> _groupID = groupID;
        final Integer _sceneID = sceneID;
        final Integer _transitionTime = transitionTime;
        final String _sceneName = sceneName;
        final ExtensionFieldSet _extensionFieldSets = extensionFieldSets;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupID = _groupID;
            public Integer sceneID = _sceneID;
            public Integer transitionTime = _transitionTime;
            public String sceneName = _sceneName;
            public ExtensionFieldSet extensionFieldSets = _extensionFieldSets;
        };
        sendCommand(client, "enhancedViewSceneResponse", o);
    }

    public void copyScene(MatterClient client, CopyModeBitmap mode, List<Integer> groupIdentifierFrom,
            Integer sceneIdentifierFrom, List<Integer> groupIdentifierTo, Integer sceneIdentifierTo) throws Exception {
        final CopyModeBitmap _mode = mode;
        final List<Integer> _groupIdentifierFrom = groupIdentifierFrom;
        final Integer _sceneIdentifierFrom = sceneIdentifierFrom;
        final List<Integer> _groupIdentifierTo = groupIdentifierTo;
        final Integer _sceneIdentifierTo = sceneIdentifierTo;
        Object o = new Object() {
            public CopyModeBitmap mode = _mode;
            public List<Integer> groupIdentifierFrom = _groupIdentifierFrom;
            public Integer sceneIdentifierFrom = _sceneIdentifierFrom;
            public List<Integer> groupIdentifierTo = _groupIdentifierTo;
            public Integer sceneIdentifierTo = _sceneIdentifierTo;
        };
        sendCommand(client, "copyScene", o);
    }

    public void copySceneResponse(MatterClient client, Integer status, List<Integer> groupIdentifierFrom,
            Integer sceneIdentifierFrom) throws Exception {
        final Integer _status = status;
        final List<Integer> _groupIdentifierFrom = groupIdentifierFrom;
        final Integer _sceneIdentifierFrom = sceneIdentifierFrom;
        Object o = new Object() {
            public Integer status = _status;
            public List<Integer> groupIdentifierFrom = _groupIdentifierFrom;
            public Integer sceneIdentifierFrom = _sceneIdentifierFrom;
        };
        sendCommand(client, "copySceneResponse", o);
    }

    public String toString() {
        String str = "";
        str += "sceneCount : " + sceneCount + "\n";
        str += "currentScene : " + currentScene + "\n";
        str += "currentGroup : " + currentGroup + "\n";
        str += "sceneValid : " + sceneValid + "\n";
        str += "nameSupport : " + nameSupport + "\n";
        str += "lastConfiguredBy : " + lastConfiguredBy + "\n";
        str += "sceneTableSize : " + sceneTableSize + "\n";
        str += "fabricSceneInfo : " + fabricSceneInfo + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
