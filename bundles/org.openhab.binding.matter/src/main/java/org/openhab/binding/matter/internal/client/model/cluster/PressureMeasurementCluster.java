/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * PressureMeasurement
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class PressureMeasurementCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "PRESSURE_MEASUREMENT_CLUSTER";
    public static final int CLUSTER_ID = 0x0403;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(58, "measuredValue"), entry(137, "minMeasuredValue"),
                entry(207, "maxMeasuredValue"), entry(270, "tolerance"), entry(325, "scaledValue"),
                entry(367, "minScaledValue"), entry(401, "maxScaledValue"), entry(432, "scaledTolerance"),
                entry(460, "scale"), entry(13, "generatedCommandList"), entry(11, "acceptedCommandList"),
                entry(9, "eventList"), entry(7, "attributeList"), entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries();
    }

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean extended;

        public Feature(boolean extended) {
            this.extended = extended;
        }

        public String toJson() {
            String out = "{";
            out += "\"extended\" : " + extended + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0]);
        }
    }

    public Integer measuredValue; // 58 int16s
    public Integer minMeasuredValue; // 137 int16s
    public Integer maxMeasuredValue; // 207 int16s
    public Integer tolerance; // 270 int16u
    public Integer scaledValue; // 325 int16s
    public Integer minScaledValue; // 367 int16s
    public Integer maxScaledValue; // 401 int16s
    public Integer scaledTolerance; // 432 int16u
    public Integer scale; // 460 int8s
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public PressureMeasurementCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 53, "PressureMeasurement");
    }

    public String toString() {
        String str = "";
        str += "measuredValue : " + measuredValue + "\n";
        str += "minMeasuredValue : " + minMeasuredValue + "\n";
        str += "maxMeasuredValue : " + maxMeasuredValue + "\n";
        str += "tolerance : " + tolerance + "\n";
        str += "scaledValue : " + scaledValue + "\n";
        str += "minScaledValue : " + minScaledValue + "\n";
        str += "maxScaledValue : " + maxScaledValue + "\n";
        str += "scaledTolerance : " + scaledTolerance + "\n";
        str += "scale : " + scale + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
