/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * OtaSoftwareUpdateRequestor
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class OtaSoftwareUpdateRequestorCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "OTA_SOFTWARE_UPDATE_REQUESTOR_CLUSTER";
    public static final int CLUSTER_ID = 0x002A;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(179, "defaultOTAProviders"), entry(247, "updatePossible"),
                entry(303, "updateState"), entry(346, "updateStateProgress"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(228, "announceOTAProvider"));
    }

    class ProviderLocation implements JsonSerializable {
        public Long providerNodeID; // node_id
        public List<Integer> endpoint; // endpoint_no
        public Integer fabricIndex; // fabric_idx

        public ProviderLocation(Long providerNodeID, List<Integer> endpoint, Integer fabricIndex) {
            this.providerNodeID = providerNodeID;
            this.endpoint = endpoint;
            this.fabricIndex = fabricIndex;
        }

        public String toJson() {
            String out = "{";
            out += "\"providerNodeID\" : " + providerNodeID + ",";
            out += "\"endpoint\" : " + endpoint + ",";
            out += "\"fabricIndex\" : " + fabricIndex + "";
            out += "}";
            return out;
        }
    }

    // ZCL Enums
    public enum AnnouncementReasonEnum implements JsonSerializable {
        SIMPLEANNOUNCEMENT(0, "SimpleAnnouncement"),
        UPDATEAVAILABLE(1, "UpdateAvailable"),
        URGENTUPDATEAVAILABLE(2, "UrgentUpdateAvailable"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private AnnouncementReasonEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ChangeReasonEnum implements JsonSerializable {
        UNKNOWN(0, "Unknown"),
        SUCCESS(1, "Success"),
        FAILURE(2, "Failure"),
        TIMEOUT(3, "TimeOut"),
        DELAYBYPROVIDER(4, "DelayByProvider"),
        UNKNOWN_VALUE(5, "UnknownValue");

        public final int value;
        public final String label;

        private ChangeReasonEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum UpdateStateEnum implements JsonSerializable {
        UNKNOWN(0, "Unknown"),
        IDLE(1, "Idle"),
        QUERYING(2, "Querying"),
        DELAYEDONQUERY(3, "DelayedOnQuery"),
        DOWNLOADING(4, "Downloading"),
        APPLYING(5, "Applying"),
        DELAYEDONAPPLY(6, "DelayedOnApply"),
        ROLLINGBACK(7, "RollingBack"),
        DELAYEDONUSERCONSENT(8, "DelayedOnUserConsent"),
        UNKNOWN_VALUE(9, "UnknownValue");

        public final int value;
        public final String label;

        private UpdateStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public ProviderLocation defaultOTAProviders; // 179 ProviderLocation
    public Boolean updatePossible; // 247 boolean
    public UpdateStateEnum updateState; // 303 UpdateStateEnum
    public Integer updateStateProgress; // 346 int8u
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public OtaSoftwareUpdateRequestorCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 100, "OtaSoftwareUpdateRequestor");
    }

    public void announceOTAProvider(MatterClient client, Long providerNodeID, Integer vendorID,
            AnnouncementReasonEnum announcementReason, String metadataForNode, List<Integer> endpoint)
            throws Exception {
        final Long _providerNodeID = providerNodeID;
        final Integer _vendorID = vendorID;
        final AnnouncementReasonEnum _announcementReason = announcementReason;
        final String _metadataForNode = metadataForNode;
        final List<Integer> _endpoint = endpoint;
        Object o = new Object() {
            public Long providerNodeID = _providerNodeID;
            public Integer vendorID = _vendorID;
            public AnnouncementReasonEnum announcementReason = _announcementReason;
            public String metadataForNode = _metadataForNode;
            public List<Integer> endpoint = _endpoint;
        };
        sendCommand(client, "announceOTAProvider", o);
    }

    public String toString() {
        String str = "";
        str += "defaultOTAProviders : " + defaultOTAProviders + "\n";
        str += "updatePossible : " + updatePossible + "\n";
        str += "updateState : " + updateState + "\n";
        str += "updateStateProgress : " + updateStateProgress + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
