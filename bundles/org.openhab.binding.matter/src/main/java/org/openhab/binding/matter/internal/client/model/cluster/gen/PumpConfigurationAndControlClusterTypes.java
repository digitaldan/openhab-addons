/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// 

package org.openhab.binding.matter.internal.client.model.cluster.gen;

import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * AUTO-GENERATED by zap. DO NOT EDIT!
 *
 * PumpConfigurationAndControl
 *
 * @author Dan Cunningham - Initial contribution
 */
public class PumpConfigurationAndControlClusterTypes {

    public static final String CLUSTER_NAME = "PUMP_CONFIGURATION_AND_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0200;

    // ZCL Enums
    public enum ControlModeEnum {
        CONSTANTSPEED(0, "ConstantSpeed"),
        CONSTANTPRESSURE(1, "ConstantPressure"),
        PROPORTIONALPRESSURE(2, "ProportionalPressure"),
        CONSTANTFLOW(3, "ConstantFlow"),
        CONSTANTTEMPERATURE(5, "ConstantTemperature"),
        AUTOMATIC(7, "Automatic"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private ControlModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum OperationModeEnum {
        NORMAL(0, "Normal"),
        MINIMUM(1, "Minimum"),
        MAXIMUM(2, "Maximum"),
        LOCAL(3, "Local"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private OperationModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class Feature {
        public boolean constantPressure;
        public boolean compensatedPressure;
        public boolean constantFlow;
        public boolean constantSpeed;
        public boolean constantTemperature;
        public boolean automatic;
        public boolean localOperation;

        public Feature(boolean constantPressure, boolean compensatedPressure, boolean constantFlow,
                boolean constantSpeed, boolean constantTemperature, boolean automatic, boolean localOperation) {
            this.constantPressure = constantPressure;
            this.compensatedPressure = compensatedPressure;
            this.constantFlow = constantFlow;
            this.constantSpeed = constantSpeed;
            this.constantTemperature = constantTemperature;
            this.automatic = automatic;
            this.localOperation = localOperation;
        }
    }

    public static class PumpStatusBitmap {
        public boolean deviceFault;
        public boolean supplyFault;
        public boolean speedLow;
        public boolean speedHigh;
        public boolean localOverride;
        public boolean running;
        public boolean remotePressure;
        public boolean remoteFlow;
        public boolean remoteTemperature;

        public PumpStatusBitmap(boolean deviceFault, boolean supplyFault, boolean speedLow, boolean speedHigh,
                boolean localOverride, boolean running, boolean remotePressure, boolean remoteFlow,
                boolean remoteTemperature) {
            this.deviceFault = deviceFault;
            this.supplyFault = supplyFault;
            this.speedLow = speedLow;
            this.speedHigh = speedHigh;
            this.localOverride = localOverride;
            this.running = running;
            this.remotePressure = remotePressure;
            this.remoteFlow = remoteFlow;
            this.remoteTemperature = remoteTemperature;
        }
    }
}
