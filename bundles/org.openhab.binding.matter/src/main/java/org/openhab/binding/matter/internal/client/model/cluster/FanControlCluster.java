/**
 * Copyright (c) 2010-2024 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;

/**
 * FanControl
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class FanControlCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "FAN_CONTROL_CLUSTER";
    public static final int CLUSTER_ID = 0x0202;

    // ZCL Enums
    public enum AirflowDirectionEnum {
        FORWARD(0, "Forward"),
        REVERSE(1, "Reverse"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private AirflowDirectionEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum FanModeEnum {
        OFF(0, "Off"),
        LOW(1, "Low"),
        MEDIUM(2, "Medium"),
        HIGH(3, "High"),
        ON(4, "On"),
        AUTO(5, "Auto"),
        SMART(6, "Smart"),
        UNKNOWN_VALUE(7, "UnknownValue");

        public final int value;
        public final String label;

        private FanModeEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum FanModeSequenceEnum {
        OFF_LOW_MED_HIGH(0, "Off/Low/Med/High"),
        OFF_LOW_HIGH(1, "Off/Low/High"),
        OFF_LOW_MED_HIGH_AUTO(2, "Off/Low/Med/High/Auto"),
        OFF_LOW_HIGH_AUTO(3, "Off/Low/High/Auto"),
        OFF_HIGH_AUTO(4, "Off/High/Auto"),
        OFF_HIGH(5, "Off/High"),
        UNKNOWN_VALUE(6, "UnknownValue");

        public final int value;
        public final String label;

        private FanModeSequenceEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    public enum StepDirectionEnum {
        INCREASE(0, "Increase"),
        DECREASE(1, "Decrease"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private StepDirectionEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }
    };

    // ZCL Bitmaps
    public static class Feature {
        public boolean multiSpeed;
        public boolean auto;
        public boolean rocking;
        public boolean wind;
        public boolean step;
        public boolean airflowDirection;

        public Feature(boolean multiSpeed, boolean auto, boolean rocking, boolean wind, boolean step,
                boolean airflowDirection) {
            this.multiSpeed = multiSpeed;
            this.auto = auto;
            this.rocking = rocking;
            this.wind = wind;
            this.step = step;
            this.airflowDirection = airflowDirection;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1], keys[2], keys[3], keys[4], keys[5]);
        }
    }

    public static class RockBitmap {
        public boolean rockLeftRight;
        public boolean rockUpDown;
        public boolean rockRound;

        public RockBitmap(boolean rockLeftRight, boolean rockUpDown, boolean rockRound) {
            this.rockLeftRight = rockLeftRight;
            this.rockUpDown = rockUpDown;
            this.rockRound = rockRound;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static RockBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new RockBitmap(keys[0], keys[1], keys[2]);
        }
    }

    public static class WindBitmap {
        public boolean sleepWind;
        public boolean naturalWind;

        public WindBitmap(boolean sleepWind, boolean naturalWind) {
            this.sleepWind = sleepWind;
            this.naturalWind = naturalWind;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static WindBitmap fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new WindBitmap(keys[0], keys[1]);
        }
    }

    public FanModeEnum fanMode; // 0 FanModeEnum reportable writable
    public FanModeSequenceEnum fanModeSequence; // 1 FanModeSequenceEnum reportable
    public Integer percentSetting; // 2 percent reportable writable
    public Integer percentCurrent; // 3 percent reportable
    public Integer speedMax; // 4 int8u reportable
    public Integer speedSetting; // 5 int8u reportable writable
    public Integer speedCurrent; // 6 int8u reportable
    public RockBitmap rockSupport; // 7 RockBitmap reportable
    public RockBitmap rockSetting; // 8 RockBitmap reportable writable
    public WindBitmap windSupport; // 9 WindBitmap reportable
    public WindBitmap windSetting; // 10 WindBitmap reportable writable
    public AirflowDirectionEnum airflowDirection; // 11 AirflowDirectionEnum reportable writable
    public List<Integer> generatedCommandList; // 65528 command_id reportable
    public List<Integer> acceptedCommandList; // 65529 command_id reportable
    public List<Integer> eventList; // 65530 event_id reportable
    public List<Integer> attributeList; // 65531 attrib_id reportable
    public Map<String, Boolean> featureMap; // 65532 bitmap32 reportable
    public Integer clusterRevision; // 65533 int16u reportable

    public FanControlCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 25, "FanControl");
    }

    public void step(MatterClient client, StepDirectionEnum direction, Boolean wrap, Boolean lowestOff)
            throws Exception {
        final StepDirectionEnum _direction = direction;
        final Boolean _wrap = wrap;
        final Boolean _lowestOff = lowestOff;
        Object o = new Object() {
            public StepDirectionEnum direction = _direction;
            public Boolean wrap = _wrap;
            public Boolean lowestOff = _lowestOff;
        };
        sendCommand(client, "step", o);
    }

    public String toString() {
        String str = "";
        str += "fanMode : " + fanMode + "\n";
        str += "fanModeSequence : " + fanModeSequence + "\n";
        str += "percentSetting : " + percentSetting + "\n";
        str += "percentCurrent : " + percentCurrent + "\n";
        str += "speedMax : " + speedMax + "\n";
        str += "speedSetting : " + speedSetting + "\n";
        str += "speedCurrent : " + speedCurrent + "\n";
        str += "rockSupport : " + rockSupport + "\n";
        str += "rockSetting : " + rockSetting + "\n";
        str += "windSupport : " + windSupport + "\n";
        str += "windSetting : " + windSetting + "\n";
        str += "airflowDirection : " + airflowDirection + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
