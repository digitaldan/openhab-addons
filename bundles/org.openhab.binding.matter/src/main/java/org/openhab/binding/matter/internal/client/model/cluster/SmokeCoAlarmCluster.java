/**
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

// AUTO-GENERATED by zap. DO NOT EDIT!

package org.openhab.binding.matter.internal.client.model.cluster;

import static java.util.Map.entry;

import java.util.List;
import java.util.Map;

import org.openhab.binding.matter.internal.client.MatterClient;
import org.openhab.binding.matter.internal.client.model.cluster.types.*;

/**
 * SmokeCoAlarm
 * 
 * @author Dan Cunningham - Initial contribution
 */
public class SmokeCoAlarmCluster extends BaseCluster {

    public static final String CLUSTER_NAME = "SMOKE_CO_ALARM_CLUSTER";
    public static final int CLUSTER_ID = 0x005C;

    static {
        ATTRIBUTE_MAPPING = Map.ofEntries(entry(72, "expressedState"), entry(150, "smokeState"), entry(220, "COState"),
                entry(283, "batteryAlert"), entry(332, "deviceMuted"), entry(370, "testInProgress"),
                entry(406, "hardwareFaultAlert"), entry(437, "endOfServiceAlert"), entry(464, "interconnectSmokeAlarm"),
                entry(487, "interconnectCOAlarm"), entry(512, "contaminationState"),
                entry(534, "smokeSensitivityLevel"), entry(551, "expiryDate"), entry(13, "generatedCommandList"),
                entry(11, "acceptedCommandList"), entry(9, "eventList"), entry(7, "attributeList"),
                entry(5, "featureMap"), entry(2, "clusterRevision"));
        COMMAND_MAPPING = Map.ofEntries(entry(43, "selfTestRequest"));
    }

    // ZCL Enums
    public enum AlarmStateEnum implements JsonSerializable {
        NORMAL(0, "Normal"),
        WARNING(1, "Warning"),
        CRITICAL(2, "Critical"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private AlarmStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ContaminationStateEnum implements JsonSerializable {
        NORMAL(0, "Normal"),
        LOW(1, "Low"),
        WARNING(2, "Warning"),
        CRITICAL(3, "Critical"),
        UNKNOWN_VALUE(4, "UnknownValue");

        public final int value;
        public final String label;

        private ContaminationStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum EndOfServiceEnum implements JsonSerializable {
        NORMAL(0, "Normal"),
        EXPIRED(1, "Expired"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private EndOfServiceEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum ExpressedStateEnum implements JsonSerializable {
        NORMAL(0, "Normal"),
        SMOKEALARM(1, "SmokeAlarm"),
        COALARM(2, "COAlarm"),
        BATTERYALERT(3, "BatteryAlert"),
        TESTING(4, "Testing"),
        HARDWAREFAULT(5, "HardwareFault"),
        ENDOFSERVICE(6, "EndOfService"),
        INTERCONNECTSMOKE(7, "InterconnectSmoke"),
        INTERCONNECTCO(8, "InterconnectCO"),
        UNKNOWN_VALUE(9, "UnknownValue");

        public final int value;
        public final String label;

        private ExpressedStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum MuteStateEnum implements JsonSerializable {
        NOTMUTED(0, "NotMuted"),
        MUTED(1, "Muted"),
        UNKNOWN_VALUE(2, "UnknownValue");

        public final int value;
        public final String label;

        private MuteStateEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    public enum SensitivityEnum implements JsonSerializable {
        HIGH(0, "High"),
        STANDARD(1, "Standard"),
        LOW(2, "Low"),
        UNKNOWN_VALUE(3, "UnknownValue");

        public final int value;
        public final String label;

        private SensitivityEnum(int value, String label) {
            this.value = value;
            this.label = label;
        }

        public String toJson() {
            return "\"" + this.label + "\"";
        }
    };

    // ZCL Bitmaps
    public static class Feature implements JsonSerializable {
        public boolean smokeAlarm;
        public boolean coAlarm;

        public Feature(boolean smokeAlarm, boolean coAlarm) {
            this.smokeAlarm = smokeAlarm;
            this.coAlarm = coAlarm;
        }

        public String toJson() {
            String out = "{";
            out += "\"smokeAlarm\" : " + smokeAlarm + ",";
            out += "\"coAlarm\" : " + coAlarm + "";
            out += "}";
            return out;
        }

        @SuppressWarnings({ "unchecked", "null" })
        public static Feature fromJson(String json) {
            Map<String, Boolean> m = GSON.fromJson(json, Map.class);
            Boolean[] keys = m.values().toArray(new Boolean[0]);
            return new Feature(keys[0], keys[1]);
        }
    }

    public ExpressedStateEnum expressedState; // 72 ExpressedStateEnum
    public AlarmStateEnum smokeState; // 150 AlarmStateEnum
    public AlarmStateEnum COState; // 220 AlarmStateEnum
    public AlarmStateEnum batteryAlert; // 283 AlarmStateEnum
    public MuteStateEnum deviceMuted; // 332 MuteStateEnum
    public Boolean testInProgress; // 370 boolean
    public Boolean hardwareFaultAlert; // 406 boolean
    public EndOfServiceEnum endOfServiceAlert; // 437 EndOfServiceEnum
    public AlarmStateEnum interconnectSmokeAlarm; // 464 AlarmStateEnum
    public AlarmStateEnum interconnectCOAlarm; // 487 AlarmStateEnum
    public ContaminationStateEnum contaminationState; // 512 ContaminationStateEnum
    public SensitivityEnum smokeSensitivityLevel; // 534 SensitivityEnum
    public Integer expiryDate; // 551 epoch_s
    public List<Integer> generatedCommandList; // 13 command_id
    public List<Integer> acceptedCommandList; // 11 command_id
    public List<Integer> eventList; // 9 event_id
    public List<Integer> attributeList; // 7 attrib_id
    public Map<String, Boolean> featureMap; // 5 bitmap32
    public Integer clusterRevision; // 2 int16u

    public SmokeCoAlarmCluster(long nodeId, int endpointId) {
        super(nodeId, endpointId, 67, "SmokeCoAlarm");
    }

    public void selfTestRequest(MatterClient client) throws Exception {
        Object o = new Object() {
        };
        sendCommand(client, "selfTestRequest", o);
    }

    public String toString() {
        String str = "";
        str += "expressedState : " + expressedState + "\n";
        str += "smokeState : " + smokeState + "\n";
        str += "COState : " + COState + "\n";
        str += "batteryAlert : " + batteryAlert + "\n";
        str += "deviceMuted : " + deviceMuted + "\n";
        str += "testInProgress : " + testInProgress + "\n";
        str += "hardwareFaultAlert : " + hardwareFaultAlert + "\n";
        str += "endOfServiceAlert : " + endOfServiceAlert + "\n";
        str += "interconnectSmokeAlarm : " + interconnectSmokeAlarm + "\n";
        str += "interconnectCOAlarm : " + interconnectCOAlarm + "\n";
        str += "contaminationState : " + contaminationState + "\n";
        str += "smokeSensitivityLevel : " + smokeSensitivityLevel + "\n";
        str += "expiryDate : " + expiryDate + "\n";
        str += "generatedCommandList : " + generatedCommandList + "\n";
        str += "acceptedCommandList : " + acceptedCommandList + "\n";
        str += "eventList : " + eventList + "\n";
        str += "attributeList : " + attributeList + "\n";
        str += "featureMap : " + featureMap + "\n";
        str += "clusterRevision : " + clusterRevision + "\n";
        return str;
    }
}
